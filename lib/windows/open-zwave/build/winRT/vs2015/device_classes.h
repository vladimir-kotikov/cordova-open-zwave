#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.6.81.0.
// 
namespace OpenZWave_WinMD {
    using namespace System;
    ref class NewDataSet;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class NewDataSet : public ::System::Data::DataSet {
        public : ref class DeviceClassesDataTable;
        public : ref class BasicDataTable;
        public : ref class GenericDataTable;
        public : ref class SpecificDataTable;
        public : ref class RoleDataTable;
        public : ref class NodeTypeDataTable;
        public : ref class DeviceTypeDataTable;
        public : ref class DeviceClassesRow;
        public : ref class BasicRow;
        public : ref class GenericRow;
        public : ref class SpecificRow;
        public : ref class RoleRow;
        public : ref class NodeTypeRow;
        public : ref class DeviceTypeRow;
        public : ref class DeviceClassesRowChangeEvent;
        public : ref class BasicRowChangeEvent;
        public : ref class GenericRowChangeEvent;
        public : ref class SpecificRowChangeEvent;
        public : ref class RoleRowChangeEvent;
        public : ref class NodeTypeRowChangeEvent;
        public : ref class DeviceTypeRowChangeEvent;
        
        private: OpenZWave_WinMD::NewDataSet::DeviceClassesDataTable^  tableDeviceClasses;
        
        private: OpenZWave_WinMD::NewDataSet::BasicDataTable^  tableBasic;
        
        private: OpenZWave_WinMD::NewDataSet::GenericDataTable^  tableGeneric;
        
        private: OpenZWave_WinMD::NewDataSet::SpecificDataTable^  tableSpecific;
        
        private: OpenZWave_WinMD::NewDataSet::RoleDataTable^  tableRole;
        
        private: OpenZWave_WinMD::NewDataSet::NodeTypeDataTable^  tableNodeType;
        
        private: OpenZWave_WinMD::NewDataSet::DeviceTypeDataTable^  tableDeviceType;
        
        private: ::System::Data::DataRelation^  relationDeviceClasses_Basic;
        
        private: ::System::Data::DataRelation^  relationDeviceClasses_Generic;
        
        private: ::System::Data::DataRelation^  relationGeneric_Specific;
        
        private: ::System::Data::DataRelation^  relationDeviceClasses_Role;
        
        private: ::System::Data::DataRelation^  relationDeviceClasses_NodeType;
        
        private: ::System::Data::DataRelation^  relationDeviceClasses_DeviceType;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void DeviceClassesRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::DeviceClassesRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void BasicRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::BasicRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void GenericRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::GenericRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void SpecificRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::SpecificRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void RoleRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::RoleRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void NodeTypeRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::NodeTypeRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void DeviceTypeRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::DeviceTypeRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::DeviceClassesDataTable^  DeviceClasses {
            OpenZWave_WinMD::NewDataSet::DeviceClassesDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::BasicDataTable^  Basic {
            OpenZWave_WinMD::NewDataSet::BasicDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::GenericDataTable^  Generic {
            OpenZWave_WinMD::NewDataSet::GenericDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::SpecificDataTable^  Specific {
            OpenZWave_WinMD::NewDataSet::SpecificDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::RoleDataTable^  Role {
            OpenZWave_WinMD::NewDataSet::RoleDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::NodeTypeDataTable^  NodeType {
            OpenZWave_WinMD::NewDataSet::NodeTypeDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::DeviceTypeDataTable^  DeviceType {
            OpenZWave_WinMD::NewDataSet::DeviceTypeDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeDeviceClasses();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeBasic();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeGeneric();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeSpecific();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeRole();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeNodeType();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeDeviceType();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class DeviceClassesDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnDeviceClasses_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::DeviceClassesRowChangeEventHandler^  DeviceClassesRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::DeviceClassesRowChangeEventHandler^  DeviceClassesRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::DeviceClassesRowChangeEventHandler^  DeviceClassesRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::DeviceClassesRowChangeEventHandler^  DeviceClassesRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            DeviceClassesDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            DeviceClassesDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            DeviceClassesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  DeviceClasses_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddDeviceClassesRow(OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  AddDeviceClassesRow();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  NewDeviceClassesRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveDeviceClassesRow(OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class BasicDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnkey;
            
            private: ::System::Data::DataColumn^  columnlabel;
            
            private: ::System::Data::DataColumn^  columnDeviceClasses_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::BasicRowChangeEventHandler^  BasicRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::BasicRowChangeEventHandler^  BasicRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::BasicRowChangeEventHandler^  BasicRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::BasicRowChangeEventHandler^  BasicRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            BasicDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            BasicDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            BasicDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  keyColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  labelColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  DeviceClasses_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::BasicRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::BasicRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddBasicRow(OpenZWave_WinMD::NewDataSet::BasicRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::BasicRow^  AddBasicRow(System::String^  key, System::String^  label, OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  parentDeviceClassesRowByDeviceClasses_Basic);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::BasicRow^  NewBasicRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveBasicRow(OpenZWave_WinMD::NewDataSet::BasicRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class GenericDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnkey;
            
            private: ::System::Data::DataColumn^  columnlabel;
            
            private: ::System::Data::DataColumn^  columncommand_classes;
            
            private: ::System::Data::DataColumn^  columnbasic;
            
            private: ::System::Data::DataColumn^  columnGeneric_Id;
            
            private: ::System::Data::DataColumn^  columnDeviceClasses_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::GenericRowChangeEventHandler^  GenericRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::GenericRowChangeEventHandler^  GenericRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::GenericRowChangeEventHandler^  GenericRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::GenericRowChangeEventHandler^  GenericRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GenericDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GenericDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GenericDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  keyColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  labelColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  command_classesColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  basicColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Generic_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  DeviceClasses_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::GenericRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::GenericRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddGenericRow(OpenZWave_WinMD::NewDataSet::GenericRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::GenericRow^  AddGenericRow(System::String^  key, System::String^  label, System::String^  command_classes, 
                        System::String^  basic, OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  parentDeviceClassesRowByDeviceClasses_Generic);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::GenericRow^  NewGenericRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveGenericRow(OpenZWave_WinMD::NewDataSet::GenericRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class SpecificDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnkey;
            
            private: ::System::Data::DataColumn^  columnlabel;
            
            private: ::System::Data::DataColumn^  columncommand_classes;
            
            private: ::System::Data::DataColumn^  columnbasic;
            
            private: ::System::Data::DataColumn^  columnGeneric_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::SpecificRowChangeEventHandler^  SpecificRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::SpecificRowChangeEventHandler^  SpecificRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::SpecificRowChangeEventHandler^  SpecificRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::SpecificRowChangeEventHandler^  SpecificRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            SpecificDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            SpecificDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            SpecificDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  keyColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  labelColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  command_classesColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  basicColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Generic_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::SpecificRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::SpecificRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddSpecificRow(OpenZWave_WinMD::NewDataSet::SpecificRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::SpecificRow^  AddSpecificRow(System::String^  key, System::String^  label, System::String^  command_classes, 
                        System::String^  basic, OpenZWave_WinMD::NewDataSet::GenericRow^  parentGenericRowByGeneric_Specific);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::SpecificRow^  NewSpecificRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveSpecificRow(OpenZWave_WinMD::NewDataSet::SpecificRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class RoleDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnkey;
            
            private: ::System::Data::DataColumn^  columnlabel;
            
            private: ::System::Data::DataColumn^  columncommand_classes;
            
            private: ::System::Data::DataColumn^  columnbasic;
            
            private: ::System::Data::DataColumn^  columnDeviceClasses_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::RoleRowChangeEventHandler^  RoleRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::RoleRowChangeEventHandler^  RoleRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::RoleRowChangeEventHandler^  RoleRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::RoleRowChangeEventHandler^  RoleRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            RoleDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            RoleDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            RoleDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  keyColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  labelColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  command_classesColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  basicColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  DeviceClasses_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::RoleRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::RoleRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddRoleRow(OpenZWave_WinMD::NewDataSet::RoleRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::RoleRow^  AddRoleRow(System::String^  key, System::String^  label, System::String^  command_classes, 
                        System::String^  basic, OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  parentDeviceClassesRowByDeviceClasses_Role);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::RoleRow^  NewRoleRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveRoleRow(OpenZWave_WinMD::NewDataSet::RoleRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class NodeTypeDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnkey;
            
            private: ::System::Data::DataColumn^  columnlabel;
            
            private: ::System::Data::DataColumn^  columncommand_classes;
            
            private: ::System::Data::DataColumn^  columnbasic;
            
            private: ::System::Data::DataColumn^  columnDeviceClasses_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::NodeTypeRowChangeEventHandler^  NodeTypeRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::NodeTypeRowChangeEventHandler^  NodeTypeRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::NodeTypeRowChangeEventHandler^  NodeTypeRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::NodeTypeRowChangeEventHandler^  NodeTypeRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NodeTypeDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NodeTypeDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NodeTypeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  keyColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  labelColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  command_classesColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  basicColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  DeviceClasses_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::NodeTypeRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::NodeTypeRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddNodeTypeRow(OpenZWave_WinMD::NewDataSet::NodeTypeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::NodeTypeRow^  AddNodeTypeRow(System::String^  key, System::String^  label, System::String^  command_classes, 
                        System::String^  basic, OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  parentDeviceClassesRowByDeviceClasses_NodeType);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::NodeTypeRow^  NewNodeTypeRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveNodeTypeRow(OpenZWave_WinMD::NewDataSet::NodeTypeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class DeviceTypeDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnkey;
            
            private: ::System::Data::DataColumn^  columnlabel;
            
            private: ::System::Data::DataColumn^  columncommand_classes;
            
            private: ::System::Data::DataColumn^  columnbasic;
            
            private: ::System::Data::DataColumn^  columnDeviceClasses_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::DeviceTypeRowChangeEventHandler^  DeviceTypeRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::DeviceTypeRowChangeEventHandler^  DeviceTypeRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::DeviceTypeRowChangeEventHandler^  DeviceTypeRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::DeviceTypeRowChangeEventHandler^  DeviceTypeRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            DeviceTypeDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            DeviceTypeDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            DeviceTypeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  keyColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  labelColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  command_classesColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  basicColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  DeviceClasses_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddDeviceTypeRow(OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  AddDeviceTypeRow(System::String^  key, System::String^  label, System::String^  command_classes, 
                        System::String^  basic, OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  parentDeviceClassesRowByDeviceClasses_DeviceType);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  NewDeviceTypeRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveDeviceTypeRow(OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class DeviceClassesRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::DeviceClassesDataTable^  tableDeviceClasses;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            DeviceClassesRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 DeviceClasses_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::BasicRow^  >^  GetBasicRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::GenericRow^  >^  GetGenericRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::RoleRow^  >^  GetRoleRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::NodeTypeRow^  >^  GetNodeTypeRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  >^  GetDeviceTypeRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class BasicRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::BasicDataTable^  tableBasic;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            BasicRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  key {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  label {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 DeviceClasses_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  DeviceClassesRow {
                OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsDeviceClasses_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetDeviceClasses_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class GenericRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::GenericDataTable^  tableGeneric;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GenericRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  key {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  label {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  command_classes {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  basic {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Generic_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 DeviceClasses_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  DeviceClassesRow {
                OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Iscommand_classesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setcommand_classesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsbasicNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetbasicNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsDeviceClasses_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetDeviceClasses_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::SpecificRow^  >^  GetSpecificRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class SpecificRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::SpecificDataTable^  tableSpecific;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            SpecificRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  key {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  label {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  command_classes {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  basic {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Generic_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::GenericRow^  GenericRow {
                OpenZWave_WinMD::NewDataSet::GenericRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::GenericRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Iscommand_classesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setcommand_classesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsbasicNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetbasicNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsGeneric_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetGeneric_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class RoleRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::RoleDataTable^  tableRole;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            RoleRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  key {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  label {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  command_classes {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  basic {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 DeviceClasses_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  DeviceClassesRow {
                OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Iscommand_classesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setcommand_classesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsbasicNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetbasicNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsDeviceClasses_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetDeviceClasses_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class NodeTypeRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::NodeTypeDataTable^  tableNodeType;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NodeTypeRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  key {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  label {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  command_classes {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  basic {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 DeviceClasses_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  DeviceClassesRow {
                OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Iscommand_classesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setcommand_classesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsbasicNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetbasicNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsDeviceClasses_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetDeviceClasses_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class DeviceTypeRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::DeviceTypeDataTable^  tableDeviceType;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            DeviceTypeRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  key {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  label {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  command_classes {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  basic {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 DeviceClasses_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  DeviceClassesRow {
                OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Iscommand_classesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setcommand_classesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsbasicNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetbasicNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsDeviceClasses_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetDeviceClasses_IdNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class DeviceClassesRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            DeviceClassesRowChangeEvent(OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  Row {
                OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class BasicRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::BasicRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            BasicRowChangeEvent(OpenZWave_WinMD::NewDataSet::BasicRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::BasicRow^  Row {
                OpenZWave_WinMD::NewDataSet::BasicRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class GenericRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::GenericRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GenericRowChangeEvent(OpenZWave_WinMD::NewDataSet::GenericRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::GenericRow^  Row {
                OpenZWave_WinMD::NewDataSet::GenericRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class SpecificRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::SpecificRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            SpecificRowChangeEvent(OpenZWave_WinMD::NewDataSet::SpecificRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::SpecificRow^  Row {
                OpenZWave_WinMD::NewDataSet::SpecificRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class RoleRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::RoleRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            RoleRowChangeEvent(OpenZWave_WinMD::NewDataSet::RoleRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::RoleRow^  Row {
                OpenZWave_WinMD::NewDataSet::RoleRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class NodeTypeRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::NodeTypeRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NodeTypeRowChangeEvent(OpenZWave_WinMD::NewDataSet::NodeTypeRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::NodeTypeRow^  Row {
                OpenZWave_WinMD::NewDataSet::NodeTypeRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class DeviceTypeRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            DeviceTypeRowChangeEvent(OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  Row {
                OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace OpenZWave_WinMD {
    
    
    inline NewDataSet::NewDataSet() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &OpenZWave_WinMD::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &OpenZWave_WinMD::NewDataSet::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"DeviceClasses"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::DeviceClassesDataTable(ds->Tables[L"DeviceClasses"])));
            }
            if (ds->Tables[L"Basic"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::BasicDataTable(ds->Tables[L"Basic"])));
            }
            if (ds->Tables[L"Generic"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::GenericDataTable(ds->Tables[L"Generic"])));
            }
            if (ds->Tables[L"Specific"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::SpecificDataTable(ds->Tables[L"Specific"])));
            }
            if (ds->Tables[L"Role"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::RoleDataTable(ds->Tables[L"Role"])));
            }
            if (ds->Tables[L"NodeType"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::NodeTypeDataTable(ds->Tables[L"NodeType"])));
            }
            if (ds->Tables[L"DeviceType"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::DeviceTypeDataTable(ds->Tables[L"DeviceType"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &OpenZWave_WinMD::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline OpenZWave_WinMD::NewDataSet::DeviceClassesDataTable^  NewDataSet::DeviceClasses::get() {
        return this->tableDeviceClasses;
    }
    
    inline OpenZWave_WinMD::NewDataSet::BasicDataTable^  NewDataSet::Basic::get() {
        return this->tableBasic;
    }
    
    inline OpenZWave_WinMD::NewDataSet::GenericDataTable^  NewDataSet::Generic::get() {
        return this->tableGeneric;
    }
    
    inline OpenZWave_WinMD::NewDataSet::SpecificDataTable^  NewDataSet::Specific::get() {
        return this->tableSpecific;
    }
    
    inline OpenZWave_WinMD::NewDataSet::RoleDataTable^  NewDataSet::Role::get() {
        return this->tableRole;
    }
    
    inline OpenZWave_WinMD::NewDataSet::NodeTypeDataTable^  NewDataSet::NodeType::get() {
        return this->tableNodeType;
    }
    
    inline OpenZWave_WinMD::NewDataSet::DeviceTypeDataTable^  NewDataSet::DeviceType::get() {
        return this->tableDeviceType;
    }
    
    inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  NewDataSet::Clone() {
        OpenZWave_WinMD::NewDataSet^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"DeviceClasses"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::DeviceClassesDataTable(ds->Tables[L"DeviceClasses"])));
            }
            if (ds->Tables[L"Basic"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::BasicDataTable(ds->Tables[L"Basic"])));
            }
            if (ds->Tables[L"Generic"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::GenericDataTable(ds->Tables[L"Generic"])));
            }
            if (ds->Tables[L"Specific"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::SpecificDataTable(ds->Tables[L"Specific"])));
            }
            if (ds->Tables[L"Role"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::RoleDataTable(ds->Tables[L"Role"])));
            }
            if (ds->Tables[L"NodeType"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::NodeTypeDataTable(ds->Tables[L"NodeType"])));
            }
            if (ds->Tables[L"DeviceType"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::DeviceTypeDataTable(ds->Tables[L"DeviceType"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void NewDataSet::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
        this->tableDeviceClasses = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceClassesDataTable^  >(__super::Tables[L"DeviceClasses"]));
        if (initTable == true) {
            if (this->tableDeviceClasses != nullptr) {
                this->tableDeviceClasses->InitVars();
            }
        }
        this->tableBasic = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::BasicDataTable^  >(__super::Tables[L"Basic"]));
        if (initTable == true) {
            if (this->tableBasic != nullptr) {
                this->tableBasic->InitVars();
            }
        }
        this->tableGeneric = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::GenericDataTable^  >(__super::Tables[L"Generic"]));
        if (initTable == true) {
            if (this->tableGeneric != nullptr) {
                this->tableGeneric->InitVars();
            }
        }
        this->tableSpecific = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SpecificDataTable^  >(__super::Tables[L"Specific"]));
        if (initTable == true) {
            if (this->tableSpecific != nullptr) {
                this->tableSpecific->InitVars();
            }
        }
        this->tableRole = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::RoleDataTable^  >(__super::Tables[L"Role"]));
        if (initTable == true) {
            if (this->tableRole != nullptr) {
                this->tableRole->InitVars();
            }
        }
        this->tableNodeType = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeTypeDataTable^  >(__super::Tables[L"NodeType"]));
        if (initTable == true) {
            if (this->tableNodeType != nullptr) {
                this->tableNodeType->InitVars();
            }
        }
        this->tableDeviceType = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceTypeDataTable^  >(__super::Tables[L"DeviceType"]));
        if (initTable == true) {
            if (this->tableDeviceType != nullptr) {
                this->tableDeviceType->InitVars();
            }
        }
        this->relationDeviceClasses_Basic = this->Relations[L"DeviceClasses_Basic"];
        this->relationDeviceClasses_Generic = this->Relations[L"DeviceClasses_Generic"];
        this->relationGeneric_Specific = this->Relations[L"Generic_Specific"];
        this->relationDeviceClasses_Role = this->Relations[L"DeviceClasses_Role"];
        this->relationDeviceClasses_NodeType = this->Relations[L"DeviceClasses_NodeType"];
        this->relationDeviceClasses_DeviceType = this->Relations[L"DeviceClasses_DeviceType"];
    }
    
    inline ::System::Void NewDataSet::InitClass() {
        this->DataSetName = L"NewDataSet";
        this->Prefix = L"";
        this->Namespace = L"http://code.google.com/p/open-zwave/";
        this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tableDeviceClasses = (gcnew OpenZWave_WinMD::NewDataSet::DeviceClassesDataTable());
        __super::Tables->Add(this->tableDeviceClasses);
        this->tableBasic = (gcnew OpenZWave_WinMD::NewDataSet::BasicDataTable());
        __super::Tables->Add(this->tableBasic);
        this->tableGeneric = (gcnew OpenZWave_WinMD::NewDataSet::GenericDataTable());
        __super::Tables->Add(this->tableGeneric);
        this->tableSpecific = (gcnew OpenZWave_WinMD::NewDataSet::SpecificDataTable());
        __super::Tables->Add(this->tableSpecific);
        this->tableRole = (gcnew OpenZWave_WinMD::NewDataSet::RoleDataTable());
        __super::Tables->Add(this->tableRole);
        this->tableNodeType = (gcnew OpenZWave_WinMD::NewDataSet::NodeTypeDataTable());
        __super::Tables->Add(this->tableNodeType);
        this->tableDeviceType = (gcnew OpenZWave_WinMD::NewDataSet::DeviceTypeDataTable());
        __super::Tables->Add(this->tableDeviceType);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"DeviceClasses_Basic", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDeviceClasses->DeviceClasses_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableBasic->DeviceClasses_IdColumn}));
        this->tableBasic->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"DeviceClasses_Generic", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDeviceClasses->DeviceClasses_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGeneric->DeviceClasses_IdColumn}));
        this->tableGeneric->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Generic_Specific", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGeneric->Generic_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSpecific->Generic_IdColumn}));
        this->tableSpecific->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"DeviceClasses_Role", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDeviceClasses->DeviceClasses_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRole->DeviceClasses_IdColumn}));
        this->tableRole->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"DeviceClasses_NodeType", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDeviceClasses->DeviceClasses_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableNodeType->DeviceClasses_IdColumn}));
        this->tableNodeType->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"DeviceClasses_DeviceType", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDeviceClasses->DeviceClasses_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDeviceType->DeviceClasses_IdColumn}));
        this->tableDeviceType->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationDeviceClasses_Basic = (gcnew ::System::Data::DataRelation(L"DeviceClasses_Basic", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDeviceClasses->DeviceClasses_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableBasic->DeviceClasses_IdColumn}, false));
        this->relationDeviceClasses_Basic->Nested = true;
        this->Relations->Add(this->relationDeviceClasses_Basic);
        this->relationDeviceClasses_Generic = (gcnew ::System::Data::DataRelation(L"DeviceClasses_Generic", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDeviceClasses->DeviceClasses_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGeneric->DeviceClasses_IdColumn}, false));
        this->relationDeviceClasses_Generic->Nested = true;
        this->Relations->Add(this->relationDeviceClasses_Generic);
        this->relationGeneric_Specific = (gcnew ::System::Data::DataRelation(L"Generic_Specific", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGeneric->Generic_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSpecific->Generic_IdColumn}, false));
        this->relationGeneric_Specific->Nested = true;
        this->Relations->Add(this->relationGeneric_Specific);
        this->relationDeviceClasses_Role = (gcnew ::System::Data::DataRelation(L"DeviceClasses_Role", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDeviceClasses->DeviceClasses_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRole->DeviceClasses_IdColumn}, false));
        this->relationDeviceClasses_Role->Nested = true;
        this->Relations->Add(this->relationDeviceClasses_Role);
        this->relationDeviceClasses_NodeType = (gcnew ::System::Data::DataRelation(L"DeviceClasses_NodeType", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDeviceClasses->DeviceClasses_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableNodeType->DeviceClasses_IdColumn}, false));
        this->relationDeviceClasses_NodeType->Nested = true;
        this->Relations->Add(this->relationDeviceClasses_NodeType);
        this->relationDeviceClasses_DeviceType = (gcnew ::System::Data::DataRelation(L"DeviceClasses_DeviceType", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDeviceClasses->DeviceClasses_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDeviceType->DeviceClasses_IdColumn}, false));
        this->relationDeviceClasses_DeviceType->Nested = true;
        this->Relations->Add(this->relationDeviceClasses_DeviceType);
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeDeviceClasses() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeBasic() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeGeneric() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeSpecific() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRole() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeNodeType() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeDeviceType() {
        return false;
    }
    
    inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::DeviceClassesDataTable::DeviceClassesDataTable() {
        this->TableName = L"DeviceClasses";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::DeviceClassesDataTable::DeviceClassesDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::DeviceClassesDataTable::DeviceClassesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceClassesDataTable::DeviceClasses_IdColumn::get() {
        return this->columnDeviceClasses_Id;
    }
    
    inline ::System::Int32 NewDataSet::DeviceClassesDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  NewDataSet::DeviceClassesDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::DeviceClassesDataTable::AddDeviceClassesRow(OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  NewDataSet::DeviceClassesDataTable::AddDeviceClassesRow() {
        OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  rowDeviceClassesRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {nullptr};
        rowDeviceClassesRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowDeviceClassesRow);
        return rowDeviceClassesRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::DeviceClassesDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::DeviceClassesDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::DeviceClassesDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceClassesDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::DeviceClassesDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::DeviceClassesDataTable());
    }
    
    inline ::System::Void NewDataSet::DeviceClassesDataTable::InitVars() {
        this->columnDeviceClasses_Id = __super::Columns[L"DeviceClasses_Id"];
    }
    
    inline ::System::Void NewDataSet::DeviceClassesDataTable::InitClass() {
        this->columnDeviceClasses_Id = (gcnew ::System::Data::DataColumn(L"DeviceClasses_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnDeviceClasses_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnDeviceClasses_Id}, 
                true)));
        this->columnDeviceClasses_Id->AutoIncrement = true;
        this->columnDeviceClasses_Id->AllowDBNull = false;
        this->columnDeviceClasses_Id->Unique = true;
    }
    
    inline OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  NewDataSet::DeviceClassesDataTable::NewDeviceClassesRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::DeviceClassesDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::DeviceClassesRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::DeviceClassesDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::DeviceClassesRow::typeid;
    }
    
    inline ::System::Void NewDataSet::DeviceClassesDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->DeviceClassesRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::DeviceClassesRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::DeviceClassesDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->DeviceClassesRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::DeviceClassesRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::DeviceClassesDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->DeviceClassesRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::DeviceClassesRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::DeviceClassesDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->DeviceClassesRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::DeviceClassesRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::DeviceClassesDataTable::RemoveDeviceClassesRow(OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::DeviceClassesDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"DeviceClassesDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::BasicDataTable::BasicDataTable() {
        this->TableName = L"Basic";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::BasicDataTable::BasicDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::BasicDataTable::BasicDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::BasicDataTable::keyColumn::get() {
        return this->columnkey;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::BasicDataTable::labelColumn::get() {
        return this->columnlabel;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::BasicDataTable::DeviceClasses_IdColumn::get() {
        return this->columnDeviceClasses_Id;
    }
    
    inline ::System::Int32 NewDataSet::BasicDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::BasicRow^  NewDataSet::BasicDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::BasicRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::BasicDataTable::AddBasicRow(OpenZWave_WinMD::NewDataSet::BasicRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::BasicRow^  NewDataSet::BasicDataTable::AddBasicRow(System::String^  key, System::String^  label, 
                OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  parentDeviceClassesRowByDeviceClasses_Basic) {
        OpenZWave_WinMD::NewDataSet::BasicRow^  rowBasicRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::BasicRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {key, label, nullptr};
        if (parentDeviceClassesRowByDeviceClasses_Basic != nullptr) {
            columnValuesArray[2] = parentDeviceClassesRowByDeviceClasses_Basic[0];
        }
        rowBasicRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowBasicRow);
        return rowBasicRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::BasicDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::BasicDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::BasicDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::BasicDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::BasicDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::BasicDataTable());
    }
    
    inline ::System::Void NewDataSet::BasicDataTable::InitVars() {
        this->columnkey = __super::Columns[L"key"];
        this->columnlabel = __super::Columns[L"label"];
        this->columnDeviceClasses_Id = __super::Columns[L"DeviceClasses_Id"];
    }
    
    inline ::System::Void NewDataSet::BasicDataTable::InitClass() {
        this->columnkey = (gcnew ::System::Data::DataColumn(L"key", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnkey);
        this->columnlabel = (gcnew ::System::Data::DataColumn(L"label", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnlabel);
        this->columnDeviceClasses_Id = (gcnew ::System::Data::DataColumn(L"DeviceClasses_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnDeviceClasses_Id);
        this->columnkey->AllowDBNull = false;
        this->columnkey->Namespace = L"";
        this->columnlabel->AllowDBNull = false;
        this->columnlabel->Namespace = L"";
    }
    
    inline OpenZWave_WinMD::NewDataSet::BasicRow^  NewDataSet::BasicDataTable::NewBasicRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::BasicRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::BasicDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::BasicRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::BasicDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::BasicRow::typeid;
    }
    
    inline ::System::Void NewDataSet::BasicDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->BasicRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::BasicRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::BasicRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::BasicDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->BasicRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::BasicRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::BasicRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::BasicDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->BasicRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::BasicRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::BasicRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::BasicDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->BasicRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::BasicRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::BasicRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::BasicDataTable::RemoveBasicRow(OpenZWave_WinMD::NewDataSet::BasicRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::BasicDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"BasicDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::GenericDataTable::GenericDataTable() {
        this->TableName = L"Generic";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::GenericDataTable::GenericDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::GenericDataTable::GenericDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::GenericDataTable::keyColumn::get() {
        return this->columnkey;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::GenericDataTable::labelColumn::get() {
        return this->columnlabel;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::GenericDataTable::command_classesColumn::get() {
        return this->columncommand_classes;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::GenericDataTable::basicColumn::get() {
        return this->columnbasic;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::GenericDataTable::Generic_IdColumn::get() {
        return this->columnGeneric_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::GenericDataTable::DeviceClasses_IdColumn::get() {
        return this->columnDeviceClasses_Id;
    }
    
    inline ::System::Int32 NewDataSet::GenericDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::GenericRow^  NewDataSet::GenericDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::GenericRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::GenericDataTable::AddGenericRow(OpenZWave_WinMD::NewDataSet::GenericRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::GenericRow^  NewDataSet::GenericDataTable::AddGenericRow(System::String^  key, System::String^  label, 
                System::String^  command_classes, System::String^  basic, OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  parentDeviceClassesRowByDeviceClasses_Generic) {
        OpenZWave_WinMD::NewDataSet::GenericRow^  rowGenericRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::GenericRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(6) {key, label, command_classes, 
            basic, nullptr, nullptr};
        if (parentDeviceClassesRowByDeviceClasses_Generic != nullptr) {
            columnValuesArray[5] = parentDeviceClassesRowByDeviceClasses_Generic[0];
        }
        rowGenericRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowGenericRow);
        return rowGenericRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::GenericDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::GenericDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::GenericDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::GenericDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::GenericDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::GenericDataTable());
    }
    
    inline ::System::Void NewDataSet::GenericDataTable::InitVars() {
        this->columnkey = __super::Columns[L"key"];
        this->columnlabel = __super::Columns[L"label"];
        this->columncommand_classes = __super::Columns[L"command_classes"];
        this->columnbasic = __super::Columns[L"basic"];
        this->columnGeneric_Id = __super::Columns[L"Generic_Id"];
        this->columnDeviceClasses_Id = __super::Columns[L"DeviceClasses_Id"];
    }
    
    inline ::System::Void NewDataSet::GenericDataTable::InitClass() {
        this->columnkey = (gcnew ::System::Data::DataColumn(L"key", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnkey);
        this->columnlabel = (gcnew ::System::Data::DataColumn(L"label", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnlabel);
        this->columncommand_classes = (gcnew ::System::Data::DataColumn(L"command_classes", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncommand_classes);
        this->columnbasic = (gcnew ::System::Data::DataColumn(L"basic", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnbasic);
        this->columnGeneric_Id = (gcnew ::System::Data::DataColumn(L"Generic_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnGeneric_Id);
        this->columnDeviceClasses_Id = (gcnew ::System::Data::DataColumn(L"DeviceClasses_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnDeviceClasses_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnGeneric_Id}, 
                true)));
        this->columnkey->AllowDBNull = false;
        this->columnkey->Namespace = L"";
        this->columnlabel->AllowDBNull = false;
        this->columnlabel->Namespace = L"";
        this->columncommand_classes->Namespace = L"";
        this->columnbasic->Namespace = L"";
        this->columnGeneric_Id->AutoIncrement = true;
        this->columnGeneric_Id->AllowDBNull = false;
        this->columnGeneric_Id->Unique = true;
    }
    
    inline OpenZWave_WinMD::NewDataSet::GenericRow^  NewDataSet::GenericDataTable::NewGenericRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::GenericRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::GenericDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::GenericRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::GenericDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::GenericRow::typeid;
    }
    
    inline ::System::Void NewDataSet::GenericDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->GenericRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::GenericRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::GenericRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::GenericDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->GenericRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::GenericRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::GenericRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::GenericDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->GenericRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::GenericRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::GenericRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::GenericDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->GenericRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::GenericRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::GenericRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::GenericDataTable::RemoveGenericRow(OpenZWave_WinMD::NewDataSet::GenericRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GenericDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"GenericDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::SpecificDataTable::SpecificDataTable() {
        this->TableName = L"Specific";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::SpecificDataTable::SpecificDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::SpecificDataTable::SpecificDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SpecificDataTable::keyColumn::get() {
        return this->columnkey;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SpecificDataTable::labelColumn::get() {
        return this->columnlabel;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SpecificDataTable::command_classesColumn::get() {
        return this->columncommand_classes;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SpecificDataTable::basicColumn::get() {
        return this->columnbasic;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SpecificDataTable::Generic_IdColumn::get() {
        return this->columnGeneric_Id;
    }
    
    inline ::System::Int32 NewDataSet::SpecificDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::SpecificRow^  NewDataSet::SpecificDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SpecificRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::SpecificDataTable::AddSpecificRow(OpenZWave_WinMD::NewDataSet::SpecificRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::SpecificRow^  NewDataSet::SpecificDataTable::AddSpecificRow(System::String^  key, 
                System::String^  label, System::String^  command_classes, System::String^  basic, OpenZWave_WinMD::NewDataSet::GenericRow^  parentGenericRowByGeneric_Specific) {
        OpenZWave_WinMD::NewDataSet::SpecificRow^  rowSpecificRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SpecificRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {key, label, command_classes, 
            basic, nullptr};
        if (parentGenericRowByGeneric_Specific != nullptr) {
            columnValuesArray[4] = parentGenericRowByGeneric_Specific[4];
        }
        rowSpecificRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowSpecificRow);
        return rowSpecificRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::SpecificDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::SpecificDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::SpecificDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SpecificDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::SpecificDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::SpecificDataTable());
    }
    
    inline ::System::Void NewDataSet::SpecificDataTable::InitVars() {
        this->columnkey = __super::Columns[L"key"];
        this->columnlabel = __super::Columns[L"label"];
        this->columncommand_classes = __super::Columns[L"command_classes"];
        this->columnbasic = __super::Columns[L"basic"];
        this->columnGeneric_Id = __super::Columns[L"Generic_Id"];
    }
    
    inline ::System::Void NewDataSet::SpecificDataTable::InitClass() {
        this->columnkey = (gcnew ::System::Data::DataColumn(L"key", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnkey);
        this->columnlabel = (gcnew ::System::Data::DataColumn(L"label", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnlabel);
        this->columncommand_classes = (gcnew ::System::Data::DataColumn(L"command_classes", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncommand_classes);
        this->columnbasic = (gcnew ::System::Data::DataColumn(L"basic", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnbasic);
        this->columnGeneric_Id = (gcnew ::System::Data::DataColumn(L"Generic_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnGeneric_Id);
        this->columnkey->AllowDBNull = false;
        this->columnkey->Namespace = L"";
        this->columnlabel->AllowDBNull = false;
        this->columnlabel->Namespace = L"";
        this->columncommand_classes->Namespace = L"";
        this->columnbasic->Namespace = L"";
    }
    
    inline OpenZWave_WinMD::NewDataSet::SpecificRow^  NewDataSet::SpecificDataTable::NewSpecificRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SpecificRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::SpecificDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::SpecificRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::SpecificDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::SpecificRow::typeid;
    }
    
    inline ::System::Void NewDataSet::SpecificDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->SpecificRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::SpecificRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::SpecificRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::SpecificDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->SpecificRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::SpecificRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::SpecificRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::SpecificDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->SpecificRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::SpecificRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::SpecificRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::SpecificDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->SpecificRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::SpecificRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::SpecificRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::SpecificDataTable::RemoveSpecificRow(OpenZWave_WinMD::NewDataSet::SpecificRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::SpecificDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"SpecificDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::RoleDataTable::RoleDataTable() {
        this->TableName = L"Role";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::RoleDataTable::RoleDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::RoleDataTable::RoleDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::RoleDataTable::keyColumn::get() {
        return this->columnkey;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::RoleDataTable::labelColumn::get() {
        return this->columnlabel;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::RoleDataTable::command_classesColumn::get() {
        return this->columncommand_classes;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::RoleDataTable::basicColumn::get() {
        return this->columnbasic;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::RoleDataTable::DeviceClasses_IdColumn::get() {
        return this->columnDeviceClasses_Id;
    }
    
    inline ::System::Int32 NewDataSet::RoleDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::RoleRow^  NewDataSet::RoleDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::RoleRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::RoleDataTable::AddRoleRow(OpenZWave_WinMD::NewDataSet::RoleRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::RoleRow^  NewDataSet::RoleDataTable::AddRoleRow(System::String^  key, System::String^  label, 
                System::String^  command_classes, System::String^  basic, OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  parentDeviceClassesRowByDeviceClasses_Role) {
        OpenZWave_WinMD::NewDataSet::RoleRow^  rowRoleRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::RoleRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {key, label, command_classes, 
            basic, nullptr};
        if (parentDeviceClassesRowByDeviceClasses_Role != nullptr) {
            columnValuesArray[4] = parentDeviceClassesRowByDeviceClasses_Role[0];
        }
        rowRoleRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowRoleRow);
        return rowRoleRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::RoleDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::RoleDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::RoleDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::RoleDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::RoleDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::RoleDataTable());
    }
    
    inline ::System::Void NewDataSet::RoleDataTable::InitVars() {
        this->columnkey = __super::Columns[L"key"];
        this->columnlabel = __super::Columns[L"label"];
        this->columncommand_classes = __super::Columns[L"command_classes"];
        this->columnbasic = __super::Columns[L"basic"];
        this->columnDeviceClasses_Id = __super::Columns[L"DeviceClasses_Id"];
    }
    
    inline ::System::Void NewDataSet::RoleDataTable::InitClass() {
        this->columnkey = (gcnew ::System::Data::DataColumn(L"key", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnkey);
        this->columnlabel = (gcnew ::System::Data::DataColumn(L"label", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnlabel);
        this->columncommand_classes = (gcnew ::System::Data::DataColumn(L"command_classes", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncommand_classes);
        this->columnbasic = (gcnew ::System::Data::DataColumn(L"basic", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnbasic);
        this->columnDeviceClasses_Id = (gcnew ::System::Data::DataColumn(L"DeviceClasses_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnDeviceClasses_Id);
        this->columnkey->AllowDBNull = false;
        this->columnkey->Namespace = L"";
        this->columnlabel->AllowDBNull = false;
        this->columnlabel->Namespace = L"";
        this->columncommand_classes->Namespace = L"";
        this->columnbasic->Namespace = L"";
    }
    
    inline OpenZWave_WinMD::NewDataSet::RoleRow^  NewDataSet::RoleDataTable::NewRoleRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::RoleRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::RoleDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::RoleRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::RoleDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::RoleRow::typeid;
    }
    
    inline ::System::Void NewDataSet::RoleDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->RoleRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::RoleRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::RoleRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::RoleDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->RoleRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::RoleRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::RoleRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::RoleDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->RoleRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::RoleRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::RoleRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::RoleDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->RoleRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::RoleRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::RoleRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::RoleDataTable::RemoveRoleRow(OpenZWave_WinMD::NewDataSet::RoleRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::RoleDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"RoleDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::NodeTypeDataTable::NodeTypeDataTable() {
        this->TableName = L"NodeType";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::NodeTypeDataTable::NodeTypeDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::NodeTypeDataTable::NodeTypeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::NodeTypeDataTable::keyColumn::get() {
        return this->columnkey;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::NodeTypeDataTable::labelColumn::get() {
        return this->columnlabel;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::NodeTypeDataTable::command_classesColumn::get() {
        return this->columncommand_classes;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::NodeTypeDataTable::basicColumn::get() {
        return this->columnbasic;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::NodeTypeDataTable::DeviceClasses_IdColumn::get() {
        return this->columnDeviceClasses_Id;
    }
    
    inline ::System::Int32 NewDataSet::NodeTypeDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::NodeTypeRow^  NewDataSet::NodeTypeDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeTypeRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::NodeTypeDataTable::AddNodeTypeRow(OpenZWave_WinMD::NewDataSet::NodeTypeRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::NodeTypeRow^  NewDataSet::NodeTypeDataTable::AddNodeTypeRow(System::String^  key, 
                System::String^  label, System::String^  command_classes, System::String^  basic, OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  parentDeviceClassesRowByDeviceClasses_NodeType) {
        OpenZWave_WinMD::NewDataSet::NodeTypeRow^  rowNodeTypeRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeTypeRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {key, label, command_classes, 
            basic, nullptr};
        if (parentDeviceClassesRowByDeviceClasses_NodeType != nullptr) {
            columnValuesArray[4] = parentDeviceClassesRowByDeviceClasses_NodeType[0];
        }
        rowNodeTypeRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowNodeTypeRow);
        return rowNodeTypeRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::NodeTypeDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::NodeTypeDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::NodeTypeDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeTypeDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::NodeTypeDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::NodeTypeDataTable());
    }
    
    inline ::System::Void NewDataSet::NodeTypeDataTable::InitVars() {
        this->columnkey = __super::Columns[L"key"];
        this->columnlabel = __super::Columns[L"label"];
        this->columncommand_classes = __super::Columns[L"command_classes"];
        this->columnbasic = __super::Columns[L"basic"];
        this->columnDeviceClasses_Id = __super::Columns[L"DeviceClasses_Id"];
    }
    
    inline ::System::Void NewDataSet::NodeTypeDataTable::InitClass() {
        this->columnkey = (gcnew ::System::Data::DataColumn(L"key", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnkey);
        this->columnlabel = (gcnew ::System::Data::DataColumn(L"label", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnlabel);
        this->columncommand_classes = (gcnew ::System::Data::DataColumn(L"command_classes", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncommand_classes);
        this->columnbasic = (gcnew ::System::Data::DataColumn(L"basic", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnbasic);
        this->columnDeviceClasses_Id = (gcnew ::System::Data::DataColumn(L"DeviceClasses_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnDeviceClasses_Id);
        this->columnkey->AllowDBNull = false;
        this->columnkey->Namespace = L"";
        this->columnlabel->AllowDBNull = false;
        this->columnlabel->Namespace = L"";
        this->columncommand_classes->Namespace = L"";
        this->columnbasic->Namespace = L"";
    }
    
    inline OpenZWave_WinMD::NewDataSet::NodeTypeRow^  NewDataSet::NodeTypeDataTable::NewNodeTypeRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeTypeRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::NodeTypeDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::NodeTypeRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::NodeTypeDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::NodeTypeRow::typeid;
    }
    
    inline ::System::Void NewDataSet::NodeTypeDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->NodeTypeRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::NodeTypeRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeTypeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::NodeTypeDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->NodeTypeRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::NodeTypeRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeTypeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::NodeTypeDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->NodeTypeRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::NodeTypeRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeTypeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::NodeTypeDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->NodeTypeRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::NodeTypeRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeTypeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::NodeTypeDataTable::RemoveNodeTypeRow(OpenZWave_WinMD::NewDataSet::NodeTypeRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::NodeTypeDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"NodeTypeDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::DeviceTypeDataTable::DeviceTypeDataTable() {
        this->TableName = L"DeviceType";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::DeviceTypeDataTable::DeviceTypeDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::DeviceTypeDataTable::DeviceTypeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceTypeDataTable::keyColumn::get() {
        return this->columnkey;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceTypeDataTable::labelColumn::get() {
        return this->columnlabel;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceTypeDataTable::command_classesColumn::get() {
        return this->columncommand_classes;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceTypeDataTable::basicColumn::get() {
        return this->columnbasic;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::DeviceTypeDataTable::DeviceClasses_IdColumn::get() {
        return this->columnDeviceClasses_Id;
    }
    
    inline ::System::Int32 NewDataSet::DeviceTypeDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  NewDataSet::DeviceTypeDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::DeviceTypeDataTable::AddDeviceTypeRow(OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  NewDataSet::DeviceTypeDataTable::AddDeviceTypeRow(System::String^  key, 
                System::String^  label, System::String^  command_classes, System::String^  basic, OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  parentDeviceClassesRowByDeviceClasses_DeviceType) {
        OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  rowDeviceTypeRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {key, label, command_classes, 
            basic, nullptr};
        if (parentDeviceClassesRowByDeviceClasses_DeviceType != nullptr) {
            columnValuesArray[4] = parentDeviceClassesRowByDeviceClasses_DeviceType[0];
        }
        rowDeviceTypeRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowDeviceTypeRow);
        return rowDeviceTypeRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::DeviceTypeDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::DeviceTypeDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::DeviceTypeDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceTypeDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::DeviceTypeDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::DeviceTypeDataTable());
    }
    
    inline ::System::Void NewDataSet::DeviceTypeDataTable::InitVars() {
        this->columnkey = __super::Columns[L"key"];
        this->columnlabel = __super::Columns[L"label"];
        this->columncommand_classes = __super::Columns[L"command_classes"];
        this->columnbasic = __super::Columns[L"basic"];
        this->columnDeviceClasses_Id = __super::Columns[L"DeviceClasses_Id"];
    }
    
    inline ::System::Void NewDataSet::DeviceTypeDataTable::InitClass() {
        this->columnkey = (gcnew ::System::Data::DataColumn(L"key", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnkey);
        this->columnlabel = (gcnew ::System::Data::DataColumn(L"label", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnlabel);
        this->columncommand_classes = (gcnew ::System::Data::DataColumn(L"command_classes", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncommand_classes);
        this->columnbasic = (gcnew ::System::Data::DataColumn(L"basic", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnbasic);
        this->columnDeviceClasses_Id = (gcnew ::System::Data::DataColumn(L"DeviceClasses_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnDeviceClasses_Id);
        this->columnkey->AllowDBNull = false;
        this->columnkey->Namespace = L"";
        this->columnlabel->AllowDBNull = false;
        this->columnlabel->Namespace = L"";
        this->columncommand_classes->Namespace = L"";
        this->columnbasic->Namespace = L"";
    }
    
    inline OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  NewDataSet::DeviceTypeDataTable::NewDeviceTypeRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::DeviceTypeDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::DeviceTypeRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::DeviceTypeDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::DeviceTypeRow::typeid;
    }
    
    inline ::System::Void NewDataSet::DeviceTypeDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->DeviceTypeRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::DeviceTypeRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::DeviceTypeDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->DeviceTypeRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::DeviceTypeRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::DeviceTypeDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->DeviceTypeRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::DeviceTypeRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::DeviceTypeDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->DeviceTypeRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::DeviceTypeRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::DeviceTypeDataTable::RemoveDeviceTypeRow(OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::DeviceTypeDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"DeviceTypeDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::DeviceClassesRow::DeviceClassesRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableDeviceClasses = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceClassesDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::DeviceClassesRow::DeviceClasses_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableDeviceClasses->DeviceClasses_IdColumn]));
    }
    inline System::Void NewDataSet::DeviceClassesRow::DeviceClasses_Id::set(System::Int32 value) {
        this[this->tableDeviceClasses->DeviceClasses_IdColumn] = value;
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::BasicRow^  >^  NewDataSet::DeviceClassesRow::GetBasicRows() {
        if (this->Table->ChildRelations[L"DeviceClasses_Basic"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::BasicRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::BasicRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"DeviceClasses_Basic"])));
        }
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::GenericRow^  >^  NewDataSet::DeviceClassesRow::GetGenericRows() {
        if (this->Table->ChildRelations[L"DeviceClasses_Generic"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::GenericRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::GenericRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"DeviceClasses_Generic"])));
        }
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::RoleRow^  >^  NewDataSet::DeviceClassesRow::GetRoleRows() {
        if (this->Table->ChildRelations[L"DeviceClasses_Role"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::RoleRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::RoleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"DeviceClasses_Role"])));
        }
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::NodeTypeRow^  >^  NewDataSet::DeviceClassesRow::GetNodeTypeRows() {
        if (this->Table->ChildRelations[L"DeviceClasses_NodeType"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::NodeTypeRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::NodeTypeRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"DeviceClasses_NodeType"])));
        }
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  >^  NewDataSet::DeviceClassesRow::GetDeviceTypeRows() {
        if (this->Table->ChildRelations[L"DeviceClasses_DeviceType"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"DeviceClasses_DeviceType"])));
        }
    }
    
    
    inline NewDataSet::BasicRow::BasicRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableBasic = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::BasicDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::BasicRow::key::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableBasic->keyColumn]));
    }
    inline System::Void NewDataSet::BasicRow::key::set(System::String^  value) {
        this[this->tableBasic->keyColumn] = value;
    }
    
    inline System::String^  NewDataSet::BasicRow::label::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableBasic->labelColumn]));
    }
    inline System::Void NewDataSet::BasicRow::label::set(System::String^  value) {
        this[this->tableBasic->labelColumn] = value;
    }
    
    inline System::Int32 NewDataSet::BasicRow::DeviceClasses_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableBasic->DeviceClasses_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DeviceClasses_Id\' in table \'Basic\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::BasicRow::DeviceClasses_Id::set(System::Int32 value) {
        this[this->tableBasic->DeviceClasses_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  NewDataSet::BasicRow::DeviceClassesRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  >(this->GetParentRow(this->Table->ParentRelations[L"DeviceClasses_Basic"])));
    }
    inline System::Void NewDataSet::BasicRow::DeviceClassesRow::set(OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"DeviceClasses_Basic"]);
    }
    
    inline ::System::Boolean NewDataSet::BasicRow::IsDeviceClasses_IdNull() {
        return this->IsNull(this->tableBasic->DeviceClasses_IdColumn);
    }
    
    inline ::System::Void NewDataSet::BasicRow::SetDeviceClasses_IdNull() {
        this[this->tableBasic->DeviceClasses_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::GenericRow::GenericRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableGeneric = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::GenericDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::GenericRow::key::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableGeneric->keyColumn]));
    }
    inline System::Void NewDataSet::GenericRow::key::set(System::String^  value) {
        this[this->tableGeneric->keyColumn] = value;
    }
    
    inline System::String^  NewDataSet::GenericRow::label::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableGeneric->labelColumn]));
    }
    inline System::Void NewDataSet::GenericRow::label::set(System::String^  value) {
        this[this->tableGeneric->labelColumn] = value;
    }
    
    inline System::String^  NewDataSet::GenericRow::command_classes::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGeneric->command_classesColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'command_classes\' in table \'Generic\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::GenericRow::command_classes::set(System::String^  value) {
        this[this->tableGeneric->command_classesColumn] = value;
    }
    
    inline System::String^  NewDataSet::GenericRow::basic::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGeneric->basicColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'basic\' in table \'Generic\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::GenericRow::basic::set(System::String^  value) {
        this[this->tableGeneric->basicColumn] = value;
    }
    
    inline System::Int32 NewDataSet::GenericRow::Generic_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableGeneric->Generic_IdColumn]));
    }
    inline System::Void NewDataSet::GenericRow::Generic_Id::set(System::Int32 value) {
        this[this->tableGeneric->Generic_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::GenericRow::DeviceClasses_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableGeneric->DeviceClasses_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DeviceClasses_Id\' in table \'Generic\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::GenericRow::DeviceClasses_Id::set(System::Int32 value) {
        this[this->tableGeneric->DeviceClasses_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  NewDataSet::GenericRow::DeviceClassesRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  >(this->GetParentRow(this->Table->ParentRelations[L"DeviceClasses_Generic"])));
    }
    inline System::Void NewDataSet::GenericRow::DeviceClassesRow::set(OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"DeviceClasses_Generic"]);
    }
    
    inline ::System::Boolean NewDataSet::GenericRow::Iscommand_classesNull() {
        return this->IsNull(this->tableGeneric->command_classesColumn);
    }
    
    inline ::System::Void NewDataSet::GenericRow::Setcommand_classesNull() {
        this[this->tableGeneric->command_classesColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::GenericRow::IsbasicNull() {
        return this->IsNull(this->tableGeneric->basicColumn);
    }
    
    inline ::System::Void NewDataSet::GenericRow::SetbasicNull() {
        this[this->tableGeneric->basicColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::GenericRow::IsDeviceClasses_IdNull() {
        return this->IsNull(this->tableGeneric->DeviceClasses_IdColumn);
    }
    
    inline ::System::Void NewDataSet::GenericRow::SetDeviceClasses_IdNull() {
        this[this->tableGeneric->DeviceClasses_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::SpecificRow^  >^  NewDataSet::GenericRow::GetSpecificRows() {
        if (this->Table->ChildRelations[L"Generic_Specific"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::SpecificRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::SpecificRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Generic_Specific"])));
        }
    }
    
    
    inline NewDataSet::SpecificRow::SpecificRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableSpecific = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SpecificDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::SpecificRow::key::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableSpecific->keyColumn]));
    }
    inline System::Void NewDataSet::SpecificRow::key::set(System::String^  value) {
        this[this->tableSpecific->keyColumn] = value;
    }
    
    inline System::String^  NewDataSet::SpecificRow::label::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableSpecific->labelColumn]));
    }
    inline System::Void NewDataSet::SpecificRow::label::set(System::String^  value) {
        this[this->tableSpecific->labelColumn] = value;
    }
    
    inline System::String^  NewDataSet::SpecificRow::command_classes::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSpecific->command_classesColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'command_classes\' in table \'Specific\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::SpecificRow::command_classes::set(System::String^  value) {
        this[this->tableSpecific->command_classesColumn] = value;
    }
    
    inline System::String^  NewDataSet::SpecificRow::basic::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableSpecific->basicColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'basic\' in table \'Specific\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::SpecificRow::basic::set(System::String^  value) {
        this[this->tableSpecific->basicColumn] = value;
    }
    
    inline System::Int32 NewDataSet::SpecificRow::Generic_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableSpecific->Generic_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Generic_Id\' in table \'Specific\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::SpecificRow::Generic_Id::set(System::Int32 value) {
        this[this->tableSpecific->Generic_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::GenericRow^  NewDataSet::SpecificRow::GenericRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::GenericRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Generic_Specific"])));
    }
    inline System::Void NewDataSet::SpecificRow::GenericRow::set(OpenZWave_WinMD::NewDataSet::GenericRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Generic_Specific"]);
    }
    
    inline ::System::Boolean NewDataSet::SpecificRow::Iscommand_classesNull() {
        return this->IsNull(this->tableSpecific->command_classesColumn);
    }
    
    inline ::System::Void NewDataSet::SpecificRow::Setcommand_classesNull() {
        this[this->tableSpecific->command_classesColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::SpecificRow::IsbasicNull() {
        return this->IsNull(this->tableSpecific->basicColumn);
    }
    
    inline ::System::Void NewDataSet::SpecificRow::SetbasicNull() {
        this[this->tableSpecific->basicColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::SpecificRow::IsGeneric_IdNull() {
        return this->IsNull(this->tableSpecific->Generic_IdColumn);
    }
    
    inline ::System::Void NewDataSet::SpecificRow::SetGeneric_IdNull() {
        this[this->tableSpecific->Generic_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::RoleRow::RoleRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableRole = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::RoleDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::RoleRow::key::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableRole->keyColumn]));
    }
    inline System::Void NewDataSet::RoleRow::key::set(System::String^  value) {
        this[this->tableRole->keyColumn] = value;
    }
    
    inline System::String^  NewDataSet::RoleRow::label::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableRole->labelColumn]));
    }
    inline System::Void NewDataSet::RoleRow::label::set(System::String^  value) {
        this[this->tableRole->labelColumn] = value;
    }
    
    inline System::String^  NewDataSet::RoleRow::command_classes::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableRole->command_classesColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'command_classes\' in table \'Role\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::RoleRow::command_classes::set(System::String^  value) {
        this[this->tableRole->command_classesColumn] = value;
    }
    
    inline System::String^  NewDataSet::RoleRow::basic::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableRole->basicColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'basic\' in table \'Role\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::RoleRow::basic::set(System::String^  value) {
        this[this->tableRole->basicColumn] = value;
    }
    
    inline System::Int32 NewDataSet::RoleRow::DeviceClasses_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableRole->DeviceClasses_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DeviceClasses_Id\' in table \'Role\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::RoleRow::DeviceClasses_Id::set(System::Int32 value) {
        this[this->tableRole->DeviceClasses_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  NewDataSet::RoleRow::DeviceClassesRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  >(this->GetParentRow(this->Table->ParentRelations[L"DeviceClasses_Role"])));
    }
    inline System::Void NewDataSet::RoleRow::DeviceClassesRow::set(OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"DeviceClasses_Role"]);
    }
    
    inline ::System::Boolean NewDataSet::RoleRow::Iscommand_classesNull() {
        return this->IsNull(this->tableRole->command_classesColumn);
    }
    
    inline ::System::Void NewDataSet::RoleRow::Setcommand_classesNull() {
        this[this->tableRole->command_classesColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::RoleRow::IsbasicNull() {
        return this->IsNull(this->tableRole->basicColumn);
    }
    
    inline ::System::Void NewDataSet::RoleRow::SetbasicNull() {
        this[this->tableRole->basicColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::RoleRow::IsDeviceClasses_IdNull() {
        return this->IsNull(this->tableRole->DeviceClasses_IdColumn);
    }
    
    inline ::System::Void NewDataSet::RoleRow::SetDeviceClasses_IdNull() {
        this[this->tableRole->DeviceClasses_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::NodeTypeRow::NodeTypeRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableNodeType = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeTypeDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::NodeTypeRow::key::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableNodeType->keyColumn]));
    }
    inline System::Void NewDataSet::NodeTypeRow::key::set(System::String^  value) {
        this[this->tableNodeType->keyColumn] = value;
    }
    
    inline System::String^  NewDataSet::NodeTypeRow::label::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableNodeType->labelColumn]));
    }
    inline System::Void NewDataSet::NodeTypeRow::label::set(System::String^  value) {
        this[this->tableNodeType->labelColumn] = value;
    }
    
    inline System::String^  NewDataSet::NodeTypeRow::command_classes::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableNodeType->command_classesColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'command_classes\' in table \'NodeType\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::NodeTypeRow::command_classes::set(System::String^  value) {
        this[this->tableNodeType->command_classesColumn] = value;
    }
    
    inline System::String^  NewDataSet::NodeTypeRow::basic::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableNodeType->basicColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'basic\' in table \'NodeType\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::NodeTypeRow::basic::set(System::String^  value) {
        this[this->tableNodeType->basicColumn] = value;
    }
    
    inline System::Int32 NewDataSet::NodeTypeRow::DeviceClasses_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableNodeType->DeviceClasses_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DeviceClasses_Id\' in table \'NodeType\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::NodeTypeRow::DeviceClasses_Id::set(System::Int32 value) {
        this[this->tableNodeType->DeviceClasses_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  NewDataSet::NodeTypeRow::DeviceClassesRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  >(this->GetParentRow(this->Table->ParentRelations[L"DeviceClasses_NodeType"])));
    }
    inline System::Void NewDataSet::NodeTypeRow::DeviceClassesRow::set(OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"DeviceClasses_NodeType"]);
    }
    
    inline ::System::Boolean NewDataSet::NodeTypeRow::Iscommand_classesNull() {
        return this->IsNull(this->tableNodeType->command_classesColumn);
    }
    
    inline ::System::Void NewDataSet::NodeTypeRow::Setcommand_classesNull() {
        this[this->tableNodeType->command_classesColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::NodeTypeRow::IsbasicNull() {
        return this->IsNull(this->tableNodeType->basicColumn);
    }
    
    inline ::System::Void NewDataSet::NodeTypeRow::SetbasicNull() {
        this[this->tableNodeType->basicColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::NodeTypeRow::IsDeviceClasses_IdNull() {
        return this->IsNull(this->tableNodeType->DeviceClasses_IdColumn);
    }
    
    inline ::System::Void NewDataSet::NodeTypeRow::SetDeviceClasses_IdNull() {
        this[this->tableNodeType->DeviceClasses_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::DeviceTypeRow::DeviceTypeRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableDeviceType = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceTypeDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::DeviceTypeRow::key::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableDeviceType->keyColumn]));
    }
    inline System::Void NewDataSet::DeviceTypeRow::key::set(System::String^  value) {
        this[this->tableDeviceType->keyColumn] = value;
    }
    
    inline System::String^  NewDataSet::DeviceTypeRow::label::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableDeviceType->labelColumn]));
    }
    inline System::Void NewDataSet::DeviceTypeRow::label::set(System::String^  value) {
        this[this->tableDeviceType->labelColumn] = value;
    }
    
    inline System::String^  NewDataSet::DeviceTypeRow::command_classes::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableDeviceType->command_classesColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'command_classes\' in table \'DeviceType\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceTypeRow::command_classes::set(System::String^  value) {
        this[this->tableDeviceType->command_classesColumn] = value;
    }
    
    inline System::String^  NewDataSet::DeviceTypeRow::basic::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableDeviceType->basicColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'basic\' in table \'DeviceType\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceTypeRow::basic::set(System::String^  value) {
        this[this->tableDeviceType->basicColumn] = value;
    }
    
    inline System::Int32 NewDataSet::DeviceTypeRow::DeviceClasses_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableDeviceType->DeviceClasses_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'DeviceClasses_Id\' in table \'DeviceType\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::DeviceTypeRow::DeviceClasses_Id::set(System::Int32 value) {
        this[this->tableDeviceType->DeviceClasses_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  NewDataSet::DeviceTypeRow::DeviceClassesRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  >(this->GetParentRow(this->Table->ParentRelations[L"DeviceClasses_DeviceType"])));
    }
    inline System::Void NewDataSet::DeviceTypeRow::DeviceClassesRow::set(OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"DeviceClasses_DeviceType"]);
    }
    
    inline ::System::Boolean NewDataSet::DeviceTypeRow::Iscommand_classesNull() {
        return this->IsNull(this->tableDeviceType->command_classesColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceTypeRow::Setcommand_classesNull() {
        this[this->tableDeviceType->command_classesColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceTypeRow::IsbasicNull() {
        return this->IsNull(this->tableDeviceType->basicColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceTypeRow::SetbasicNull() {
        this[this->tableDeviceType->basicColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::DeviceTypeRow::IsDeviceClasses_IdNull() {
        return this->IsNull(this->tableDeviceType->DeviceClasses_IdColumn);
    }
    
    inline ::System::Void NewDataSet::DeviceTypeRow::SetDeviceClasses_IdNull() {
        this[this->tableDeviceType->DeviceClasses_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::DeviceClassesRowChangeEvent::DeviceClassesRowChangeEvent(OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::DeviceClassesRow^  NewDataSet::DeviceClassesRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::DeviceClassesRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::BasicRowChangeEvent::BasicRowChangeEvent(OpenZWave_WinMD::NewDataSet::BasicRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::BasicRow^  NewDataSet::BasicRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::BasicRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::GenericRowChangeEvent::GenericRowChangeEvent(OpenZWave_WinMD::NewDataSet::GenericRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::GenericRow^  NewDataSet::GenericRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::GenericRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::SpecificRowChangeEvent::SpecificRowChangeEvent(OpenZWave_WinMD::NewDataSet::SpecificRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::SpecificRow^  NewDataSet::SpecificRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::SpecificRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::RoleRowChangeEvent::RoleRowChangeEvent(OpenZWave_WinMD::NewDataSet::RoleRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::RoleRow^  NewDataSet::RoleRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::RoleRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::NodeTypeRowChangeEvent::NodeTypeRowChangeEvent(OpenZWave_WinMD::NewDataSet::NodeTypeRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::NodeTypeRow^  NewDataSet::NodeTypeRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::NodeTypeRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::DeviceTypeRowChangeEvent::DeviceTypeRowChangeEvent(OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::DeviceTypeRow^  NewDataSet::DeviceTypeRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::DeviceTypeRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
