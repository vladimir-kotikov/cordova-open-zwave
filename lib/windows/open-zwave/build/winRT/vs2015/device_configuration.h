#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.6.81.0.
// 
namespace OpenZWave_WinMD {
    using namespace System;
    ref class NewDataSet;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class NewDataSet : public ::System::Data::DataSet {
        public : ref class ProductDataTable;
        public : ref class ProtocolDataTable;
        public : ref class APIcallDataTable;
        public : ref class CommandClassDataTable;
        public : ref class InstanceDataTable;
        public : ref class AssociationsDataTable;
        public : ref class GroupDataTable;
        public : ref class NodeDataTable;
        public : ref class ValueDataTable;
        public : ref class HelpDataTable;
        public : ref class _ItemDataTable;
        public : ref class TriggerRefreshValueDataTable;
        public : ref class RefreshClassValueDataTable;
        public : ref class SupportedModesDataTable;
        public : ref class ModeDataTable;
        public : ref class SensorMapDataTable;
        public : ref class ProductRow;
        public : ref class ProtocolRow;
        public : ref class APIcallRow;
        public : ref class CommandClassRow;
        public : ref class InstanceRow;
        public : ref class AssociationsRow;
        public : ref class GroupRow;
        public : ref class NodeRow;
        public : ref class ValueRow;
        public : ref class HelpRow;
        public : ref class _ItemRow;
        public : ref class TriggerRefreshValueRow;
        public : ref class RefreshClassValueRow;
        public : ref class SupportedModesRow;
        public : ref class ModeRow;
        public : ref class SensorMapRow;
        public : ref class ProductRowChangeEvent;
        public : ref class ProtocolRowChangeEvent;
        public : ref class APIcallRowChangeEvent;
        public : ref class CommandClassRowChangeEvent;
        public : ref class InstanceRowChangeEvent;
        public : ref class AssociationsRowChangeEvent;
        public : ref class GroupRowChangeEvent;
        public : ref class NodeRowChangeEvent;
        public : ref class ValueRowChangeEvent;
        public : ref class HelpRowChangeEvent;
        public : ref class _ItemRowChangeEvent;
        public : ref class TriggerRefreshValueRowChangeEvent;
        public : ref class RefreshClassValueRowChangeEvent;
        public : ref class SupportedModesRowChangeEvent;
        public : ref class ModeRowChangeEvent;
        public : ref class SensorMapRowChangeEvent;
        
        private: OpenZWave_WinMD::NewDataSet::ProductDataTable^  tableProduct;
        
        private: OpenZWave_WinMD::NewDataSet::ProtocolDataTable^  tableProtocol;
        
        private: OpenZWave_WinMD::NewDataSet::APIcallDataTable^  tableAPIcall;
        
        private: OpenZWave_WinMD::NewDataSet::CommandClassDataTable^  tableCommandClass;
        
        private: OpenZWave_WinMD::NewDataSet::InstanceDataTable^  tableInstance;
        
        private: OpenZWave_WinMD::NewDataSet::AssociationsDataTable^  tableAssociations;
        
        private: OpenZWave_WinMD::NewDataSet::GroupDataTable^  tableGroup;
        
        private: OpenZWave_WinMD::NewDataSet::NodeDataTable^  tableNode;
        
        private: OpenZWave_WinMD::NewDataSet::ValueDataTable^  tableValue;
        
        private: OpenZWave_WinMD::NewDataSet::HelpDataTable^  tableHelp;
        
        private: OpenZWave_WinMD::NewDataSet::_ItemDataTable^  table_Item;
        
        private: OpenZWave_WinMD::NewDataSet::TriggerRefreshValueDataTable^  tableTriggerRefreshValue;
        
        private: OpenZWave_WinMD::NewDataSet::RefreshClassValueDataTable^  tableRefreshClassValue;
        
        private: OpenZWave_WinMD::NewDataSet::SupportedModesDataTable^  tableSupportedModes;
        
        private: OpenZWave_WinMD::NewDataSet::ModeDataTable^  tableMode;
        
        private: OpenZWave_WinMD::NewDataSet::SensorMapDataTable^  tableSensorMap;
        
        private: ::System::Data::DataRelation^  relationProduct_Protocol;
        
        private: ::System::Data::DataRelation^  relationProtocol_APIcall;
        
        private: ::System::Data::DataRelation^  relationProduct_CommandClass;
        
        private: ::System::Data::DataRelation^  relationCommandClass_Instance;
        
        private: ::System::Data::DataRelation^  relationCommandClass_Associations;
        
        private: ::System::Data::DataRelation^  relationAssociations_Group;
        
        private: ::System::Data::DataRelation^  relationGroup_Node;
        
        private: ::System::Data::DataRelation^  relationCommandClass_Value;
        
        private: ::System::Data::DataRelation^  relationValue_Help;
        
        private: ::System::Data::DataRelation^  relationValue_Item;
        
        private: ::System::Data::DataRelation^  relationCommandClass_TriggerRefreshValue;
        
        private: ::System::Data::DataRelation^  relationTriggerRefreshValue_RefreshClassValue;
        
        private: ::System::Data::DataRelation^  relationCommandClass_SupportedModes;
        
        private: ::System::Data::DataRelation^  relationSupportedModes_Mode;
        
        private: ::System::Data::DataRelation^  relationCommandClass_SensorMap;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void ProductRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::ProductRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void ProtocolRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::ProtocolRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void APIcallRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::APIcallRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void CommandClassRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::CommandClassRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void InstanceRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::InstanceRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void AssociationsRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::AssociationsRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void GroupRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::GroupRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void NodeRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::NodeRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void ValueRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::ValueRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void HelpRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::HelpRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void _ItemRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::_ItemRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void TriggerRefreshValueRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void RefreshClassValueRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::RefreshClassValueRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void SupportedModesRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::SupportedModesRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void ModeRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::ModeRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void SensorMapRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::SensorMapRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::ProductDataTable^  Product {
            OpenZWave_WinMD::NewDataSet::ProductDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::ProtocolDataTable^  Protocol {
            OpenZWave_WinMD::NewDataSet::ProtocolDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::APIcallDataTable^  APIcall {
            OpenZWave_WinMD::NewDataSet::APIcallDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::CommandClassDataTable^  CommandClass {
            OpenZWave_WinMD::NewDataSet::CommandClassDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::InstanceDataTable^  Instance {
            OpenZWave_WinMD::NewDataSet::InstanceDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::AssociationsDataTable^  Associations {
            OpenZWave_WinMD::NewDataSet::AssociationsDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::GroupDataTable^  Group {
            OpenZWave_WinMD::NewDataSet::GroupDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::NodeDataTable^  Node {
            OpenZWave_WinMD::NewDataSet::NodeDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::ValueDataTable^  Value {
            OpenZWave_WinMD::NewDataSet::ValueDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::HelpDataTable^  Help {
            OpenZWave_WinMD::NewDataSet::HelpDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::_ItemDataTable^  _Item {
            OpenZWave_WinMD::NewDataSet::_ItemDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::TriggerRefreshValueDataTable^  TriggerRefreshValue {
            OpenZWave_WinMD::NewDataSet::TriggerRefreshValueDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::RefreshClassValueDataTable^  RefreshClassValue {
            OpenZWave_WinMD::NewDataSet::RefreshClassValueDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::SupportedModesDataTable^  SupportedModes {
            OpenZWave_WinMD::NewDataSet::SupportedModesDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::ModeDataTable^  Mode {
            OpenZWave_WinMD::NewDataSet::ModeDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::SensorMapDataTable^  SensorMap {
            OpenZWave_WinMD::NewDataSet::SensorMapDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeProduct();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeProtocol();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeAPIcall();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeCommandClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeInstance();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeAssociations();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeGroup();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeNode();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeValue();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeHelp();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerialize_Item();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeTriggerRefreshValue();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeRefreshClassValue();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeSupportedModes();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeMode();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeSensorMap();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ProductDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnProduct_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ProductRowChangeEventHandler^  ProductRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ProductRowChangeEventHandler^  ProductRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ProductRowChangeEventHandler^  ProductRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ProductRowChangeEventHandler^  ProductRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProductDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProductDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProductDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Product_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ProductRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::ProductRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddProductRow(OpenZWave_WinMD::NewDataSet::ProductRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::ProductRow^  AddProductRow();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::ProductRow^  NewProductRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveProductRow(OpenZWave_WinMD::NewDataSet::ProductRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ProtocolDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnnodeinfosupported;
            
            private: ::System::Data::DataColumn^  columnrefreshonnodeinfoframe;
            
            private: ::System::Data::DataColumn^  columnProtocol_Id;
            
            private: ::System::Data::DataColumn^  columnProduct_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ProtocolRowChangeEventHandler^  ProtocolRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ProtocolRowChangeEventHandler^  ProtocolRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ProtocolRowChangeEventHandler^  ProtocolRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ProtocolRowChangeEventHandler^  ProtocolRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProtocolDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProtocolDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProtocolDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nodeinfosupportedColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  refreshonnodeinfoframeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Protocol_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Product_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ProtocolRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::ProtocolRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddProtocolRow(OpenZWave_WinMD::NewDataSet::ProtocolRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::ProtocolRow^  AddProtocolRow(System::String^  nodeinfosupported, System::String^  refreshonnodeinfoframe, 
                        OpenZWave_WinMD::NewDataSet::ProductRow^  parentProductRowByProduct_Protocol);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::ProtocolRow^  NewProtocolRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveProtocolRow(OpenZWave_WinMD::NewDataSet::ProtocolRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class APIcallDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnfunction;
            
            private: ::System::Data::DataColumn^  columnpresent;
            
            private: ::System::Data::DataColumn^  columnProtocol_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::APIcallRowChangeEventHandler^  APIcallRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::APIcallRowChangeEventHandler^  APIcallRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::APIcallRowChangeEventHandler^  APIcallRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::APIcallRowChangeEventHandler^  APIcallRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            APIcallDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            APIcallDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            APIcallDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  functionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  presentColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Protocol_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::APIcallRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::APIcallRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddAPIcallRow(OpenZWave_WinMD::NewDataSet::APIcallRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::APIcallRow^  AddAPIcallRow(System::String^  function, System::String^  present, 
                        OpenZWave_WinMD::NewDataSet::ProtocolRow^  parentProtocolRowByProtocol_APIcall);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::APIcallRow^  NewAPIcallRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveAPIcallRow(OpenZWave_WinMD::NewDataSet::APIcallRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class CommandClassDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnid;
            
            private: ::System::Data::DataColumn^  columnaction;
            
            private: ::System::Data::DataColumn^  columnbase;
            
            private: ::System::Data::DataColumn^  columnoverride_precision;
            
            private: ::System::Data::DataColumn^  columnscenecount;
            
            private: ::System::Data::DataColumn^  columncreate_vars;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnsetasreport;
            
            private: ::System::Data::DataColumn^  columnignoremapping;
            
            private: ::System::Data::DataColumn^  columngetsupported;
            
            private: ::System::Data::DataColumn^  columnclassgetsupported;
            
            private: ::System::Data::DataColumn^  columncoloridxbug;
            
            private: ::System::Data::DataColumn^  columnforceUniqueEndpoints;
            
            private: ::System::Data::DataColumn^  columnversion;
            
            private: ::System::Data::DataColumn^  columnrequest_flags;
            
            private: ::System::Data::DataColumn^  columnendpoints;
            
            private: ::System::Data::DataColumn^  columnmapping;
            
            private: ::System::Data::DataColumn^  columnignoreUnsolicitedMultiChnCapReport;
            
            private: ::System::Data::DataColumn^  columncodes;
            
            private: ::System::Data::DataColumn^  columnCommandClass_Id;
            
            private: ::System::Data::DataColumn^  columnProduct_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::CommandClassRowChangeEventHandler^  CommandClassRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::CommandClassRowChangeEventHandler^  CommandClassRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::CommandClassRowChangeEventHandler^  CommandClassRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::CommandClassRowChangeEventHandler^  CommandClassRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            CommandClassDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            CommandClassDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            CommandClassDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  idColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  actionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  baseColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  override_precisionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  scenecountColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  create_varsColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  setasreportColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ignoremappingColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  getsupportedColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  classgetsupportedColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  coloridxbugColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  forceUniqueEndpointsColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  versionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  request_flagsColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  endpointsColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  mappingColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ignoreUnsolicitedMultiChnCapReportColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  codesColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  CommandClass_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Product_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::CommandClassRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::CommandClassRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddCommandClassRow(OpenZWave_WinMD::NewDataSet::CommandClassRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::CommandClassRow^  AddCommandClassRow(
                        System::String^  id, 
                        System::String^  action, 
                        System::String^  base, 
                        System::String^  override_precision, 
                        System::String^  scenecount, 
                        System::String^  create_vars, 
                        System::String^  name, 
                        System::String^  setasreport, 
                        System::String^  ignoremapping, 
                        System::String^  getsupported, 
                        System::String^  classgetsupported, 
                        System::String^  coloridxbug, 
                        System::String^  forceUniqueEndpoints, 
                        System::String^  version, 
                        System::String^  request_flags, 
                        System::String^  endpoints, 
                        System::String^  mapping, 
                        System::String^  ignoreUnsolicitedMultiChnCapReport, 
                        System::String^  codes, 
                        OpenZWave_WinMD::NewDataSet::ProductRow^  parentProductRowByProduct_CommandClass);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::CommandClassRow^  NewCommandClassRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveCommandClassRow(OpenZWave_WinMD::NewDataSet::CommandClassRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class InstanceDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnindex;
            
            private: ::System::Data::DataColumn^  columnCommandClass_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::InstanceRowChangeEventHandler^  InstanceRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::InstanceRowChangeEventHandler^  InstanceRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::InstanceRowChangeEventHandler^  InstanceRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::InstanceRowChangeEventHandler^  InstanceRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            InstanceDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            InstanceDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            InstanceDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  indexColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  CommandClass_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::InstanceRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::InstanceRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddInstanceRow(OpenZWave_WinMD::NewDataSet::InstanceRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::InstanceRow^  AddInstanceRow(System::String^  index, OpenZWave_WinMD::NewDataSet::CommandClassRow^  parentCommandClassRowByCommandClass_Instance);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::InstanceRow^  NewInstanceRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveInstanceRow(OpenZWave_WinMD::NewDataSet::InstanceRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class AssociationsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnnum_groups;
            
            private: ::System::Data::DataColumn^  columnAssociations_Id;
            
            private: ::System::Data::DataColumn^  columnCommandClass_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::AssociationsRowChangeEventHandler^  AssociationsRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::AssociationsRowChangeEventHandler^  AssociationsRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::AssociationsRowChangeEventHandler^  AssociationsRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::AssociationsRowChangeEventHandler^  AssociationsRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AssociationsDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AssociationsDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AssociationsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  num_groupsColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Associations_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  CommandClass_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::AssociationsRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::AssociationsRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddAssociationsRow(OpenZWave_WinMD::NewDataSet::AssociationsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::AssociationsRow^  AddAssociationsRow(System::String^  num_groups, OpenZWave_WinMD::NewDataSet::CommandClassRow^  parentCommandClassRowByCommandClass_Associations);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::AssociationsRow^  NewAssociationsRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveAssociationsRow(OpenZWave_WinMD::NewDataSet::AssociationsRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class GroupDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnindex;
            
            private: ::System::Data::DataColumn^  columnmax_associations;
            
            private: ::System::Data::DataColumn^  columnlabel;
            
            private: ::System::Data::DataColumn^  column_auto;
            
            private: ::System::Data::DataColumn^  columnmultiInstance;
            
            private: ::System::Data::DataColumn^  columnwrite_only;
            
            private: ::System::Data::DataColumn^  columnGroup_Id;
            
            private: ::System::Data::DataColumn^  columnAssociations_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::GroupRowChangeEventHandler^  GroupRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::GroupRowChangeEventHandler^  GroupRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::GroupRowChangeEventHandler^  GroupRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::GroupRowChangeEventHandler^  GroupRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GroupDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GroupDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GroupDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  indexColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  max_associationsColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  labelColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _autoColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  multiInstanceColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  write_onlyColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Group_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Associations_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::GroupRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::GroupRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddGroupRow(OpenZWave_WinMD::NewDataSet::GroupRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::GroupRow^  AddGroupRow(
                        System::String^  index, 
                        System::String^  max_associations, 
                        System::String^  label, 
                        System::String^  _auto, 
                        System::String^  multiInstance, 
                        System::String^  write_only, 
                        OpenZWave_WinMD::NewDataSet::AssociationsRow^  parentAssociationsRowByAssociations_Group);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::GroupRow^  NewGroupRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveGroupRow(OpenZWave_WinMD::NewDataSet::GroupRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class NodeDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnid;
            
            private: ::System::Data::DataColumn^  columnGroup_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::NodeRowChangeEventHandler^  NodeRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::NodeRowChangeEventHandler^  NodeRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::NodeRowChangeEventHandler^  NodeRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::NodeRowChangeEventHandler^  NodeRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NodeDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NodeDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NodeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  idColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Group_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::NodeRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::NodeRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddNodeRow(OpenZWave_WinMD::NewDataSet::NodeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::NodeRow^  AddNodeRow(System::String^  id, OpenZWave_WinMD::NewDataSet::GroupRow^  parentGroupRowByGroup_Node);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::NodeRow^  NewNodeRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveNodeRow(OpenZWave_WinMD::NewDataSet::NodeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ValueDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columntype;
            
            private: ::System::Data::DataColumn^  columnsize;
            
            private: ::System::Data::DataColumn^  columnindex;
            
            private: ::System::Data::DataColumn^  columngenre;
            
            private: ::System::Data::DataColumn^  columnlabel;
            
            private: ::System::Data::DataColumn^  columnunits;
            
            private: ::System::Data::DataColumn^  columnmin;
            
            private: ::System::Data::DataColumn^  columnmax;
            
            private: ::System::Data::DataColumn^  column_value;
            
            private: ::System::Data::DataColumn^  columnlength;
            
            private: ::System::Data::DataColumn^  columnread_only;
            
            private: ::System::Data::DataColumn^  columnwrite_only;
            
            private: ::System::Data::DataColumn^  columnverify_changes;
            
            private: ::System::Data::DataColumn^  columnaffects;
            
            private: ::System::Data::DataColumn^  columninstance;
            
            private: ::System::Data::DataColumn^  columnValue_Id;
            
            private: ::System::Data::DataColumn^  columnCommandClass_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ValueRowChangeEventHandler^  ValueRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ValueRowChangeEventHandler^  ValueRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ValueRowChangeEventHandler^  ValueRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ValueRowChangeEventHandler^  ValueRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ValueDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ValueDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ValueDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  typeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  sizeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  indexColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  genreColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  labelColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  unitsColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  minColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  maxColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _valueColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  lengthColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  read_onlyColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  write_onlyColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  verify_changesColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  affectsColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  instanceColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Value_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  CommandClass_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ValueRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::ValueRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddValueRow(OpenZWave_WinMD::NewDataSet::ValueRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::ValueRow^  AddValueRow(
                        System::String^  type, 
                        System::String^  size, 
                        System::String^  index, 
                        System::String^  genre, 
                        System::String^  label, 
                        System::String^  units, 
                        System::String^  min, 
                        System::String^  max, 
                        System::String^  _value, 
                        System::String^  length, 
                        System::String^  read_only, 
                        System::String^  write_only, 
                        System::String^  verify_changes, 
                        System::String^  affects, 
                        System::String^  instance, 
                        OpenZWave_WinMD::NewDataSet::CommandClassRow^  parentCommandClassRowByCommandClass_Value);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::ValueRow^  NewValueRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveValueRow(OpenZWave_WinMD::NewDataSet::ValueRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class HelpDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnValue_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::HelpRowChangeEventHandler^  HelpRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::HelpRowChangeEventHandler^  HelpRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::HelpRowChangeEventHandler^  HelpRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::HelpRowChangeEventHandler^  HelpRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            HelpDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            HelpDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            HelpDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Value_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::HelpRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::HelpRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddHelpRow(OpenZWave_WinMD::NewDataSet::HelpRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::HelpRow^  AddHelpRow(OpenZWave_WinMD::NewDataSet::ValueRow^  parentValueRowByValue_Help);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::HelpRow^  NewHelpRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveHelpRow(OpenZWave_WinMD::NewDataSet::HelpRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class _ItemDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnlabel;
            
            private: ::System::Data::DataColumn^  column_value;
            
            private: ::System::Data::DataColumn^  columnValue_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::_ItemRowChangeEventHandler^  _ItemRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::_ItemRowChangeEventHandler^  _ItemRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::_ItemRowChangeEventHandler^  _ItemRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::_ItemRowChangeEventHandler^  _ItemRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _ItemDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _ItemDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _ItemDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  labelColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _valueColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Value_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::_ItemRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::_ItemRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Add_ItemRow(OpenZWave_WinMD::NewDataSet::_ItemRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::_ItemRow^  Add_ItemRow(System::String^  label, System::String^  _value, OpenZWave_WinMD::NewDataSet::ValueRow^  parentValueRowByValue_Item);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::_ItemRow^  New_ItemRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Remove_ItemRow(OpenZWave_WinMD::NewDataSet::_ItemRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class TriggerRefreshValueDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnGenre;
            
            private: ::System::Data::DataColumn^  columnInstance;
            
            private: ::System::Data::DataColumn^  columnIndex;
            
            private: ::System::Data::DataColumn^  columnTriggerRefreshValue_Id;
            
            private: ::System::Data::DataColumn^  columnCommandClass_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRowChangeEventHandler^  TriggerRefreshValueRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRowChangeEventHandler^  TriggerRefreshValueRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRowChangeEventHandler^  TriggerRefreshValueRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRowChangeEventHandler^  TriggerRefreshValueRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TriggerRefreshValueDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TriggerRefreshValueDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TriggerRefreshValueDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  GenreColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  InstanceColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  IndexColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  TriggerRefreshValue_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  CommandClass_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddTriggerRefreshValueRow(OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  AddTriggerRefreshValueRow(System::String^  Genre, System::String^  Instance, 
                        System::String^  Index, OpenZWave_WinMD::NewDataSet::CommandClassRow^  parentCommandClassRowByCommandClass_TriggerRefreshValue);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  NewTriggerRefreshValueRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveTriggerRefreshValueRow(OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class RefreshClassValueDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnCommandClass;
            
            private: ::System::Data::DataColumn^  columnRequestFlags;
            
            private: ::System::Data::DataColumn^  columnInstance;
            
            private: ::System::Data::DataColumn^  columnIndex;
            
            private: ::System::Data::DataColumn^  columnTriggerRefreshValue_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::RefreshClassValueRowChangeEventHandler^  RefreshClassValueRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::RefreshClassValueRowChangeEventHandler^  RefreshClassValueRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::RefreshClassValueRowChangeEventHandler^  RefreshClassValueRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::RefreshClassValueRowChangeEventHandler^  RefreshClassValueRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            RefreshClassValueDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            RefreshClassValueDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            RefreshClassValueDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  CommandClassColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  RequestFlagsColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  InstanceColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  IndexColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  TriggerRefreshValue_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddRefreshClassValueRow(OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  AddRefreshClassValueRow(System::String^  CommandClass, System::String^  RequestFlags, 
                        System::String^  Instance, System::String^  Index, OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  parentTriggerRefreshValueRowByTriggerRefreshValue_RefreshClassValue);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  NewRefreshClassValueRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveRefreshClassValueRow(OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class SupportedModesDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnSupportedModes_Id;
            
            private: ::System::Data::DataColumn^  columnCommandClass_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::SupportedModesRowChangeEventHandler^  SupportedModesRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::SupportedModesRowChangeEventHandler^  SupportedModesRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::SupportedModesRowChangeEventHandler^  SupportedModesRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::SupportedModesRowChangeEventHandler^  SupportedModesRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            SupportedModesDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            SupportedModesDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            SupportedModesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  SupportedModes_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  CommandClass_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::SupportedModesRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::SupportedModesRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddSupportedModesRow(OpenZWave_WinMD::NewDataSet::SupportedModesRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::SupportedModesRow^  AddSupportedModesRow(OpenZWave_WinMD::NewDataSet::CommandClassRow^  parentCommandClassRowByCommandClass_SupportedModes);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::SupportedModesRow^  NewSupportedModesRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveSupportedModesRow(OpenZWave_WinMD::NewDataSet::SupportedModesRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ModeDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnindex;
            
            private: ::System::Data::DataColumn^  columnlabel;
            
            private: ::System::Data::DataColumn^  columnSupportedModes_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ModeRowChangeEventHandler^  ModeRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ModeRowChangeEventHandler^  ModeRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ModeRowChangeEventHandler^  ModeRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ModeRowChangeEventHandler^  ModeRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ModeDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ModeDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ModeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  indexColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  labelColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  SupportedModes_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ModeRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::ModeRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddModeRow(OpenZWave_WinMD::NewDataSet::ModeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::ModeRow^  AddModeRow(System::String^  index, System::String^  label, OpenZWave_WinMD::NewDataSet::SupportedModesRow^  parentSupportedModesRowBySupportedModes_Mode);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::ModeRow^  NewModeRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveModeRow(OpenZWave_WinMD::NewDataSet::ModeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class SensorMapDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnindex;
            
            private: ::System::Data::DataColumn^  columntype;
            
            private: ::System::Data::DataColumn^  columnCommandClass_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::SensorMapRowChangeEventHandler^  SensorMapRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::SensorMapRowChangeEventHandler^  SensorMapRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::SensorMapRowChangeEventHandler^  SensorMapRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::SensorMapRowChangeEventHandler^  SensorMapRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            SensorMapDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            SensorMapDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            SensorMapDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  indexColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  typeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  CommandClass_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::SensorMapRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::SensorMapRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddSensorMapRow(OpenZWave_WinMD::NewDataSet::SensorMapRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::SensorMapRow^  AddSensorMapRow(System::String^  index, System::String^  type, OpenZWave_WinMD::NewDataSet::CommandClassRow^  parentCommandClassRowByCommandClass_SensorMap);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::SensorMapRow^  NewSensorMapRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveSensorMapRow(OpenZWave_WinMD::NewDataSet::SensorMapRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class ProductRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::ProductDataTable^  tableProduct;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProductRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Product_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::ProtocolRow^  >^  GetProtocolRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::CommandClassRow^  >^  GetCommandClassRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class ProtocolRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::ProtocolDataTable^  tableProtocol;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProtocolRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  nodeinfosupported {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  refreshonnodeinfoframe {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Protocol_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Product_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ProductRow^  ProductRow {
                OpenZWave_WinMD::NewDataSet::ProductRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::ProductRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsnodeinfosupportedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetnodeinfosupportedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsrefreshonnodeinfoframeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetrefreshonnodeinfoframeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsProduct_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetProduct_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::APIcallRow^  >^  GetAPIcallRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class APIcallRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::APIcallDataTable^  tableAPIcall;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            APIcallRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  function {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  present {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Protocol_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ProtocolRow^  ProtocolRow {
                OpenZWave_WinMD::NewDataSet::ProtocolRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::ProtocolRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsProtocol_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetProtocol_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class CommandClassRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::CommandClassDataTable^  tableCommandClass;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            CommandClassRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  id {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  action {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  base {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  override_precision {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  scenecount {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  create_vars {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  setasreport {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  ignoremapping {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  getsupported {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  classgetsupported {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  coloridxbug {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  forceUniqueEndpoints {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  version {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  request_flags {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  endpoints {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  mapping {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  ignoreUnsolicitedMultiChnCapReport {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  codes {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 CommandClass_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Product_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ProductRow^  ProductRow {
                OpenZWave_WinMD::NewDataSet::ProductRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::ProductRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsactionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetactionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsbaseNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetbaseNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Isoverride_precisionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setoverride_precisionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsscenecountNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetscenecountNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Iscreate_varsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setcreate_varsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IssetasreportNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetsetasreportNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsignoremappingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetignoremappingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsgetsupportedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetgetsupportedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsclassgetsupportedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetclassgetsupportedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IscoloridxbugNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetcoloridxbugNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsforceUniqueEndpointsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetforceUniqueEndpointsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsversionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetversionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Isrequest_flagsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setrequest_flagsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsendpointsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetendpointsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsmappingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetmappingNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsignoreUnsolicitedMultiChnCapReportNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetignoreUnsolicitedMultiChnCapReportNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IscodesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetcodesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsProduct_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetProduct_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::InstanceRow^  >^  GetInstanceRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::AssociationsRow^  >^  GetAssociationsRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::ValueRow^  >^  GetValueRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  >^  GetTriggerRefreshValueRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::SupportedModesRow^  >^  GetSupportedModesRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::SensorMapRow^  >^  GetSensorMapRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class InstanceRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::InstanceDataTable^  tableInstance;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            InstanceRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  index {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 CommandClass_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::CommandClassRow^  CommandClassRow {
                OpenZWave_WinMD::NewDataSet::CommandClassRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::CommandClassRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsCommandClass_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetCommandClass_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class AssociationsRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::AssociationsDataTable^  tableAssociations;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AssociationsRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  num_groups {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Associations_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 CommandClass_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::CommandClassRow^  CommandClassRow {
                OpenZWave_WinMD::NewDataSet::CommandClassRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::CommandClassRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsCommandClass_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetCommandClass_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::GroupRow^  >^  GetGroupRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class GroupRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::GroupDataTable^  tableGroup;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GroupRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  index {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  max_associations {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  label {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  _auto {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  multiInstance {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  write_only {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Group_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Associations_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::AssociationsRow^  AssociationsRow {
                OpenZWave_WinMD::NewDataSet::AssociationsRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::AssociationsRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Is_autoNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Set_autoNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsmultiInstanceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetmultiInstanceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Iswrite_onlyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setwrite_onlyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsAssociations_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetAssociations_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::NodeRow^  >^  GetNodeRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class NodeRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::NodeDataTable^  tableNode;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NodeRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  id {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Group_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::GroupRow^  GroupRow {
                OpenZWave_WinMD::NewDataSet::GroupRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::GroupRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsGroup_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetGroup_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class ValueRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::ValueDataTable^  tableValue;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ValueRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  type {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  size {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  index {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  genre {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  label {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  units {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  min {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  max {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  _value {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  length {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  read_only {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  write_only {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  verify_changes {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  affects {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  instance {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Value_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 CommandClass_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::CommandClassRow^  CommandClassRow {
                OpenZWave_WinMD::NewDataSet::CommandClassRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::CommandClassRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IssizeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetsizeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsunitsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetunitsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsminNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetminNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsmaxNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetmaxNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Is_valueNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Set_valueNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IslengthNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetlengthNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Isread_onlyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setread_onlyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Iswrite_onlyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setwrite_onlyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Isverify_changesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setverify_changesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsaffectsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetaffectsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsinstanceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetinstanceNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsCommandClass_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetCommandClass_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::HelpRow^  >^  GetHelpRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::_ItemRow^  >^  GetItemRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class HelpRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::HelpDataTable^  tableHelp;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            HelpRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Value_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ValueRow^  ValueRow {
                OpenZWave_WinMD::NewDataSet::ValueRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::ValueRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsValue_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetValue_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class _ItemRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::_ItemDataTable^  table_Item;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _ItemRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  label {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  _value {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Value_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ValueRow^  ValueRow {
                OpenZWave_WinMD::NewDataSet::ValueRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::ValueRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsValue_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetValue_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class TriggerRefreshValueRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::TriggerRefreshValueDataTable^  tableTriggerRefreshValue;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TriggerRefreshValueRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  Genre {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  Instance {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  Index {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 TriggerRefreshValue_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 CommandClass_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::CommandClassRow^  CommandClassRow {
                OpenZWave_WinMD::NewDataSet::CommandClassRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::CommandClassRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsCommandClass_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetCommandClass_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  >^  GetRefreshClassValueRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class RefreshClassValueRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::RefreshClassValueDataTable^  tableRefreshClassValue;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            RefreshClassValueRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  CommandClass {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  RequestFlags {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  Instance {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  Index {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 TriggerRefreshValue_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  TriggerRefreshValueRow {
                OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsTriggerRefreshValue_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetTriggerRefreshValue_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class SupportedModesRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::SupportedModesDataTable^  tableSupportedModes;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            SupportedModesRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 SupportedModes_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 CommandClass_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::CommandClassRow^  CommandClassRow {
                OpenZWave_WinMD::NewDataSet::CommandClassRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::CommandClassRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsCommandClass_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetCommandClass_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::ModeRow^  >^  GetModeRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class ModeRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::ModeDataTable^  tableMode;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ModeRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  index {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  label {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 SupportedModes_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::SupportedModesRow^  SupportedModesRow {
                OpenZWave_WinMD::NewDataSet::SupportedModesRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::SupportedModesRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsSupportedModes_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetSupportedModes_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class SensorMapRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::SensorMapDataTable^  tableSensorMap;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            SensorMapRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  index {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  type {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 CommandClass_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::CommandClassRow^  CommandClassRow {
                OpenZWave_WinMD::NewDataSet::CommandClassRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::CommandClassRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsCommandClass_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetCommandClass_IdNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class ProductRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::ProductRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProductRowChangeEvent(OpenZWave_WinMD::NewDataSet::ProductRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ProductRow^  Row {
                OpenZWave_WinMD::NewDataSet::ProductRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class ProtocolRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::ProtocolRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProtocolRowChangeEvent(OpenZWave_WinMD::NewDataSet::ProtocolRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ProtocolRow^  Row {
                OpenZWave_WinMD::NewDataSet::ProtocolRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class APIcallRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::APIcallRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            APIcallRowChangeEvent(OpenZWave_WinMD::NewDataSet::APIcallRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::APIcallRow^  Row {
                OpenZWave_WinMD::NewDataSet::APIcallRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class CommandClassRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::CommandClassRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            CommandClassRowChangeEvent(OpenZWave_WinMD::NewDataSet::CommandClassRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::CommandClassRow^  Row {
                OpenZWave_WinMD::NewDataSet::CommandClassRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class InstanceRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::InstanceRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            InstanceRowChangeEvent(OpenZWave_WinMD::NewDataSet::InstanceRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::InstanceRow^  Row {
                OpenZWave_WinMD::NewDataSet::InstanceRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class AssociationsRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::AssociationsRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            AssociationsRowChangeEvent(OpenZWave_WinMD::NewDataSet::AssociationsRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::AssociationsRow^  Row {
                OpenZWave_WinMD::NewDataSet::AssociationsRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class GroupRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::GroupRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            GroupRowChangeEvent(OpenZWave_WinMD::NewDataSet::GroupRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::GroupRow^  Row {
                OpenZWave_WinMD::NewDataSet::GroupRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class NodeRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::NodeRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            NodeRowChangeEvent(OpenZWave_WinMD::NewDataSet::NodeRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::NodeRow^  Row {
                OpenZWave_WinMD::NewDataSet::NodeRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class ValueRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::ValueRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ValueRowChangeEvent(OpenZWave_WinMD::NewDataSet::ValueRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ValueRow^  Row {
                OpenZWave_WinMD::NewDataSet::ValueRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class HelpRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::HelpRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            HelpRowChangeEvent(OpenZWave_WinMD::NewDataSet::HelpRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::HelpRow^  Row {
                OpenZWave_WinMD::NewDataSet::HelpRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class _ItemRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::_ItemRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _ItemRowChangeEvent(OpenZWave_WinMD::NewDataSet::_ItemRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::_ItemRow^  Row {
                OpenZWave_WinMD::NewDataSet::_ItemRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class TriggerRefreshValueRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            TriggerRefreshValueRowChangeEvent(OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  Row {
                OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class RefreshClassValueRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            RefreshClassValueRowChangeEvent(OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  Row {
                OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class SupportedModesRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::SupportedModesRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            SupportedModesRowChangeEvent(OpenZWave_WinMD::NewDataSet::SupportedModesRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::SupportedModesRow^  Row {
                OpenZWave_WinMD::NewDataSet::SupportedModesRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class ModeRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::ModeRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ModeRowChangeEvent(OpenZWave_WinMD::NewDataSet::ModeRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ModeRow^  Row {
                OpenZWave_WinMD::NewDataSet::ModeRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class SensorMapRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::SensorMapRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            SensorMapRowChangeEvent(OpenZWave_WinMD::NewDataSet::SensorMapRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::SensorMapRow^  Row {
                OpenZWave_WinMD::NewDataSet::SensorMapRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace OpenZWave_WinMD {
    
    
    inline NewDataSet::NewDataSet() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &OpenZWave_WinMD::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &OpenZWave_WinMD::NewDataSet::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"Product"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::ProductDataTable(ds->Tables[L"Product"])));
            }
            if (ds->Tables[L"Protocol"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::ProtocolDataTable(ds->Tables[L"Protocol"])));
            }
            if (ds->Tables[L"APIcall"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::APIcallDataTable(ds->Tables[L"APIcall"])));
            }
            if (ds->Tables[L"CommandClass"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::CommandClassDataTable(ds->Tables[L"CommandClass"])));
            }
            if (ds->Tables[L"Instance"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::InstanceDataTable(ds->Tables[L"Instance"])));
            }
            if (ds->Tables[L"Associations"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::AssociationsDataTable(ds->Tables[L"Associations"])));
            }
            if (ds->Tables[L"Group"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::GroupDataTable(ds->Tables[L"Group"])));
            }
            if (ds->Tables[L"Node"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::NodeDataTable(ds->Tables[L"Node"])));
            }
            if (ds->Tables[L"Value"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::ValueDataTable(ds->Tables[L"Value"])));
            }
            if (ds->Tables[L"Help"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::HelpDataTable(ds->Tables[L"Help"])));
            }
            if (ds->Tables[L"Item"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::_ItemDataTable(ds->Tables[L"Item"])));
            }
            if (ds->Tables[L"TriggerRefreshValue"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::TriggerRefreshValueDataTable(ds->Tables[L"TriggerRefreshValue"])));
            }
            if (ds->Tables[L"RefreshClassValue"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::RefreshClassValueDataTable(ds->Tables[L"RefreshClassValue"])));
            }
            if (ds->Tables[L"SupportedModes"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::SupportedModesDataTable(ds->Tables[L"SupportedModes"])));
            }
            if (ds->Tables[L"Mode"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::ModeDataTable(ds->Tables[L"Mode"])));
            }
            if (ds->Tables[L"SensorMap"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::SensorMapDataTable(ds->Tables[L"SensorMap"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &OpenZWave_WinMD::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProductDataTable^  NewDataSet::Product::get() {
        return this->tableProduct;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProtocolDataTable^  NewDataSet::Protocol::get() {
        return this->tableProtocol;
    }
    
    inline OpenZWave_WinMD::NewDataSet::APIcallDataTable^  NewDataSet::APIcall::get() {
        return this->tableAPIcall;
    }
    
    inline OpenZWave_WinMD::NewDataSet::CommandClassDataTable^  NewDataSet::CommandClass::get() {
        return this->tableCommandClass;
    }
    
    inline OpenZWave_WinMD::NewDataSet::InstanceDataTable^  NewDataSet::Instance::get() {
        return this->tableInstance;
    }
    
    inline OpenZWave_WinMD::NewDataSet::AssociationsDataTable^  NewDataSet::Associations::get() {
        return this->tableAssociations;
    }
    
    inline OpenZWave_WinMD::NewDataSet::GroupDataTable^  NewDataSet::Group::get() {
        return this->tableGroup;
    }
    
    inline OpenZWave_WinMD::NewDataSet::NodeDataTable^  NewDataSet::Node::get() {
        return this->tableNode;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ValueDataTable^  NewDataSet::Value::get() {
        return this->tableValue;
    }
    
    inline OpenZWave_WinMD::NewDataSet::HelpDataTable^  NewDataSet::Help::get() {
        return this->tableHelp;
    }
    
    inline OpenZWave_WinMD::NewDataSet::_ItemDataTable^  NewDataSet::_Item::get() {
        return this->table_Item;
    }
    
    inline OpenZWave_WinMD::NewDataSet::TriggerRefreshValueDataTable^  NewDataSet::TriggerRefreshValue::get() {
        return this->tableTriggerRefreshValue;
    }
    
    inline OpenZWave_WinMD::NewDataSet::RefreshClassValueDataTable^  NewDataSet::RefreshClassValue::get() {
        return this->tableRefreshClassValue;
    }
    
    inline OpenZWave_WinMD::NewDataSet::SupportedModesDataTable^  NewDataSet::SupportedModes::get() {
        return this->tableSupportedModes;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ModeDataTable^  NewDataSet::Mode::get() {
        return this->tableMode;
    }
    
    inline OpenZWave_WinMD::NewDataSet::SensorMapDataTable^  NewDataSet::SensorMap::get() {
        return this->tableSensorMap;
    }
    
    inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  NewDataSet::Clone() {
        OpenZWave_WinMD::NewDataSet^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"Product"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::ProductDataTable(ds->Tables[L"Product"])));
            }
            if (ds->Tables[L"Protocol"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::ProtocolDataTable(ds->Tables[L"Protocol"])));
            }
            if (ds->Tables[L"APIcall"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::APIcallDataTable(ds->Tables[L"APIcall"])));
            }
            if (ds->Tables[L"CommandClass"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::CommandClassDataTable(ds->Tables[L"CommandClass"])));
            }
            if (ds->Tables[L"Instance"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::InstanceDataTable(ds->Tables[L"Instance"])));
            }
            if (ds->Tables[L"Associations"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::AssociationsDataTable(ds->Tables[L"Associations"])));
            }
            if (ds->Tables[L"Group"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::GroupDataTable(ds->Tables[L"Group"])));
            }
            if (ds->Tables[L"Node"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::NodeDataTable(ds->Tables[L"Node"])));
            }
            if (ds->Tables[L"Value"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::ValueDataTable(ds->Tables[L"Value"])));
            }
            if (ds->Tables[L"Help"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::HelpDataTable(ds->Tables[L"Help"])));
            }
            if (ds->Tables[L"Item"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::_ItemDataTable(ds->Tables[L"Item"])));
            }
            if (ds->Tables[L"TriggerRefreshValue"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::TriggerRefreshValueDataTable(ds->Tables[L"TriggerRefreshValue"])));
            }
            if (ds->Tables[L"RefreshClassValue"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::RefreshClassValueDataTable(ds->Tables[L"RefreshClassValue"])));
            }
            if (ds->Tables[L"SupportedModes"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::SupportedModesDataTable(ds->Tables[L"SupportedModes"])));
            }
            if (ds->Tables[L"Mode"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::ModeDataTable(ds->Tables[L"Mode"])));
            }
            if (ds->Tables[L"SensorMap"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::SensorMapDataTable(ds->Tables[L"SensorMap"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void NewDataSet::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
        this->tableProduct = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductDataTable^  >(__super::Tables[L"Product"]));
        if (initTable == true) {
            if (this->tableProduct != nullptr) {
                this->tableProduct->InitVars();
            }
        }
        this->tableProtocol = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProtocolDataTable^  >(__super::Tables[L"Protocol"]));
        if (initTable == true) {
            if (this->tableProtocol != nullptr) {
                this->tableProtocol->InitVars();
            }
        }
        this->tableAPIcall = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::APIcallDataTable^  >(__super::Tables[L"APIcall"]));
        if (initTable == true) {
            if (this->tableAPIcall != nullptr) {
                this->tableAPIcall->InitVars();
            }
        }
        this->tableCommandClass = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::CommandClassDataTable^  >(__super::Tables[L"CommandClass"]));
        if (initTable == true) {
            if (this->tableCommandClass != nullptr) {
                this->tableCommandClass->InitVars();
            }
        }
        this->tableInstance = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::InstanceDataTable^  >(__super::Tables[L"Instance"]));
        if (initTable == true) {
            if (this->tableInstance != nullptr) {
                this->tableInstance->InitVars();
            }
        }
        this->tableAssociations = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::AssociationsDataTable^  >(__super::Tables[L"Associations"]));
        if (initTable == true) {
            if (this->tableAssociations != nullptr) {
                this->tableAssociations->InitVars();
            }
        }
        this->tableGroup = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::GroupDataTable^  >(__super::Tables[L"Group"]));
        if (initTable == true) {
            if (this->tableGroup != nullptr) {
                this->tableGroup->InitVars();
            }
        }
        this->tableNode = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeDataTable^  >(__super::Tables[L"Node"]));
        if (initTable == true) {
            if (this->tableNode != nullptr) {
                this->tableNode->InitVars();
            }
        }
        this->tableValue = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ValueDataTable^  >(__super::Tables[L"Value"]));
        if (initTable == true) {
            if (this->tableValue != nullptr) {
                this->tableValue->InitVars();
            }
        }
        this->tableHelp = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::HelpDataTable^  >(__super::Tables[L"Help"]));
        if (initTable == true) {
            if (this->tableHelp != nullptr) {
                this->tableHelp->InitVars();
            }
        }
        this->table_Item = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::_ItemDataTable^  >(__super::Tables[L"Item"]));
        if (initTable == true) {
            if (this->table_Item != nullptr) {
                this->table_Item->InitVars();
            }
        }
        this->tableTriggerRefreshValue = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::TriggerRefreshValueDataTable^  >(__super::Tables[L"TriggerRefreshValue"]));
        if (initTable == true) {
            if (this->tableTriggerRefreshValue != nullptr) {
                this->tableTriggerRefreshValue->InitVars();
            }
        }
        this->tableRefreshClassValue = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::RefreshClassValueDataTable^  >(__super::Tables[L"RefreshClassValue"]));
        if (initTable == true) {
            if (this->tableRefreshClassValue != nullptr) {
                this->tableRefreshClassValue->InitVars();
            }
        }
        this->tableSupportedModes = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SupportedModesDataTable^  >(__super::Tables[L"SupportedModes"]));
        if (initTable == true) {
            if (this->tableSupportedModes != nullptr) {
                this->tableSupportedModes->InitVars();
            }
        }
        this->tableMode = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ModeDataTable^  >(__super::Tables[L"Mode"]));
        if (initTable == true) {
            if (this->tableMode != nullptr) {
                this->tableMode->InitVars();
            }
        }
        this->tableSensorMap = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SensorMapDataTable^  >(__super::Tables[L"SensorMap"]));
        if (initTable == true) {
            if (this->tableSensorMap != nullptr) {
                this->tableSensorMap->InitVars();
            }
        }
        this->relationProduct_Protocol = this->Relations[L"Product_Protocol"];
        this->relationProtocol_APIcall = this->Relations[L"Protocol_APIcall"];
        this->relationProduct_CommandClass = this->Relations[L"Product_CommandClass"];
        this->relationCommandClass_Instance = this->Relations[L"CommandClass_Instance"];
        this->relationCommandClass_Associations = this->Relations[L"CommandClass_Associations"];
        this->relationAssociations_Group = this->Relations[L"Associations_Group"];
        this->relationGroup_Node = this->Relations[L"Group_Node"];
        this->relationCommandClass_Value = this->Relations[L"CommandClass_Value"];
        this->relationValue_Help = this->Relations[L"Value_Help"];
        this->relationValue_Item = this->Relations[L"Value_Item"];
        this->relationCommandClass_TriggerRefreshValue = this->Relations[L"CommandClass_TriggerRefreshValue"];
        this->relationTriggerRefreshValue_RefreshClassValue = this->Relations[L"TriggerRefreshValue_RefreshClassValue"];
        this->relationCommandClass_SupportedModes = this->Relations[L"CommandClass_SupportedModes"];
        this->relationSupportedModes_Mode = this->Relations[L"SupportedModes_Mode"];
        this->relationCommandClass_SensorMap = this->Relations[L"CommandClass_SensorMap"];
    }
    
    inline ::System::Void NewDataSet::InitClass() {
        this->DataSetName = L"NewDataSet";
        this->Prefix = L"";
        this->Namespace = L"http://code.google.com/p/open-zwave/";
        this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tableProduct = (gcnew OpenZWave_WinMD::NewDataSet::ProductDataTable());
        __super::Tables->Add(this->tableProduct);
        this->tableProtocol = (gcnew OpenZWave_WinMD::NewDataSet::ProtocolDataTable());
        __super::Tables->Add(this->tableProtocol);
        this->tableAPIcall = (gcnew OpenZWave_WinMD::NewDataSet::APIcallDataTable());
        __super::Tables->Add(this->tableAPIcall);
        this->tableCommandClass = (gcnew OpenZWave_WinMD::NewDataSet::CommandClassDataTable());
        __super::Tables->Add(this->tableCommandClass);
        this->tableInstance = (gcnew OpenZWave_WinMD::NewDataSet::InstanceDataTable());
        __super::Tables->Add(this->tableInstance);
        this->tableAssociations = (gcnew OpenZWave_WinMD::NewDataSet::AssociationsDataTable());
        __super::Tables->Add(this->tableAssociations);
        this->tableGroup = (gcnew OpenZWave_WinMD::NewDataSet::GroupDataTable());
        __super::Tables->Add(this->tableGroup);
        this->tableNode = (gcnew OpenZWave_WinMD::NewDataSet::NodeDataTable());
        __super::Tables->Add(this->tableNode);
        this->tableValue = (gcnew OpenZWave_WinMD::NewDataSet::ValueDataTable());
        __super::Tables->Add(this->tableValue);
        this->tableHelp = (gcnew OpenZWave_WinMD::NewDataSet::HelpDataTable());
        __super::Tables->Add(this->tableHelp);
        this->table_Item = (gcnew OpenZWave_WinMD::NewDataSet::_ItemDataTable());
        __super::Tables->Add(this->table_Item);
        this->tableTriggerRefreshValue = (gcnew OpenZWave_WinMD::NewDataSet::TriggerRefreshValueDataTable());
        __super::Tables->Add(this->tableTriggerRefreshValue);
        this->tableRefreshClassValue = (gcnew OpenZWave_WinMD::NewDataSet::RefreshClassValueDataTable());
        __super::Tables->Add(this->tableRefreshClassValue);
        this->tableSupportedModes = (gcnew OpenZWave_WinMD::NewDataSet::SupportedModesDataTable());
        __super::Tables->Add(this->tableSupportedModes);
        this->tableMode = (gcnew OpenZWave_WinMD::NewDataSet::ModeDataTable());
        __super::Tables->Add(this->tableMode);
        this->tableSensorMap = (gcnew OpenZWave_WinMD::NewDataSet::SensorMapDataTable());
        __super::Tables->Add(this->tableSensorMap);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Product_Protocol", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableProduct->Product_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableProtocol->Product_IdColumn}));
        this->tableProtocol->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Protocol_APIcall", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableProtocol->Protocol_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableAPIcall->Protocol_IdColumn}));
        this->tableAPIcall->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Product_CommandClass", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableProduct->Product_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCommandClass->Product_IdColumn}));
        this->tableCommandClass->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CommandClass_Instance", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCommandClass->CommandClass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableInstance->CommandClass_IdColumn}));
        this->tableInstance->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CommandClass_Associations", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCommandClass->CommandClass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableAssociations->CommandClass_IdColumn}));
        this->tableAssociations->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Associations_Group", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableAssociations->Associations_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGroup->Associations_IdColumn}));
        this->tableGroup->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Group_Node", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGroup->Group_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableNode->Group_IdColumn}));
        this->tableNode->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CommandClass_Value", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCommandClass->CommandClass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableValue->CommandClass_IdColumn}));
        this->tableValue->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Value_Help", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableValue->Value_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableHelp->Value_IdColumn}));
        this->tableHelp->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Value_Item", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableValue->Value_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_Item->Value_IdColumn}));
        this->table_Item->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CommandClass_TriggerRefreshValue", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCommandClass->CommandClass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTriggerRefreshValue->CommandClass_IdColumn}));
        this->tableTriggerRefreshValue->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TriggerRefreshValue_RefreshClassValue", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTriggerRefreshValue->TriggerRefreshValue_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRefreshClassValue->TriggerRefreshValue_IdColumn}));
        this->tableRefreshClassValue->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CommandClass_SupportedModes", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCommandClass->CommandClass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSupportedModes->CommandClass_IdColumn}));
        this->tableSupportedModes->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"SupportedModes_Mode", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSupportedModes->SupportedModes_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableMode->SupportedModes_IdColumn}));
        this->tableMode->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CommandClass_SensorMap", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCommandClass->CommandClass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSensorMap->CommandClass_IdColumn}));
        this->tableSensorMap->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationProduct_Protocol = (gcnew ::System::Data::DataRelation(L"Product_Protocol", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableProduct->Product_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableProtocol->Product_IdColumn}, false));
        this->relationProduct_Protocol->Nested = true;
        this->Relations->Add(this->relationProduct_Protocol);
        this->relationProtocol_APIcall = (gcnew ::System::Data::DataRelation(L"Protocol_APIcall", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableProtocol->Protocol_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableAPIcall->Protocol_IdColumn}, false));
        this->relationProtocol_APIcall->Nested = true;
        this->Relations->Add(this->relationProtocol_APIcall);
        this->relationProduct_CommandClass = (gcnew ::System::Data::DataRelation(L"Product_CommandClass", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableProduct->Product_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCommandClass->Product_IdColumn}, false));
        this->relationProduct_CommandClass->Nested = true;
        this->Relations->Add(this->relationProduct_CommandClass);
        this->relationCommandClass_Instance = (gcnew ::System::Data::DataRelation(L"CommandClass_Instance", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCommandClass->CommandClass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableInstance->CommandClass_IdColumn}, false));
        this->relationCommandClass_Instance->Nested = true;
        this->Relations->Add(this->relationCommandClass_Instance);
        this->relationCommandClass_Associations = (gcnew ::System::Data::DataRelation(L"CommandClass_Associations", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCommandClass->CommandClass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableAssociations->CommandClass_IdColumn}, false));
        this->relationCommandClass_Associations->Nested = true;
        this->Relations->Add(this->relationCommandClass_Associations);
        this->relationAssociations_Group = (gcnew ::System::Data::DataRelation(L"Associations_Group", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableAssociations->Associations_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGroup->Associations_IdColumn}, false));
        this->relationAssociations_Group->Nested = true;
        this->Relations->Add(this->relationAssociations_Group);
        this->relationGroup_Node = (gcnew ::System::Data::DataRelation(L"Group_Node", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGroup->Group_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableNode->Group_IdColumn}, false));
        this->relationGroup_Node->Nested = true;
        this->Relations->Add(this->relationGroup_Node);
        this->relationCommandClass_Value = (gcnew ::System::Data::DataRelation(L"CommandClass_Value", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCommandClass->CommandClass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableValue->CommandClass_IdColumn}, false));
        this->relationCommandClass_Value->Nested = true;
        this->Relations->Add(this->relationCommandClass_Value);
        this->relationValue_Help = (gcnew ::System::Data::DataRelation(L"Value_Help", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableValue->Value_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableHelp->Value_IdColumn}, false));
        this->relationValue_Help->Nested = true;
        this->Relations->Add(this->relationValue_Help);
        this->relationValue_Item = (gcnew ::System::Data::DataRelation(L"Value_Item", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableValue->Value_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_Item->Value_IdColumn}, false));
        this->relationValue_Item->Nested = true;
        this->Relations->Add(this->relationValue_Item);
        this->relationCommandClass_TriggerRefreshValue = (gcnew ::System::Data::DataRelation(L"CommandClass_TriggerRefreshValue", 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCommandClass->CommandClass_IdColumn}, gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTriggerRefreshValue->CommandClass_IdColumn}, 
            false));
        this->relationCommandClass_TriggerRefreshValue->Nested = true;
        this->Relations->Add(this->relationCommandClass_TriggerRefreshValue);
        this->relationTriggerRefreshValue_RefreshClassValue = (gcnew ::System::Data::DataRelation(L"TriggerRefreshValue_RefreshClassValue", 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTriggerRefreshValue->TriggerRefreshValue_IdColumn}, gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRefreshClassValue->TriggerRefreshValue_IdColumn}, 
            false));
        this->relationTriggerRefreshValue_RefreshClassValue->Nested = true;
        this->Relations->Add(this->relationTriggerRefreshValue_RefreshClassValue);
        this->relationCommandClass_SupportedModes = (gcnew ::System::Data::DataRelation(L"CommandClass_SupportedModes", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCommandClass->CommandClass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSupportedModes->CommandClass_IdColumn}, false));
        this->relationCommandClass_SupportedModes->Nested = true;
        this->Relations->Add(this->relationCommandClass_SupportedModes);
        this->relationSupportedModes_Mode = (gcnew ::System::Data::DataRelation(L"SupportedModes_Mode", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSupportedModes->SupportedModes_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableMode->SupportedModes_IdColumn}, false));
        this->relationSupportedModes_Mode->Nested = true;
        this->Relations->Add(this->relationSupportedModes_Mode);
        this->relationCommandClass_SensorMap = (gcnew ::System::Data::DataRelation(L"CommandClass_SensorMap", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCommandClass->CommandClass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSensorMap->CommandClass_IdColumn}, false));
        this->relationCommandClass_SensorMap->Nested = true;
        this->Relations->Add(this->relationCommandClass_SensorMap);
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeProduct() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeProtocol() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeAPIcall() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeCommandClass() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeInstance() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeAssociations() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeGroup() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeNode() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeValue() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeHelp() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerialize_Item() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTriggerRefreshValue() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRefreshClassValue() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeSupportedModes() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeMode() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeSensorMap() {
        return false;
    }
    
    inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ProductDataTable::ProductDataTable() {
        this->TableName = L"Product";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::ProductDataTable::ProductDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::ProductDataTable::ProductDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ProductDataTable::Product_IdColumn::get() {
        return this->columnProduct_Id;
    }
    
    inline ::System::Int32 NewDataSet::ProductDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProductRow^  NewDataSet::ProductDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::ProductDataTable::AddProductRow(OpenZWave_WinMD::NewDataSet::ProductRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProductRow^  NewDataSet::ProductDataTable::AddProductRow() {
        OpenZWave_WinMD::NewDataSet::ProductRow^  rowProductRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {nullptr};
        rowProductRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowProductRow);
        return rowProductRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::ProductDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ProductDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::ProductDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ProductDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::ProductDataTable());
    }
    
    inline ::System::Void NewDataSet::ProductDataTable::InitVars() {
        this->columnProduct_Id = __super::Columns[L"Product_Id"];
    }
    
    inline ::System::Void NewDataSet::ProductDataTable::InitClass() {
        this->columnProduct_Id = (gcnew ::System::Data::DataColumn(L"Product_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnProduct_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnProduct_Id}, 
                true)));
        this->columnProduct_Id->AutoIncrement = true;
        this->columnProduct_Id->AllowDBNull = false;
        this->columnProduct_Id->Unique = true;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProductRow^  NewDataSet::ProductDataTable::NewProductRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::ProductDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::ProductRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::ProductDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::ProductRow::typeid;
    }
    
    inline ::System::Void NewDataSet::ProductDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ProductRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::ProductRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ProductDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ProductRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::ProductRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ProductDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ProductRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::ProductRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ProductDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ProductRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::ProductRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ProductDataTable::RemoveProductRow(OpenZWave_WinMD::NewDataSet::ProductRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ProductDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ProductDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ProtocolDataTable::ProtocolDataTable() {
        this->TableName = L"Protocol";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::ProtocolDataTable::ProtocolDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::ProtocolDataTable::ProtocolDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ProtocolDataTable::nodeinfosupportedColumn::get() {
        return this->columnnodeinfosupported;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ProtocolDataTable::refreshonnodeinfoframeColumn::get() {
        return this->columnrefreshonnodeinfoframe;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ProtocolDataTable::Protocol_IdColumn::get() {
        return this->columnProtocol_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ProtocolDataTable::Product_IdColumn::get() {
        return this->columnProduct_Id;
    }
    
    inline ::System::Int32 NewDataSet::ProtocolDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProtocolRow^  NewDataSet::ProtocolDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProtocolRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::ProtocolDataTable::AddProtocolRow(OpenZWave_WinMD::NewDataSet::ProtocolRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProtocolRow^  NewDataSet::ProtocolDataTable::AddProtocolRow(System::String^  nodeinfosupported, 
                System::String^  refreshonnodeinfoframe, OpenZWave_WinMD::NewDataSet::ProductRow^  parentProductRowByProduct_Protocol) {
        OpenZWave_WinMD::NewDataSet::ProtocolRow^  rowProtocolRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProtocolRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {nodeinfosupported, 
            refreshonnodeinfoframe, nullptr, nullptr};
        if (parentProductRowByProduct_Protocol != nullptr) {
            columnValuesArray[3] = parentProductRowByProduct_Protocol[0];
        }
        rowProtocolRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowProtocolRow);
        return rowProtocolRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::ProtocolDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ProtocolDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::ProtocolDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProtocolDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ProtocolDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::ProtocolDataTable());
    }
    
    inline ::System::Void NewDataSet::ProtocolDataTable::InitVars() {
        this->columnnodeinfosupported = __super::Columns[L"nodeinfosupported"];
        this->columnrefreshonnodeinfoframe = __super::Columns[L"refreshonnodeinfoframe"];
        this->columnProtocol_Id = __super::Columns[L"Protocol_Id"];
        this->columnProduct_Id = __super::Columns[L"Product_Id"];
    }
    
    inline ::System::Void NewDataSet::ProtocolDataTable::InitClass() {
        this->columnnodeinfosupported = (gcnew ::System::Data::DataColumn(L"nodeinfosupported", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnnodeinfosupported);
        this->columnrefreshonnodeinfoframe = (gcnew ::System::Data::DataColumn(L"refreshonnodeinfoframe", ::System::String::typeid, 
            nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrefreshonnodeinfoframe);
        this->columnProtocol_Id = (gcnew ::System::Data::DataColumn(L"Protocol_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnProtocol_Id);
        this->columnProduct_Id = (gcnew ::System::Data::DataColumn(L"Product_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnProduct_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnProtocol_Id}, 
                true)));
        this->columnnodeinfosupported->Namespace = L"";
        this->columnrefreshonnodeinfoframe->Namespace = L"";
        this->columnProtocol_Id->AutoIncrement = true;
        this->columnProtocol_Id->AllowDBNull = false;
        this->columnProtocol_Id->Unique = true;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProtocolRow^  NewDataSet::ProtocolDataTable::NewProtocolRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProtocolRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::ProtocolDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::ProtocolRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::ProtocolDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::ProtocolRow::typeid;
    }
    
    inline ::System::Void NewDataSet::ProtocolDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ProtocolRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::ProtocolRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProtocolRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ProtocolDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ProtocolRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::ProtocolRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProtocolRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ProtocolDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ProtocolRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::ProtocolRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProtocolRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ProtocolDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ProtocolRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::ProtocolRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProtocolRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ProtocolDataTable::RemoveProtocolRow(OpenZWave_WinMD::NewDataSet::ProtocolRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ProtocolDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ProtocolDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::APIcallDataTable::APIcallDataTable() {
        this->TableName = L"APIcall";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::APIcallDataTable::APIcallDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::APIcallDataTable::APIcallDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::APIcallDataTable::functionColumn::get() {
        return this->columnfunction;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::APIcallDataTable::presentColumn::get() {
        return this->columnpresent;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::APIcallDataTable::Protocol_IdColumn::get() {
        return this->columnProtocol_Id;
    }
    
    inline ::System::Int32 NewDataSet::APIcallDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::APIcallRow^  NewDataSet::APIcallDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::APIcallRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::APIcallDataTable::AddAPIcallRow(OpenZWave_WinMD::NewDataSet::APIcallRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::APIcallRow^  NewDataSet::APIcallDataTable::AddAPIcallRow(System::String^  function, 
                System::String^  present, OpenZWave_WinMD::NewDataSet::ProtocolRow^  parentProtocolRowByProtocol_APIcall) {
        OpenZWave_WinMD::NewDataSet::APIcallRow^  rowAPIcallRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::APIcallRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {function, present, 
            nullptr};
        if (parentProtocolRowByProtocol_APIcall != nullptr) {
            columnValuesArray[2] = parentProtocolRowByProtocol_APIcall[2];
        }
        rowAPIcallRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowAPIcallRow);
        return rowAPIcallRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::APIcallDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::APIcallDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::APIcallDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::APIcallDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::APIcallDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::APIcallDataTable());
    }
    
    inline ::System::Void NewDataSet::APIcallDataTable::InitVars() {
        this->columnfunction = __super::Columns[L"function"];
        this->columnpresent = __super::Columns[L"present"];
        this->columnProtocol_Id = __super::Columns[L"Protocol_Id"];
    }
    
    inline ::System::Void NewDataSet::APIcallDataTable::InitClass() {
        this->columnfunction = (gcnew ::System::Data::DataColumn(L"function", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfunction);
        this->columnpresent = (gcnew ::System::Data::DataColumn(L"present", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnpresent);
        this->columnProtocol_Id = (gcnew ::System::Data::DataColumn(L"Protocol_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnProtocol_Id);
        this->columnfunction->AllowDBNull = false;
        this->columnfunction->Namespace = L"";
        this->columnpresent->AllowDBNull = false;
        this->columnpresent->Namespace = L"";
    }
    
    inline OpenZWave_WinMD::NewDataSet::APIcallRow^  NewDataSet::APIcallDataTable::NewAPIcallRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::APIcallRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::APIcallDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::APIcallRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::APIcallDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::APIcallRow::typeid;
    }
    
    inline ::System::Void NewDataSet::APIcallDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->APIcallRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::APIcallRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::APIcallRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::APIcallDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->APIcallRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::APIcallRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::APIcallRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::APIcallDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->APIcallRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::APIcallRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::APIcallRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::APIcallDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->APIcallRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::APIcallRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::APIcallRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::APIcallDataTable::RemoveAPIcallRow(OpenZWave_WinMD::NewDataSet::APIcallRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::APIcallDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"APIcallDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::CommandClassDataTable::CommandClassDataTable() {
        this->TableName = L"CommandClass";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::CommandClassDataTable::CommandClassDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::CommandClassDataTable::CommandClassDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::idColumn::get() {
        return this->columnid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::actionColumn::get() {
        return this->columnaction;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::baseColumn::get() {
        return this->columnbase;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::override_precisionColumn::get() {
        return this->columnoverride_precision;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::scenecountColumn::get() {
        return this->columnscenecount;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::create_varsColumn::get() {
        return this->columncreate_vars;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::setasreportColumn::get() {
        return this->columnsetasreport;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::ignoremappingColumn::get() {
        return this->columnignoremapping;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::getsupportedColumn::get() {
        return this->columngetsupported;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::classgetsupportedColumn::get() {
        return this->columnclassgetsupported;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::coloridxbugColumn::get() {
        return this->columncoloridxbug;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::forceUniqueEndpointsColumn::get() {
        return this->columnforceUniqueEndpoints;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::versionColumn::get() {
        return this->columnversion;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::request_flagsColumn::get() {
        return this->columnrequest_flags;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::endpointsColumn::get() {
        return this->columnendpoints;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::mappingColumn::get() {
        return this->columnmapping;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::ignoreUnsolicitedMultiChnCapReportColumn::get() {
        return this->columnignoreUnsolicitedMultiChnCapReport;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::codesColumn::get() {
        return this->columncodes;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::CommandClass_IdColumn::get() {
        return this->columnCommandClass_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::CommandClassDataTable::Product_IdColumn::get() {
        return this->columnProduct_Id;
    }
    
    inline ::System::Int32 NewDataSet::CommandClassDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::CommandClassRow^  NewDataSet::CommandClassDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::CommandClassRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::CommandClassDataTable::AddCommandClassRow(OpenZWave_WinMD::NewDataSet::CommandClassRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::CommandClassRow^  NewDataSet::CommandClassDataTable::AddCommandClassRow(
                System::String^  id, 
                System::String^  action, 
                System::String^  base, 
                System::String^  override_precision, 
                System::String^  scenecount, 
                System::String^  create_vars, 
                System::String^  name, 
                System::String^  setasreport, 
                System::String^  ignoremapping, 
                System::String^  getsupported, 
                System::String^  classgetsupported, 
                System::String^  coloridxbug, 
                System::String^  forceUniqueEndpoints, 
                System::String^  version, 
                System::String^  request_flags, 
                System::String^  endpoints, 
                System::String^  mapping, 
                System::String^  ignoreUnsolicitedMultiChnCapReport, 
                System::String^  codes, 
                OpenZWave_WinMD::NewDataSet::ProductRow^  parentProductRowByProduct_CommandClass) {
        OpenZWave_WinMD::NewDataSet::CommandClassRow^  rowCommandClassRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::CommandClassRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(21) {id, action, base, override_precision, 
            scenecount, create_vars, name, setasreport, ignoremapping, getsupported, classgetsupported, coloridxbug, forceUniqueEndpoints, 
            version, request_flags, endpoints, mapping, ignoreUnsolicitedMultiChnCapReport, codes, nullptr, nullptr};
        if (parentProductRowByProduct_CommandClass != nullptr) {
            columnValuesArray[20] = parentProductRowByProduct_CommandClass[0];
        }
        rowCommandClassRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowCommandClassRow);
        return rowCommandClassRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::CommandClassDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::CommandClassDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::CommandClassDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::CommandClassDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::CommandClassDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::CommandClassDataTable());
    }
    
    inline ::System::Void NewDataSet::CommandClassDataTable::InitVars() {
        this->columnid = __super::Columns[L"id"];
        this->columnaction = __super::Columns[L"action"];
        this->columnbase = __super::Columns[L"base"];
        this->columnoverride_precision = __super::Columns[L"override_precision"];
        this->columnscenecount = __super::Columns[L"scenecount"];
        this->columncreate_vars = __super::Columns[L"create_vars"];
        this->columnname = __super::Columns[L"name"];
        this->columnsetasreport = __super::Columns[L"setasreport"];
        this->columnignoremapping = __super::Columns[L"ignoremapping"];
        this->columngetsupported = __super::Columns[L"getsupported"];
        this->columnclassgetsupported = __super::Columns[L"classgetsupported"];
        this->columncoloridxbug = __super::Columns[L"coloridxbug"];
        this->columnforceUniqueEndpoints = __super::Columns[L"forceUniqueEndpoints"];
        this->columnversion = __super::Columns[L"version"];
        this->columnrequest_flags = __super::Columns[L"request_flags"];
        this->columnendpoints = __super::Columns[L"endpoints"];
        this->columnmapping = __super::Columns[L"mapping"];
        this->columnignoreUnsolicitedMultiChnCapReport = __super::Columns[L"ignoreUnsolicitedMultiChnCapReport"];
        this->columncodes = __super::Columns[L"codes"];
        this->columnCommandClass_Id = __super::Columns[L"CommandClass_Id"];
        this->columnProduct_Id = __super::Columns[L"Product_Id"];
    }
    
    inline ::System::Void NewDataSet::CommandClassDataTable::InitClass() {
        this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnid);
        this->columnaction = (gcnew ::System::Data::DataColumn(L"action", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnaction);
        this->columnbase = (gcnew ::System::Data::DataColumn(L"base", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnbase);
        this->columnoverride_precision = (gcnew ::System::Data::DataColumn(L"override_precision", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnoverride_precision);
        this->columnscenecount = (gcnew ::System::Data::DataColumn(L"scenecount", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnscenecount);
        this->columncreate_vars = (gcnew ::System::Data::DataColumn(L"create_vars", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncreate_vars);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnsetasreport = (gcnew ::System::Data::DataColumn(L"setasreport", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnsetasreport);
        this->columnignoremapping = (gcnew ::System::Data::DataColumn(L"ignoremapping", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnignoremapping);
        this->columngetsupported = (gcnew ::System::Data::DataColumn(L"getsupported", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columngetsupported);
        this->columnclassgetsupported = (gcnew ::System::Data::DataColumn(L"classgetsupported", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnclassgetsupported);
        this->columncoloridxbug = (gcnew ::System::Data::DataColumn(L"coloridxbug", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncoloridxbug);
        this->columnforceUniqueEndpoints = (gcnew ::System::Data::DataColumn(L"forceUniqueEndpoints", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnforceUniqueEndpoints);
        this->columnversion = (gcnew ::System::Data::DataColumn(L"version", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnversion);
        this->columnrequest_flags = (gcnew ::System::Data::DataColumn(L"request_flags", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrequest_flags);
        this->columnendpoints = (gcnew ::System::Data::DataColumn(L"endpoints", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnendpoints);
        this->columnmapping = (gcnew ::System::Data::DataColumn(L"mapping", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmapping);
        this->columnignoreUnsolicitedMultiChnCapReport = (gcnew ::System::Data::DataColumn(L"ignoreUnsolicitedMultiChnCapReport", 
            ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnignoreUnsolicitedMultiChnCapReport);
        this->columncodes = (gcnew ::System::Data::DataColumn(L"codes", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncodes);
        this->columnCommandClass_Id = (gcnew ::System::Data::DataColumn(L"CommandClass_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnCommandClass_Id);
        this->columnProduct_Id = (gcnew ::System::Data::DataColumn(L"Product_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnProduct_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnCommandClass_Id}, 
                true)));
        this->columnid->AllowDBNull = false;
        this->columnid->Namespace = L"";
        this->columnaction->Namespace = L"";
        this->columnbase->Namespace = L"";
        this->columnoverride_precision->Namespace = L"";
        this->columnscenecount->Namespace = L"";
        this->columncreate_vars->Namespace = L"";
        this->columnname->Namespace = L"";
        this->columnsetasreport->Namespace = L"";
        this->columnignoremapping->Namespace = L"";
        this->columngetsupported->Namespace = L"";
        this->columnclassgetsupported->Namespace = L"";
        this->columncoloridxbug->Namespace = L"";
        this->columnforceUniqueEndpoints->Namespace = L"";
        this->columnversion->Namespace = L"";
        this->columnrequest_flags->Namespace = L"";
        this->columnendpoints->Namespace = L"";
        this->columnmapping->Namespace = L"";
        this->columnignoreUnsolicitedMultiChnCapReport->Namespace = L"";
        this->columncodes->Namespace = L"";
        this->columnCommandClass_Id->AutoIncrement = true;
        this->columnCommandClass_Id->AllowDBNull = false;
        this->columnCommandClass_Id->Unique = true;
    }
    
    inline OpenZWave_WinMD::NewDataSet::CommandClassRow^  NewDataSet::CommandClassDataTable::NewCommandClassRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::CommandClassRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::CommandClassDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::CommandClassRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::CommandClassDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::CommandClassRow::typeid;
    }
    
    inline ::System::Void NewDataSet::CommandClassDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->CommandClassRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::CommandClassRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::CommandClassRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::CommandClassDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->CommandClassRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::CommandClassRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::CommandClassRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::CommandClassDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->CommandClassRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::CommandClassRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::CommandClassRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::CommandClassDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->CommandClassRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::CommandClassRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::CommandClassRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::CommandClassDataTable::RemoveCommandClassRow(OpenZWave_WinMD::NewDataSet::CommandClassRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::CommandClassDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"CommandClassDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::InstanceDataTable::InstanceDataTable() {
        this->TableName = L"Instance";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::InstanceDataTable::InstanceDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::InstanceDataTable::InstanceDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::InstanceDataTable::indexColumn::get() {
        return this->columnindex;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::InstanceDataTable::CommandClass_IdColumn::get() {
        return this->columnCommandClass_Id;
    }
    
    inline ::System::Int32 NewDataSet::InstanceDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::InstanceRow^  NewDataSet::InstanceDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::InstanceRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::InstanceDataTable::AddInstanceRow(OpenZWave_WinMD::NewDataSet::InstanceRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::InstanceRow^  NewDataSet::InstanceDataTable::AddInstanceRow(System::String^  index, 
                OpenZWave_WinMD::NewDataSet::CommandClassRow^  parentCommandClassRowByCommandClass_Instance) {
        OpenZWave_WinMD::NewDataSet::InstanceRow^  rowInstanceRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::InstanceRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {index, nullptr};
        if (parentCommandClassRowByCommandClass_Instance != nullptr) {
            columnValuesArray[1] = parentCommandClassRowByCommandClass_Instance[19];
        }
        rowInstanceRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowInstanceRow);
        return rowInstanceRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::InstanceDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::InstanceDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::InstanceDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::InstanceDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::InstanceDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::InstanceDataTable());
    }
    
    inline ::System::Void NewDataSet::InstanceDataTable::InitVars() {
        this->columnindex = __super::Columns[L"index"];
        this->columnCommandClass_Id = __super::Columns[L"CommandClass_Id"];
    }
    
    inline ::System::Void NewDataSet::InstanceDataTable::InitClass() {
        this->columnindex = (gcnew ::System::Data::DataColumn(L"index", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnindex);
        this->columnCommandClass_Id = (gcnew ::System::Data::DataColumn(L"CommandClass_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnCommandClass_Id);
        this->columnindex->AllowDBNull = false;
        this->columnindex->Namespace = L"";
    }
    
    inline OpenZWave_WinMD::NewDataSet::InstanceRow^  NewDataSet::InstanceDataTable::NewInstanceRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::InstanceRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::InstanceDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::InstanceRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::InstanceDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::InstanceRow::typeid;
    }
    
    inline ::System::Void NewDataSet::InstanceDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->InstanceRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::InstanceRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::InstanceRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::InstanceDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->InstanceRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::InstanceRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::InstanceRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::InstanceDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->InstanceRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::InstanceRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::InstanceRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::InstanceDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->InstanceRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::InstanceRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::InstanceRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::InstanceDataTable::RemoveInstanceRow(OpenZWave_WinMD::NewDataSet::InstanceRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::InstanceDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"InstanceDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::AssociationsDataTable::AssociationsDataTable() {
        this->TableName = L"Associations";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::AssociationsDataTable::AssociationsDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::AssociationsDataTable::AssociationsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::AssociationsDataTable::num_groupsColumn::get() {
        return this->columnnum_groups;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::AssociationsDataTable::Associations_IdColumn::get() {
        return this->columnAssociations_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::AssociationsDataTable::CommandClass_IdColumn::get() {
        return this->columnCommandClass_Id;
    }
    
    inline ::System::Int32 NewDataSet::AssociationsDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::AssociationsRow^  NewDataSet::AssociationsDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::AssociationsRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::AssociationsDataTable::AddAssociationsRow(OpenZWave_WinMD::NewDataSet::AssociationsRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::AssociationsRow^  NewDataSet::AssociationsDataTable::AddAssociationsRow(System::String^  num_groups, 
                OpenZWave_WinMD::NewDataSet::CommandClassRow^  parentCommandClassRowByCommandClass_Associations) {
        OpenZWave_WinMD::NewDataSet::AssociationsRow^  rowAssociationsRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::AssociationsRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {num_groups, nullptr, 
            nullptr};
        if (parentCommandClassRowByCommandClass_Associations != nullptr) {
            columnValuesArray[2] = parentCommandClassRowByCommandClass_Associations[19];
        }
        rowAssociationsRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowAssociationsRow);
        return rowAssociationsRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::AssociationsDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::AssociationsDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::AssociationsDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::AssociationsDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::AssociationsDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::AssociationsDataTable());
    }
    
    inline ::System::Void NewDataSet::AssociationsDataTable::InitVars() {
        this->columnnum_groups = __super::Columns[L"num_groups"];
        this->columnAssociations_Id = __super::Columns[L"Associations_Id"];
        this->columnCommandClass_Id = __super::Columns[L"CommandClass_Id"];
    }
    
    inline ::System::Void NewDataSet::AssociationsDataTable::InitClass() {
        this->columnnum_groups = (gcnew ::System::Data::DataColumn(L"num_groups", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnnum_groups);
        this->columnAssociations_Id = (gcnew ::System::Data::DataColumn(L"Associations_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnAssociations_Id);
        this->columnCommandClass_Id = (gcnew ::System::Data::DataColumn(L"CommandClass_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnCommandClass_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnAssociations_Id}, 
                true)));
        this->columnnum_groups->AllowDBNull = false;
        this->columnnum_groups->Namespace = L"";
        this->columnAssociations_Id->AutoIncrement = true;
        this->columnAssociations_Id->AllowDBNull = false;
        this->columnAssociations_Id->Unique = true;
    }
    
    inline OpenZWave_WinMD::NewDataSet::AssociationsRow^  NewDataSet::AssociationsDataTable::NewAssociationsRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::AssociationsRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::AssociationsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::AssociationsRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::AssociationsDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::AssociationsRow::typeid;
    }
    
    inline ::System::Void NewDataSet::AssociationsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->AssociationsRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::AssociationsRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::AssociationsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::AssociationsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->AssociationsRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::AssociationsRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::AssociationsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::AssociationsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->AssociationsRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::AssociationsRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::AssociationsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::AssociationsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->AssociationsRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::AssociationsRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::AssociationsRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::AssociationsDataTable::RemoveAssociationsRow(OpenZWave_WinMD::NewDataSet::AssociationsRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::AssociationsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"AssociationsDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::GroupDataTable::GroupDataTable() {
        this->TableName = L"Group";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::GroupDataTable::GroupDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::GroupDataTable::GroupDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::GroupDataTable::indexColumn::get() {
        return this->columnindex;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::GroupDataTable::max_associationsColumn::get() {
        return this->columnmax_associations;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::GroupDataTable::labelColumn::get() {
        return this->columnlabel;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::GroupDataTable::_autoColumn::get() {
        return this->column_auto;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::GroupDataTable::multiInstanceColumn::get() {
        return this->columnmultiInstance;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::GroupDataTable::write_onlyColumn::get() {
        return this->columnwrite_only;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::GroupDataTable::Group_IdColumn::get() {
        return this->columnGroup_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::GroupDataTable::Associations_IdColumn::get() {
        return this->columnAssociations_Id;
    }
    
    inline ::System::Int32 NewDataSet::GroupDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::GroupRow^  NewDataSet::GroupDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::GroupRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::GroupDataTable::AddGroupRow(OpenZWave_WinMD::NewDataSet::GroupRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::GroupRow^  NewDataSet::GroupDataTable::AddGroupRow(
                System::String^  index, 
                System::String^  max_associations, 
                System::String^  label, 
                System::String^  _auto, 
                System::String^  multiInstance, 
                System::String^  write_only, 
                OpenZWave_WinMD::NewDataSet::AssociationsRow^  parentAssociationsRowByAssociations_Group) {
        OpenZWave_WinMD::NewDataSet::GroupRow^  rowGroupRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::GroupRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(8) {index, max_associations, 
            label, _auto, multiInstance, write_only, nullptr, nullptr};
        if (parentAssociationsRowByAssociations_Group != nullptr) {
            columnValuesArray[7] = parentAssociationsRowByAssociations_Group[1];
        }
        rowGroupRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowGroupRow);
        return rowGroupRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::GroupDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::GroupDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::GroupDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::GroupDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::GroupDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::GroupDataTable());
    }
    
    inline ::System::Void NewDataSet::GroupDataTable::InitVars() {
        this->columnindex = __super::Columns[L"index"];
        this->columnmax_associations = __super::Columns[L"max_associations"];
        this->columnlabel = __super::Columns[L"label"];
        this->column_auto = __super::Columns[L"auto"];
        this->columnmultiInstance = __super::Columns[L"multiInstance"];
        this->columnwrite_only = __super::Columns[L"write_only"];
        this->columnGroup_Id = __super::Columns[L"Group_Id"];
        this->columnAssociations_Id = __super::Columns[L"Associations_Id"];
    }
    
    inline ::System::Void NewDataSet::GroupDataTable::InitClass() {
        this->columnindex = (gcnew ::System::Data::DataColumn(L"index", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnindex);
        this->columnmax_associations = (gcnew ::System::Data::DataColumn(L"max_associations", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmax_associations);
        this->columnlabel = (gcnew ::System::Data::DataColumn(L"label", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnlabel);
        this->column_auto = (gcnew ::System::Data::DataColumn(L"auto", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->column_auto);
        this->columnmultiInstance = (gcnew ::System::Data::DataColumn(L"multiInstance", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmultiInstance);
        this->columnwrite_only = (gcnew ::System::Data::DataColumn(L"write_only", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnwrite_only);
        this->columnGroup_Id = (gcnew ::System::Data::DataColumn(L"Group_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnGroup_Id);
        this->columnAssociations_Id = (gcnew ::System::Data::DataColumn(L"Associations_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnAssociations_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnGroup_Id}, 
                true)));
        this->columnindex->AllowDBNull = false;
        this->columnindex->Namespace = L"";
        this->columnmax_associations->AllowDBNull = false;
        this->columnmax_associations->Namespace = L"";
        this->columnlabel->AllowDBNull = false;
        this->columnlabel->Namespace = L"";
        this->column_auto->Namespace = L"";
        this->columnmultiInstance->Namespace = L"";
        this->columnwrite_only->Namespace = L"";
        this->columnGroup_Id->AutoIncrement = true;
        this->columnGroup_Id->AllowDBNull = false;
        this->columnGroup_Id->Unique = true;
    }
    
    inline OpenZWave_WinMD::NewDataSet::GroupRow^  NewDataSet::GroupDataTable::NewGroupRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::GroupRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::GroupDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::GroupRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::GroupDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::GroupRow::typeid;
    }
    
    inline ::System::Void NewDataSet::GroupDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->GroupRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::GroupRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::GroupRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::GroupDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->GroupRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::GroupRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::GroupRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::GroupDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->GroupRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::GroupRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::GroupRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::GroupDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->GroupRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::GroupRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::GroupRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::GroupDataTable::RemoveGroupRow(OpenZWave_WinMD::NewDataSet::GroupRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GroupDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"GroupDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::NodeDataTable::NodeDataTable() {
        this->TableName = L"Node";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::NodeDataTable::NodeDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::NodeDataTable::NodeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::NodeDataTable::idColumn::get() {
        return this->columnid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::NodeDataTable::Group_IdColumn::get() {
        return this->columnGroup_Id;
    }
    
    inline ::System::Int32 NewDataSet::NodeDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::NodeRow^  NewDataSet::NodeDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::NodeDataTable::AddNodeRow(OpenZWave_WinMD::NewDataSet::NodeRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::NodeRow^  NewDataSet::NodeDataTable::AddNodeRow(System::String^  id, OpenZWave_WinMD::NewDataSet::GroupRow^  parentGroupRowByGroup_Node) {
        OpenZWave_WinMD::NewDataSet::NodeRow^  rowNodeRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {id, nullptr};
        if (parentGroupRowByGroup_Node != nullptr) {
            columnValuesArray[1] = parentGroupRowByGroup_Node[6];
        }
        rowNodeRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowNodeRow);
        return rowNodeRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::NodeDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::NodeDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::NodeDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::NodeDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::NodeDataTable());
    }
    
    inline ::System::Void NewDataSet::NodeDataTable::InitVars() {
        this->columnid = __super::Columns[L"id"];
        this->columnGroup_Id = __super::Columns[L"Group_Id"];
    }
    
    inline ::System::Void NewDataSet::NodeDataTable::InitClass() {
        this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnid);
        this->columnGroup_Id = (gcnew ::System::Data::DataColumn(L"Group_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnGroup_Id);
        this->columnid->AllowDBNull = false;
        this->columnid->Namespace = L"";
    }
    
    inline OpenZWave_WinMD::NewDataSet::NodeRow^  NewDataSet::NodeDataTable::NewNodeRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::NodeDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::NodeRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::NodeDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::NodeRow::typeid;
    }
    
    inline ::System::Void NewDataSet::NodeDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->NodeRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::NodeRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::NodeDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->NodeRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::NodeRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::NodeDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->NodeRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::NodeRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::NodeDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->NodeRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::NodeRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::NodeDataTable::RemoveNodeRow(OpenZWave_WinMD::NewDataSet::NodeRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::NodeDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"NodeDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ValueDataTable::ValueDataTable() {
        this->TableName = L"Value";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::ValueDataTable::ValueDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::ValueDataTable::ValueDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ValueDataTable::typeColumn::get() {
        return this->columntype;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ValueDataTable::sizeColumn::get() {
        return this->columnsize;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ValueDataTable::indexColumn::get() {
        return this->columnindex;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ValueDataTable::genreColumn::get() {
        return this->columngenre;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ValueDataTable::labelColumn::get() {
        return this->columnlabel;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ValueDataTable::unitsColumn::get() {
        return this->columnunits;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ValueDataTable::minColumn::get() {
        return this->columnmin;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ValueDataTable::maxColumn::get() {
        return this->columnmax;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ValueDataTable::_valueColumn::get() {
        return this->column_value;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ValueDataTable::lengthColumn::get() {
        return this->columnlength;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ValueDataTable::read_onlyColumn::get() {
        return this->columnread_only;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ValueDataTable::write_onlyColumn::get() {
        return this->columnwrite_only;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ValueDataTable::verify_changesColumn::get() {
        return this->columnverify_changes;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ValueDataTable::affectsColumn::get() {
        return this->columnaffects;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ValueDataTable::instanceColumn::get() {
        return this->columninstance;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ValueDataTable::Value_IdColumn::get() {
        return this->columnValue_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ValueDataTable::CommandClass_IdColumn::get() {
        return this->columnCommandClass_Id;
    }
    
    inline ::System::Int32 NewDataSet::ValueDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ValueRow^  NewDataSet::ValueDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ValueRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::ValueDataTable::AddValueRow(OpenZWave_WinMD::NewDataSet::ValueRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::ValueRow^  NewDataSet::ValueDataTable::AddValueRow(
                System::String^  type, 
                System::String^  size, 
                System::String^  index, 
                System::String^  genre, 
                System::String^  label, 
                System::String^  units, 
                System::String^  min, 
                System::String^  max, 
                System::String^  _value, 
                System::String^  length, 
                System::String^  read_only, 
                System::String^  write_only, 
                System::String^  verify_changes, 
                System::String^  affects, 
                System::String^  instance, 
                OpenZWave_WinMD::NewDataSet::CommandClassRow^  parentCommandClassRowByCommandClass_Value) {
        OpenZWave_WinMD::NewDataSet::ValueRow^  rowValueRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ValueRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(17) {type, size, index, 
            genre, label, units, min, max, _value, length, read_only, write_only, verify_changes, affects, instance, nullptr, nullptr};
        if (parentCommandClassRowByCommandClass_Value != nullptr) {
            columnValuesArray[16] = parentCommandClassRowByCommandClass_Value[19];
        }
        rowValueRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowValueRow);
        return rowValueRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::ValueDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ValueDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::ValueDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ValueDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ValueDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::ValueDataTable());
    }
    
    inline ::System::Void NewDataSet::ValueDataTable::InitVars() {
        this->columntype = __super::Columns[L"type"];
        this->columnsize = __super::Columns[L"size"];
        this->columnindex = __super::Columns[L"index"];
        this->columngenre = __super::Columns[L"genre"];
        this->columnlabel = __super::Columns[L"label"];
        this->columnunits = __super::Columns[L"units"];
        this->columnmin = __super::Columns[L"min"];
        this->columnmax = __super::Columns[L"max"];
        this->column_value = __super::Columns[L"value"];
        this->columnlength = __super::Columns[L"length"];
        this->columnread_only = __super::Columns[L"read_only"];
        this->columnwrite_only = __super::Columns[L"write_only"];
        this->columnverify_changes = __super::Columns[L"verify_changes"];
        this->columnaffects = __super::Columns[L"affects"];
        this->columninstance = __super::Columns[L"instance"];
        this->columnValue_Id = __super::Columns[L"Value_Id"];
        this->columnCommandClass_Id = __super::Columns[L"CommandClass_Id"];
    }
    
    inline ::System::Void NewDataSet::ValueDataTable::InitClass() {
        this->columntype = (gcnew ::System::Data::DataColumn(L"type", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntype);
        this->columnsize = (gcnew ::System::Data::DataColumn(L"size", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnsize);
        this->columnindex = (gcnew ::System::Data::DataColumn(L"index", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnindex);
        this->columngenre = (gcnew ::System::Data::DataColumn(L"genre", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columngenre);
        this->columnlabel = (gcnew ::System::Data::DataColumn(L"label", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnlabel);
        this->columnunits = (gcnew ::System::Data::DataColumn(L"units", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnunits);
        this->columnmin = (gcnew ::System::Data::DataColumn(L"min", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmin);
        this->columnmax = (gcnew ::System::Data::DataColumn(L"max", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmax);
        this->column_value = (gcnew ::System::Data::DataColumn(L"value", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->column_value);
        this->columnlength = (gcnew ::System::Data::DataColumn(L"length", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnlength);
        this->columnread_only = (gcnew ::System::Data::DataColumn(L"read_only", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnread_only);
        this->columnwrite_only = (gcnew ::System::Data::DataColumn(L"write_only", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnwrite_only);
        this->columnverify_changes = (gcnew ::System::Data::DataColumn(L"verify_changes", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnverify_changes);
        this->columnaffects = (gcnew ::System::Data::DataColumn(L"affects", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnaffects);
        this->columninstance = (gcnew ::System::Data::DataColumn(L"instance", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columninstance);
        this->columnValue_Id = (gcnew ::System::Data::DataColumn(L"Value_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnValue_Id);
        this->columnCommandClass_Id = (gcnew ::System::Data::DataColumn(L"CommandClass_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnCommandClass_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnValue_Id}, 
                true)));
        this->columntype->AllowDBNull = false;
        this->columntype->Namespace = L"";
        this->columnsize->Namespace = L"";
        this->columnindex->AllowDBNull = false;
        this->columnindex->Namespace = L"";
        this->columngenre->AllowDBNull = false;
        this->columngenre->Namespace = L"";
        this->columnlabel->AllowDBNull = false;
        this->columnlabel->Namespace = L"";
        this->columnunits->Namespace = L"";
        this->columnmin->Namespace = L"";
        this->columnmax->Namespace = L"";
        this->column_value->Namespace = L"";
        this->columnlength->Namespace = L"";
        this->columnread_only->Namespace = L"";
        this->columnwrite_only->Namespace = L"";
        this->columnverify_changes->Namespace = L"";
        this->columnaffects->Namespace = L"";
        this->columninstance->Namespace = L"";
        this->columnValue_Id->AutoIncrement = true;
        this->columnValue_Id->AllowDBNull = false;
        this->columnValue_Id->Unique = true;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ValueRow^  NewDataSet::ValueDataTable::NewValueRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ValueRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::ValueDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::ValueRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::ValueDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::ValueRow::typeid;
    }
    
    inline ::System::Void NewDataSet::ValueDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ValueRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::ValueRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ValueRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ValueDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ValueRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::ValueRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ValueRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ValueDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ValueRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::ValueRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ValueRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ValueDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ValueRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::ValueRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ValueRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ValueDataTable::RemoveValueRow(OpenZWave_WinMD::NewDataSet::ValueRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ValueDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ValueDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::HelpDataTable::HelpDataTable() {
        this->TableName = L"Help";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::HelpDataTable::HelpDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::HelpDataTable::HelpDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::HelpDataTable::Value_IdColumn::get() {
        return this->columnValue_Id;
    }
    
    inline ::System::Int32 NewDataSet::HelpDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::HelpRow^  NewDataSet::HelpDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::HelpRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::HelpDataTable::AddHelpRow(OpenZWave_WinMD::NewDataSet::HelpRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::HelpRow^  NewDataSet::HelpDataTable::AddHelpRow(OpenZWave_WinMD::NewDataSet::ValueRow^  parentValueRowByValue_Help) {
        OpenZWave_WinMD::NewDataSet::HelpRow^  rowHelpRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::HelpRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {nullptr};
        if (parentValueRowByValue_Help != nullptr) {
            columnValuesArray[0] = parentValueRowByValue_Help[15];
        }
        rowHelpRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowHelpRow);
        return rowHelpRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::HelpDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::HelpDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::HelpDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::HelpDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::HelpDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::HelpDataTable());
    }
    
    inline ::System::Void NewDataSet::HelpDataTable::InitVars() {
        this->columnValue_Id = __super::Columns[L"Value_Id"];
    }
    
    inline ::System::Void NewDataSet::HelpDataTable::InitClass() {
        this->columnValue_Id = (gcnew ::System::Data::DataColumn(L"Value_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnValue_Id);
    }
    
    inline OpenZWave_WinMD::NewDataSet::HelpRow^  NewDataSet::HelpDataTable::NewHelpRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::HelpRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::HelpDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::HelpRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::HelpDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::HelpRow::typeid;
    }
    
    inline ::System::Void NewDataSet::HelpDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->HelpRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::HelpRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::HelpRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::HelpDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->HelpRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::HelpRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::HelpRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::HelpDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->HelpRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::HelpRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::HelpRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::HelpDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->HelpRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::HelpRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::HelpRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::HelpDataTable::RemoveHelpRow(OpenZWave_WinMD::NewDataSet::HelpRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::HelpDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"HelpDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::_ItemDataTable::_ItemDataTable() {
        this->TableName = L"Item";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::_ItemDataTable::_ItemDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::_ItemDataTable::_ItemDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_ItemDataTable::labelColumn::get() {
        return this->columnlabel;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_ItemDataTable::_valueColumn::get() {
        return this->column_value;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_ItemDataTable::Value_IdColumn::get() {
        return this->columnValue_Id;
    }
    
    inline ::System::Int32 NewDataSet::_ItemDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::_ItemRow^  NewDataSet::_ItemDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::_ItemRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::_ItemDataTable::Add_ItemRow(OpenZWave_WinMD::NewDataSet::_ItemRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::_ItemRow^  NewDataSet::_ItemDataTable::Add_ItemRow(System::String^  label, System::String^  _value, 
                OpenZWave_WinMD::NewDataSet::ValueRow^  parentValueRowByValue_Item) {
        OpenZWave_WinMD::NewDataSet::_ItemRow^  row_ItemRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::_ItemRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {label, _value, nullptr};
        if (parentValueRowByValue_Item != nullptr) {
            columnValuesArray[2] = parentValueRowByValue_Item[15];
        }
        row_ItemRow->ItemArray = columnValuesArray;
        this->Rows->Add(row_ItemRow);
        return row_ItemRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::_ItemDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::_ItemDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::_ItemDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::_ItemDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::_ItemDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::_ItemDataTable());
    }
    
    inline ::System::Void NewDataSet::_ItemDataTable::InitVars() {
        this->columnlabel = __super::Columns[L"label"];
        this->column_value = __super::Columns[L"value"];
        this->columnValue_Id = __super::Columns[L"Value_Id"];
    }
    
    inline ::System::Void NewDataSet::_ItemDataTable::InitClass() {
        this->columnlabel = (gcnew ::System::Data::DataColumn(L"label", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnlabel);
        this->column_value = (gcnew ::System::Data::DataColumn(L"value", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->column_value);
        this->columnValue_Id = (gcnew ::System::Data::DataColumn(L"Value_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnValue_Id);
        this->columnlabel->AllowDBNull = false;
        this->columnlabel->Namespace = L"";
        this->column_value->AllowDBNull = false;
        this->column_value->Namespace = L"";
    }
    
    inline OpenZWave_WinMD::NewDataSet::_ItemRow^  NewDataSet::_ItemDataTable::New_ItemRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::_ItemRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::_ItemDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::_ItemRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::_ItemDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::_ItemRow::typeid;
    }
    
    inline ::System::Void NewDataSet::_ItemDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->_ItemRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::_ItemRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::_ItemRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_ItemDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->_ItemRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::_ItemRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::_ItemRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_ItemDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->_ItemRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::_ItemRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::_ItemRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_ItemDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->_ItemRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::_ItemRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::_ItemRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_ItemDataTable::Remove_ItemRow(OpenZWave_WinMD::NewDataSet::_ItemRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::_ItemDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"_ItemDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::TriggerRefreshValueDataTable::TriggerRefreshValueDataTable() {
        this->TableName = L"TriggerRefreshValue";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::TriggerRefreshValueDataTable::TriggerRefreshValueDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::TriggerRefreshValueDataTable::TriggerRefreshValueDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TriggerRefreshValueDataTable::GenreColumn::get() {
        return this->columnGenre;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TriggerRefreshValueDataTable::InstanceColumn::get() {
        return this->columnInstance;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TriggerRefreshValueDataTable::IndexColumn::get() {
        return this->columnIndex;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TriggerRefreshValueDataTable::TriggerRefreshValue_IdColumn::get() {
        return this->columnTriggerRefreshValue_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::TriggerRefreshValueDataTable::CommandClass_IdColumn::get() {
        return this->columnCommandClass_Id;
    }
    
    inline ::System::Int32 NewDataSet::TriggerRefreshValueDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  NewDataSet::TriggerRefreshValueDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::TriggerRefreshValueDataTable::AddTriggerRefreshValueRow(OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  NewDataSet::TriggerRefreshValueDataTable::AddTriggerRefreshValueRow(
                System::String^  Genre, System::String^  Instance, System::String^  Index, OpenZWave_WinMD::NewDataSet::CommandClassRow^  parentCommandClassRowByCommandClass_TriggerRefreshValue) {
        OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  rowTriggerRefreshValueRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {Genre, Instance, Index, 
            nullptr, nullptr};
        if (parentCommandClassRowByCommandClass_TriggerRefreshValue != nullptr) {
            columnValuesArray[4] = parentCommandClassRowByCommandClass_TriggerRefreshValue[19];
        }
        rowTriggerRefreshValueRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowTriggerRefreshValueRow);
        return rowTriggerRefreshValueRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::TriggerRefreshValueDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::TriggerRefreshValueDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::TriggerRefreshValueDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::TriggerRefreshValueDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::TriggerRefreshValueDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::TriggerRefreshValueDataTable());
    }
    
    inline ::System::Void NewDataSet::TriggerRefreshValueDataTable::InitVars() {
        this->columnGenre = __super::Columns[L"Genre"];
        this->columnInstance = __super::Columns[L"Instance"];
        this->columnIndex = __super::Columns[L"Index"];
        this->columnTriggerRefreshValue_Id = __super::Columns[L"TriggerRefreshValue_Id"];
        this->columnCommandClass_Id = __super::Columns[L"CommandClass_Id"];
    }
    
    inline ::System::Void NewDataSet::TriggerRefreshValueDataTable::InitClass() {
        this->columnGenre = (gcnew ::System::Data::DataColumn(L"Genre", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnGenre);
        this->columnInstance = (gcnew ::System::Data::DataColumn(L"Instance", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnInstance);
        this->columnIndex = (gcnew ::System::Data::DataColumn(L"Index", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnIndex);
        this->columnTriggerRefreshValue_Id = (gcnew ::System::Data::DataColumn(L"TriggerRefreshValue_Id", ::System::Int32::typeid, 
            nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTriggerRefreshValue_Id);
        this->columnCommandClass_Id = (gcnew ::System::Data::DataColumn(L"CommandClass_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnCommandClass_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnTriggerRefreshValue_Id}, 
                true)));
        this->columnGenre->AllowDBNull = false;
        this->columnGenre->Namespace = L"";
        this->columnInstance->AllowDBNull = false;
        this->columnInstance->Namespace = L"";
        this->columnIndex->AllowDBNull = false;
        this->columnIndex->Namespace = L"";
        this->columnTriggerRefreshValue_Id->AutoIncrement = true;
        this->columnTriggerRefreshValue_Id->AllowDBNull = false;
        this->columnTriggerRefreshValue_Id->Unique = true;
    }
    
    inline OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  NewDataSet::TriggerRefreshValueDataTable::NewTriggerRefreshValueRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::TriggerRefreshValueDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::TriggerRefreshValueDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow::typeid;
    }
    
    inline ::System::Void NewDataSet::TriggerRefreshValueDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->TriggerRefreshValueRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TriggerRefreshValueDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->TriggerRefreshValueRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TriggerRefreshValueDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->TriggerRefreshValueRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TriggerRefreshValueDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->TriggerRefreshValueRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::TriggerRefreshValueDataTable::RemoveTriggerRefreshValueRow(OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::TriggerRefreshValueDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"TriggerRefreshValueDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::RefreshClassValueDataTable::RefreshClassValueDataTable() {
        this->TableName = L"RefreshClassValue";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::RefreshClassValueDataTable::RefreshClassValueDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::RefreshClassValueDataTable::RefreshClassValueDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::RefreshClassValueDataTable::CommandClassColumn::get() {
        return this->columnCommandClass;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::RefreshClassValueDataTable::RequestFlagsColumn::get() {
        return this->columnRequestFlags;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::RefreshClassValueDataTable::InstanceColumn::get() {
        return this->columnInstance;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::RefreshClassValueDataTable::IndexColumn::get() {
        return this->columnIndex;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::RefreshClassValueDataTable::TriggerRefreshValue_IdColumn::get() {
        return this->columnTriggerRefreshValue_Id;
    }
    
    inline ::System::Int32 NewDataSet::RefreshClassValueDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  NewDataSet::RefreshClassValueDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::RefreshClassValueDataTable::AddRefreshClassValueRow(OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  NewDataSet::RefreshClassValueDataTable::AddRefreshClassValueRow(
                System::String^  CommandClass, System::String^  RequestFlags, System::String^  Instance, System::String^  Index, OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  parentTriggerRefreshValueRowByTriggerRefreshValue_RefreshClassValue) {
        OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  rowRefreshClassValueRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {CommandClass, RequestFlags, 
            Instance, Index, nullptr};
        if (parentTriggerRefreshValueRowByTriggerRefreshValue_RefreshClassValue != nullptr) {
            columnValuesArray[4] = parentTriggerRefreshValueRowByTriggerRefreshValue_RefreshClassValue[3];
        }
        rowRefreshClassValueRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowRefreshClassValueRow);
        return rowRefreshClassValueRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::RefreshClassValueDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::RefreshClassValueDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::RefreshClassValueDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::RefreshClassValueDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::RefreshClassValueDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::RefreshClassValueDataTable());
    }
    
    inline ::System::Void NewDataSet::RefreshClassValueDataTable::InitVars() {
        this->columnCommandClass = __super::Columns[L"CommandClass"];
        this->columnRequestFlags = __super::Columns[L"RequestFlags"];
        this->columnInstance = __super::Columns[L"Instance"];
        this->columnIndex = __super::Columns[L"Index"];
        this->columnTriggerRefreshValue_Id = __super::Columns[L"TriggerRefreshValue_Id"];
    }
    
    inline ::System::Void NewDataSet::RefreshClassValueDataTable::InitClass() {
        this->columnCommandClass = (gcnew ::System::Data::DataColumn(L"CommandClass", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnCommandClass);
        this->columnRequestFlags = (gcnew ::System::Data::DataColumn(L"RequestFlags", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnRequestFlags);
        this->columnInstance = (gcnew ::System::Data::DataColumn(L"Instance", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnInstance);
        this->columnIndex = (gcnew ::System::Data::DataColumn(L"Index", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnIndex);
        this->columnTriggerRefreshValue_Id = (gcnew ::System::Data::DataColumn(L"TriggerRefreshValue_Id", ::System::Int32::typeid, 
            nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnTriggerRefreshValue_Id);
        this->columnCommandClass->AllowDBNull = false;
        this->columnCommandClass->Namespace = L"";
        this->columnRequestFlags->AllowDBNull = false;
        this->columnRequestFlags->Namespace = L"";
        this->columnInstance->AllowDBNull = false;
        this->columnInstance->Namespace = L"";
        this->columnIndex->AllowDBNull = false;
        this->columnIndex->Namespace = L"";
    }
    
    inline OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  NewDataSet::RefreshClassValueDataTable::NewRefreshClassValueRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::RefreshClassValueDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::RefreshClassValueRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::RefreshClassValueDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::RefreshClassValueRow::typeid;
    }
    
    inline ::System::Void NewDataSet::RefreshClassValueDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->RefreshClassValueRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::RefreshClassValueRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::RefreshClassValueDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->RefreshClassValueRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::RefreshClassValueRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::RefreshClassValueDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->RefreshClassValueRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::RefreshClassValueRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::RefreshClassValueDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->RefreshClassValueRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::RefreshClassValueRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::RefreshClassValueDataTable::RemoveRefreshClassValueRow(OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::RefreshClassValueDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"RefreshClassValueDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::SupportedModesDataTable::SupportedModesDataTable() {
        this->TableName = L"SupportedModes";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::SupportedModesDataTable::SupportedModesDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::SupportedModesDataTable::SupportedModesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SupportedModesDataTable::SupportedModes_IdColumn::get() {
        return this->columnSupportedModes_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SupportedModesDataTable::CommandClass_IdColumn::get() {
        return this->columnCommandClass_Id;
    }
    
    inline ::System::Int32 NewDataSet::SupportedModesDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::SupportedModesRow^  NewDataSet::SupportedModesDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SupportedModesRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::SupportedModesDataTable::AddSupportedModesRow(OpenZWave_WinMD::NewDataSet::SupportedModesRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::SupportedModesRow^  NewDataSet::SupportedModesDataTable::AddSupportedModesRow(OpenZWave_WinMD::NewDataSet::CommandClassRow^  parentCommandClassRowByCommandClass_SupportedModes) {
        OpenZWave_WinMD::NewDataSet::SupportedModesRow^  rowSupportedModesRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SupportedModesRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
        if (parentCommandClassRowByCommandClass_SupportedModes != nullptr) {
            columnValuesArray[1] = parentCommandClassRowByCommandClass_SupportedModes[19];
        }
        rowSupportedModesRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowSupportedModesRow);
        return rowSupportedModesRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::SupportedModesDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::SupportedModesDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::SupportedModesDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SupportedModesDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::SupportedModesDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::SupportedModesDataTable());
    }
    
    inline ::System::Void NewDataSet::SupportedModesDataTable::InitVars() {
        this->columnSupportedModes_Id = __super::Columns[L"SupportedModes_Id"];
        this->columnCommandClass_Id = __super::Columns[L"CommandClass_Id"];
    }
    
    inline ::System::Void NewDataSet::SupportedModesDataTable::InitClass() {
        this->columnSupportedModes_Id = (gcnew ::System::Data::DataColumn(L"SupportedModes_Id", ::System::Int32::typeid, nullptr, 
            ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnSupportedModes_Id);
        this->columnCommandClass_Id = (gcnew ::System::Data::DataColumn(L"CommandClass_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnCommandClass_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnSupportedModes_Id}, 
                true)));
        this->columnSupportedModes_Id->AutoIncrement = true;
        this->columnSupportedModes_Id->AllowDBNull = false;
        this->columnSupportedModes_Id->Unique = true;
    }
    
    inline OpenZWave_WinMD::NewDataSet::SupportedModesRow^  NewDataSet::SupportedModesDataTable::NewSupportedModesRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SupportedModesRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::SupportedModesDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::SupportedModesRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::SupportedModesDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::SupportedModesRow::typeid;
    }
    
    inline ::System::Void NewDataSet::SupportedModesDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->SupportedModesRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::SupportedModesRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::SupportedModesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::SupportedModesDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->SupportedModesRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::SupportedModesRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::SupportedModesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::SupportedModesDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->SupportedModesRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::SupportedModesRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::SupportedModesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::SupportedModesDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->SupportedModesRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::SupportedModesRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::SupportedModesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::SupportedModesDataTable::RemoveSupportedModesRow(OpenZWave_WinMD::NewDataSet::SupportedModesRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::SupportedModesDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"SupportedModesDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ModeDataTable::ModeDataTable() {
        this->TableName = L"Mode";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::ModeDataTable::ModeDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::ModeDataTable::ModeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ModeDataTable::indexColumn::get() {
        return this->columnindex;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ModeDataTable::labelColumn::get() {
        return this->columnlabel;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ModeDataTable::SupportedModes_IdColumn::get() {
        return this->columnSupportedModes_Id;
    }
    
    inline ::System::Int32 NewDataSet::ModeDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ModeRow^  NewDataSet::ModeDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ModeRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::ModeDataTable::AddModeRow(OpenZWave_WinMD::NewDataSet::ModeRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::ModeRow^  NewDataSet::ModeDataTable::AddModeRow(System::String^  index, System::String^  label, 
                OpenZWave_WinMD::NewDataSet::SupportedModesRow^  parentSupportedModesRowBySupportedModes_Mode) {
        OpenZWave_WinMD::NewDataSet::ModeRow^  rowModeRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ModeRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {index, label, nullptr};
        if (parentSupportedModesRowBySupportedModes_Mode != nullptr) {
            columnValuesArray[2] = parentSupportedModesRowBySupportedModes_Mode[0];
        }
        rowModeRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowModeRow);
        return rowModeRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::ModeDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ModeDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::ModeDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ModeDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ModeDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::ModeDataTable());
    }
    
    inline ::System::Void NewDataSet::ModeDataTable::InitVars() {
        this->columnindex = __super::Columns[L"index"];
        this->columnlabel = __super::Columns[L"label"];
        this->columnSupportedModes_Id = __super::Columns[L"SupportedModes_Id"];
    }
    
    inline ::System::Void NewDataSet::ModeDataTable::InitClass() {
        this->columnindex = (gcnew ::System::Data::DataColumn(L"index", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnindex);
        this->columnlabel = (gcnew ::System::Data::DataColumn(L"label", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnlabel);
        this->columnSupportedModes_Id = (gcnew ::System::Data::DataColumn(L"SupportedModes_Id", ::System::Int32::typeid, nullptr, 
            ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnSupportedModes_Id);
        this->columnindex->AllowDBNull = false;
        this->columnindex->Namespace = L"";
        this->columnlabel->AllowDBNull = false;
        this->columnlabel->Namespace = L"";
    }
    
    inline OpenZWave_WinMD::NewDataSet::ModeRow^  NewDataSet::ModeDataTable::NewModeRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ModeRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::ModeDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::ModeRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::ModeDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::ModeRow::typeid;
    }
    
    inline ::System::Void NewDataSet::ModeDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ModeRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::ModeRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ModeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ModeDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ModeRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::ModeRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ModeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ModeDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ModeRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::ModeRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ModeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ModeDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ModeRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::ModeRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ModeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ModeDataTable::RemoveModeRow(OpenZWave_WinMD::NewDataSet::ModeRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ModeDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ModeDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::SensorMapDataTable::SensorMapDataTable() {
        this->TableName = L"SensorMap";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::SensorMapDataTable::SensorMapDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::SensorMapDataTable::SensorMapDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SensorMapDataTable::indexColumn::get() {
        return this->columnindex;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SensorMapDataTable::typeColumn::get() {
        return this->columntype;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::SensorMapDataTable::CommandClass_IdColumn::get() {
        return this->columnCommandClass_Id;
    }
    
    inline ::System::Int32 NewDataSet::SensorMapDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::SensorMapRow^  NewDataSet::SensorMapDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SensorMapRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::SensorMapDataTable::AddSensorMapRow(OpenZWave_WinMD::NewDataSet::SensorMapRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::SensorMapRow^  NewDataSet::SensorMapDataTable::AddSensorMapRow(System::String^  index, 
                System::String^  type, OpenZWave_WinMD::NewDataSet::CommandClassRow^  parentCommandClassRowByCommandClass_SensorMap) {
        OpenZWave_WinMD::NewDataSet::SensorMapRow^  rowSensorMapRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SensorMapRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {index, type, nullptr};
        if (parentCommandClassRowByCommandClass_SensorMap != nullptr) {
            columnValuesArray[2] = parentCommandClassRowByCommandClass_SensorMap[19];
        }
        rowSensorMapRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowSensorMapRow);
        return rowSensorMapRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::SensorMapDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::SensorMapDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::SensorMapDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SensorMapDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::SensorMapDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::SensorMapDataTable());
    }
    
    inline ::System::Void NewDataSet::SensorMapDataTable::InitVars() {
        this->columnindex = __super::Columns[L"index"];
        this->columntype = __super::Columns[L"type"];
        this->columnCommandClass_Id = __super::Columns[L"CommandClass_Id"];
    }
    
    inline ::System::Void NewDataSet::SensorMapDataTable::InitClass() {
        this->columnindex = (gcnew ::System::Data::DataColumn(L"index", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnindex);
        this->columntype = (gcnew ::System::Data::DataColumn(L"type", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntype);
        this->columnCommandClass_Id = (gcnew ::System::Data::DataColumn(L"CommandClass_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnCommandClass_Id);
        this->columnindex->AllowDBNull = false;
        this->columnindex->Namespace = L"";
        this->columntype->AllowDBNull = false;
        this->columntype->Namespace = L"";
    }
    
    inline OpenZWave_WinMD::NewDataSet::SensorMapRow^  NewDataSet::SensorMapDataTable::NewSensorMapRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SensorMapRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::SensorMapDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::SensorMapRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::SensorMapDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::SensorMapRow::typeid;
    }
    
    inline ::System::Void NewDataSet::SensorMapDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->SensorMapRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::SensorMapRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::SensorMapRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::SensorMapDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->SensorMapRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::SensorMapRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::SensorMapRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::SensorMapDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->SensorMapRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::SensorMapRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::SensorMapRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::SensorMapDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->SensorMapRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::SensorMapRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::SensorMapRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::SensorMapDataTable::RemoveSensorMapRow(OpenZWave_WinMD::NewDataSet::SensorMapRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::SensorMapDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"SensorMapDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ProductRow::ProductRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableProduct = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::ProductRow::Product_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableProduct->Product_IdColumn]));
    }
    inline System::Void NewDataSet::ProductRow::Product_Id::set(System::Int32 value) {
        this[this->tableProduct->Product_IdColumn] = value;
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::ProtocolRow^  >^  NewDataSet::ProductRow::GetProtocolRows() {
        if (this->Table->ChildRelations[L"Product_Protocol"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::ProtocolRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::ProtocolRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Product_Protocol"])));
        }
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::CommandClassRow^  >^  NewDataSet::ProductRow::GetCommandClassRows() {
        if (this->Table->ChildRelations[L"Product_CommandClass"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::CommandClassRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::CommandClassRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Product_CommandClass"])));
        }
    }
    
    
    inline NewDataSet::ProtocolRow::ProtocolRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableProtocol = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProtocolDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::ProtocolRow::nodeinfosupported::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableProtocol->nodeinfosupportedColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'nodeinfosupported\' in table \'Protocol\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ProtocolRow::nodeinfosupported::set(System::String^  value) {
        this[this->tableProtocol->nodeinfosupportedColumn] = value;
    }
    
    inline System::String^  NewDataSet::ProtocolRow::refreshonnodeinfoframe::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableProtocol->refreshonnodeinfoframeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'refreshonnodeinfoframe\' in table \'Protocol\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ProtocolRow::refreshonnodeinfoframe::set(System::String^  value) {
        this[this->tableProtocol->refreshonnodeinfoframeColumn] = value;
    }
    
    inline System::Int32 NewDataSet::ProtocolRow::Protocol_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableProtocol->Protocol_IdColumn]));
    }
    inline System::Void NewDataSet::ProtocolRow::Protocol_Id::set(System::Int32 value) {
        this[this->tableProtocol->Protocol_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::ProtocolRow::Product_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableProtocol->Product_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Product_Id\' in table \'Protocol\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ProtocolRow::Product_Id::set(System::Int32 value) {
        this[this->tableProtocol->Product_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProductRow^  NewDataSet::ProtocolRow::ProductRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Product_Protocol"])));
    }
    inline System::Void NewDataSet::ProtocolRow::ProductRow::set(OpenZWave_WinMD::NewDataSet::ProductRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Product_Protocol"]);
    }
    
    inline ::System::Boolean NewDataSet::ProtocolRow::IsnodeinfosupportedNull() {
        return this->IsNull(this->tableProtocol->nodeinfosupportedColumn);
    }
    
    inline ::System::Void NewDataSet::ProtocolRow::SetnodeinfosupportedNull() {
        this[this->tableProtocol->nodeinfosupportedColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ProtocolRow::IsrefreshonnodeinfoframeNull() {
        return this->IsNull(this->tableProtocol->refreshonnodeinfoframeColumn);
    }
    
    inline ::System::Void NewDataSet::ProtocolRow::SetrefreshonnodeinfoframeNull() {
        this[this->tableProtocol->refreshonnodeinfoframeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ProtocolRow::IsProduct_IdNull() {
        return this->IsNull(this->tableProtocol->Product_IdColumn);
    }
    
    inline ::System::Void NewDataSet::ProtocolRow::SetProduct_IdNull() {
        this[this->tableProtocol->Product_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::APIcallRow^  >^  NewDataSet::ProtocolRow::GetAPIcallRows() {
        if (this->Table->ChildRelations[L"Protocol_APIcall"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::APIcallRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::APIcallRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Protocol_APIcall"])));
        }
    }
    
    
    inline NewDataSet::APIcallRow::APIcallRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableAPIcall = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::APIcallDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::APIcallRow::function::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableAPIcall->functionColumn]));
    }
    inline System::Void NewDataSet::APIcallRow::function::set(System::String^  value) {
        this[this->tableAPIcall->functionColumn] = value;
    }
    
    inline System::String^  NewDataSet::APIcallRow::present::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableAPIcall->presentColumn]));
    }
    inline System::Void NewDataSet::APIcallRow::present::set(System::String^  value) {
        this[this->tableAPIcall->presentColumn] = value;
    }
    
    inline System::Int32 NewDataSet::APIcallRow::Protocol_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableAPIcall->Protocol_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Protocol_Id\' in table \'APIcall\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::APIcallRow::Protocol_Id::set(System::Int32 value) {
        this[this->tableAPIcall->Protocol_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProtocolRow^  NewDataSet::APIcallRow::ProtocolRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProtocolRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Protocol_APIcall"])));
    }
    inline System::Void NewDataSet::APIcallRow::ProtocolRow::set(OpenZWave_WinMD::NewDataSet::ProtocolRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Protocol_APIcall"]);
    }
    
    inline ::System::Boolean NewDataSet::APIcallRow::IsProtocol_IdNull() {
        return this->IsNull(this->tableAPIcall->Protocol_IdColumn);
    }
    
    inline ::System::Void NewDataSet::APIcallRow::SetProtocol_IdNull() {
        this[this->tableAPIcall->Protocol_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::CommandClassRow::CommandClassRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableCommandClass = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::CommandClassDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::CommandClassRow::id::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->idColumn]));
    }
    inline System::Void NewDataSet::CommandClassRow::id::set(System::String^  value) {
        this[this->tableCommandClass->idColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::action::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->actionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'action\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::action::set(System::String^  value) {
        this[this->tableCommandClass->actionColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::base::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->baseColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'base\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::base::set(System::String^  value) {
        this[this->tableCommandClass->baseColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::override_precision::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->override_precisionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'override_precision\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::override_precision::set(System::String^  value) {
        this[this->tableCommandClass->override_precisionColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::scenecount::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->scenecountColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'scenecount\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::scenecount::set(System::String^  value) {
        this[this->tableCommandClass->scenecountColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::create_vars::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->create_varsColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'create_vars\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::create_vars::set(System::String^  value) {
        this[this->tableCommandClass->create_varsColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::name::set(System::String^  value) {
        this[this->tableCommandClass->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::setasreport::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->setasreportColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'setasreport\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::setasreport::set(System::String^  value) {
        this[this->tableCommandClass->setasreportColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::ignoremapping::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->ignoremappingColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ignoremapping\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::ignoremapping::set(System::String^  value) {
        this[this->tableCommandClass->ignoremappingColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::getsupported::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->getsupportedColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'getsupported\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::getsupported::set(System::String^  value) {
        this[this->tableCommandClass->getsupportedColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::classgetsupported::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->classgetsupportedColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'classgetsupported\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::classgetsupported::set(System::String^  value) {
        this[this->tableCommandClass->classgetsupportedColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::coloridxbug::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->coloridxbugColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'coloridxbug\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::coloridxbug::set(System::String^  value) {
        this[this->tableCommandClass->coloridxbugColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::forceUniqueEndpoints::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->forceUniqueEndpointsColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'forceUniqueEndpoints\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::forceUniqueEndpoints::set(System::String^  value) {
        this[this->tableCommandClass->forceUniqueEndpointsColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::version::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->versionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'version\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::version::set(System::String^  value) {
        this[this->tableCommandClass->versionColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::request_flags::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->request_flagsColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'request_flags\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::request_flags::set(System::String^  value) {
        this[this->tableCommandClass->request_flagsColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::endpoints::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->endpointsColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'endpoints\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::endpoints::set(System::String^  value) {
        this[this->tableCommandClass->endpointsColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::mapping::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->mappingColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'mapping\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::mapping::set(System::String^  value) {
        this[this->tableCommandClass->mappingColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::ignoreUnsolicitedMultiChnCapReport::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->ignoreUnsolicitedMultiChnCapReportColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ignoreUnsolicitedMultiChnCapReport\' in table \'CommandClass\'" 
L" is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::ignoreUnsolicitedMultiChnCapReport::set(System::String^  value) {
        this[this->tableCommandClass->ignoreUnsolicitedMultiChnCapReportColumn] = value;
    }
    
    inline System::String^  NewDataSet::CommandClassRow::codes::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableCommandClass->codesColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'codes\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::codes::set(System::String^  value) {
        this[this->tableCommandClass->codesColumn] = value;
    }
    
    inline System::Int32 NewDataSet::CommandClassRow::CommandClass_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableCommandClass->CommandClass_IdColumn]));
    }
    inline System::Void NewDataSet::CommandClassRow::CommandClass_Id::set(System::Int32 value) {
        this[this->tableCommandClass->CommandClass_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::CommandClassRow::Product_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableCommandClass->Product_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Product_Id\' in table \'CommandClass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::CommandClassRow::Product_Id::set(System::Int32 value) {
        this[this->tableCommandClass->Product_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProductRow^  NewDataSet::CommandClassRow::ProductRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Product_CommandClass"])));
    }
    inline System::Void NewDataSet::CommandClassRow::ProductRow::set(OpenZWave_WinMD::NewDataSet::ProductRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Product_CommandClass"]);
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::IsactionNull() {
        return this->IsNull(this->tableCommandClass->actionColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::SetactionNull() {
        this[this->tableCommandClass->actionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::IsbaseNull() {
        return this->IsNull(this->tableCommandClass->baseColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::SetbaseNull() {
        this[this->tableCommandClass->baseColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::Isoverride_precisionNull() {
        return this->IsNull(this->tableCommandClass->override_precisionColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::Setoverride_precisionNull() {
        this[this->tableCommandClass->override_precisionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::IsscenecountNull() {
        return this->IsNull(this->tableCommandClass->scenecountColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::SetscenecountNull() {
        this[this->tableCommandClass->scenecountColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::Iscreate_varsNull() {
        return this->IsNull(this->tableCommandClass->create_varsColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::Setcreate_varsNull() {
        this[this->tableCommandClass->create_varsColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::IsnameNull() {
        return this->IsNull(this->tableCommandClass->nameColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::SetnameNull() {
        this[this->tableCommandClass->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::IssetasreportNull() {
        return this->IsNull(this->tableCommandClass->setasreportColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::SetsetasreportNull() {
        this[this->tableCommandClass->setasreportColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::IsignoremappingNull() {
        return this->IsNull(this->tableCommandClass->ignoremappingColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::SetignoremappingNull() {
        this[this->tableCommandClass->ignoremappingColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::IsgetsupportedNull() {
        return this->IsNull(this->tableCommandClass->getsupportedColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::SetgetsupportedNull() {
        this[this->tableCommandClass->getsupportedColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::IsclassgetsupportedNull() {
        return this->IsNull(this->tableCommandClass->classgetsupportedColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::SetclassgetsupportedNull() {
        this[this->tableCommandClass->classgetsupportedColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::IscoloridxbugNull() {
        return this->IsNull(this->tableCommandClass->coloridxbugColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::SetcoloridxbugNull() {
        this[this->tableCommandClass->coloridxbugColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::IsforceUniqueEndpointsNull() {
        return this->IsNull(this->tableCommandClass->forceUniqueEndpointsColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::SetforceUniqueEndpointsNull() {
        this[this->tableCommandClass->forceUniqueEndpointsColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::IsversionNull() {
        return this->IsNull(this->tableCommandClass->versionColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::SetversionNull() {
        this[this->tableCommandClass->versionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::Isrequest_flagsNull() {
        return this->IsNull(this->tableCommandClass->request_flagsColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::Setrequest_flagsNull() {
        this[this->tableCommandClass->request_flagsColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::IsendpointsNull() {
        return this->IsNull(this->tableCommandClass->endpointsColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::SetendpointsNull() {
        this[this->tableCommandClass->endpointsColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::IsmappingNull() {
        return this->IsNull(this->tableCommandClass->mappingColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::SetmappingNull() {
        this[this->tableCommandClass->mappingColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::IsignoreUnsolicitedMultiChnCapReportNull() {
        return this->IsNull(this->tableCommandClass->ignoreUnsolicitedMultiChnCapReportColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::SetignoreUnsolicitedMultiChnCapReportNull() {
        this[this->tableCommandClass->ignoreUnsolicitedMultiChnCapReportColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::IscodesNull() {
        return this->IsNull(this->tableCommandClass->codesColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::SetcodesNull() {
        this[this->tableCommandClass->codesColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::CommandClassRow::IsProduct_IdNull() {
        return this->IsNull(this->tableCommandClass->Product_IdColumn);
    }
    
    inline ::System::Void NewDataSet::CommandClassRow::SetProduct_IdNull() {
        this[this->tableCommandClass->Product_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::InstanceRow^  >^  NewDataSet::CommandClassRow::GetInstanceRows() {
        if (this->Table->ChildRelations[L"CommandClass_Instance"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::InstanceRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::InstanceRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CommandClass_Instance"])));
        }
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::AssociationsRow^  >^  NewDataSet::CommandClassRow::GetAssociationsRows() {
        if (this->Table->ChildRelations[L"CommandClass_Associations"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::AssociationsRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::AssociationsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CommandClass_Associations"])));
        }
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::ValueRow^  >^  NewDataSet::CommandClassRow::GetValueRows() {
        if (this->Table->ChildRelations[L"CommandClass_Value"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::ValueRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::ValueRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CommandClass_Value"])));
        }
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  >^  NewDataSet::CommandClassRow::GetTriggerRefreshValueRows() {
        if (this->Table->ChildRelations[L"CommandClass_TriggerRefreshValue"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CommandClass_TriggerRefreshValue"])));
        }
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::SupportedModesRow^  >^  NewDataSet::CommandClassRow::GetSupportedModesRows() {
        if (this->Table->ChildRelations[L"CommandClass_SupportedModes"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::SupportedModesRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::SupportedModesRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CommandClass_SupportedModes"])));
        }
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::SensorMapRow^  >^  NewDataSet::CommandClassRow::GetSensorMapRows() {
        if (this->Table->ChildRelations[L"CommandClass_SensorMap"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::SensorMapRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::SensorMapRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CommandClass_SensorMap"])));
        }
    }
    
    
    inline NewDataSet::InstanceRow::InstanceRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableInstance = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::InstanceDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::InstanceRow::index::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableInstance->indexColumn]));
    }
    inline System::Void NewDataSet::InstanceRow::index::set(System::String^  value) {
        this[this->tableInstance->indexColumn] = value;
    }
    
    inline System::Int32 NewDataSet::InstanceRow::CommandClass_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableInstance->CommandClass_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CommandClass_Id\' in table \'Instance\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::InstanceRow::CommandClass_Id::set(System::Int32 value) {
        this[this->tableInstance->CommandClass_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::CommandClassRow^  NewDataSet::InstanceRow::CommandClassRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::CommandClassRow^  >(this->GetParentRow(this->Table->ParentRelations[L"CommandClass_Instance"])));
    }
    inline System::Void NewDataSet::InstanceRow::CommandClassRow::set(OpenZWave_WinMD::NewDataSet::CommandClassRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"CommandClass_Instance"]);
    }
    
    inline ::System::Boolean NewDataSet::InstanceRow::IsCommandClass_IdNull() {
        return this->IsNull(this->tableInstance->CommandClass_IdColumn);
    }
    
    inline ::System::Void NewDataSet::InstanceRow::SetCommandClass_IdNull() {
        this[this->tableInstance->CommandClass_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::AssociationsRow::AssociationsRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableAssociations = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::AssociationsDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::AssociationsRow::num_groups::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableAssociations->num_groupsColumn]));
    }
    inline System::Void NewDataSet::AssociationsRow::num_groups::set(System::String^  value) {
        this[this->tableAssociations->num_groupsColumn] = value;
    }
    
    inline System::Int32 NewDataSet::AssociationsRow::Associations_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableAssociations->Associations_IdColumn]));
    }
    inline System::Void NewDataSet::AssociationsRow::Associations_Id::set(System::Int32 value) {
        this[this->tableAssociations->Associations_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::AssociationsRow::CommandClass_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableAssociations->CommandClass_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CommandClass_Id\' in table \'Associations\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::AssociationsRow::CommandClass_Id::set(System::Int32 value) {
        this[this->tableAssociations->CommandClass_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::CommandClassRow^  NewDataSet::AssociationsRow::CommandClassRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::CommandClassRow^  >(this->GetParentRow(this->Table->ParentRelations[L"CommandClass_Associations"])));
    }
    inline System::Void NewDataSet::AssociationsRow::CommandClassRow::set(OpenZWave_WinMD::NewDataSet::CommandClassRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"CommandClass_Associations"]);
    }
    
    inline ::System::Boolean NewDataSet::AssociationsRow::IsCommandClass_IdNull() {
        return this->IsNull(this->tableAssociations->CommandClass_IdColumn);
    }
    
    inline ::System::Void NewDataSet::AssociationsRow::SetCommandClass_IdNull() {
        this[this->tableAssociations->CommandClass_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::GroupRow^  >^  NewDataSet::AssociationsRow::GetGroupRows() {
        if (this->Table->ChildRelations[L"Associations_Group"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::GroupRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::GroupRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Associations_Group"])));
        }
    }
    
    
    inline NewDataSet::GroupRow::GroupRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableGroup = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::GroupDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::GroupRow::index::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableGroup->indexColumn]));
    }
    inline System::Void NewDataSet::GroupRow::index::set(System::String^  value) {
        this[this->tableGroup->indexColumn] = value;
    }
    
    inline System::String^  NewDataSet::GroupRow::max_associations::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableGroup->max_associationsColumn]));
    }
    inline System::Void NewDataSet::GroupRow::max_associations::set(System::String^  value) {
        this[this->tableGroup->max_associationsColumn] = value;
    }
    
    inline System::String^  NewDataSet::GroupRow::label::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableGroup->labelColumn]));
    }
    inline System::Void NewDataSet::GroupRow::label::set(System::String^  value) {
        this[this->tableGroup->labelColumn] = value;
    }
    
    inline System::String^  NewDataSet::GroupRow::_auto::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGroup->_autoColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'auto\' in table \'Group\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::GroupRow::_auto::set(System::String^  value) {
        this[this->tableGroup->_autoColumn] = value;
    }
    
    inline System::String^  NewDataSet::GroupRow::multiInstance::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGroup->multiInstanceColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'multiInstance\' in table \'Group\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::GroupRow::multiInstance::set(System::String^  value) {
        this[this->tableGroup->multiInstanceColumn] = value;
    }
    
    inline System::String^  NewDataSet::GroupRow::write_only::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableGroup->write_onlyColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'write_only\' in table \'Group\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::GroupRow::write_only::set(System::String^  value) {
        this[this->tableGroup->write_onlyColumn] = value;
    }
    
    inline System::Int32 NewDataSet::GroupRow::Group_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableGroup->Group_IdColumn]));
    }
    inline System::Void NewDataSet::GroupRow::Group_Id::set(System::Int32 value) {
        this[this->tableGroup->Group_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::GroupRow::Associations_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableGroup->Associations_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Associations_Id\' in table \'Group\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::GroupRow::Associations_Id::set(System::Int32 value) {
        this[this->tableGroup->Associations_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::AssociationsRow^  NewDataSet::GroupRow::AssociationsRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::AssociationsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Associations_Group"])));
    }
    inline System::Void NewDataSet::GroupRow::AssociationsRow::set(OpenZWave_WinMD::NewDataSet::AssociationsRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Associations_Group"]);
    }
    
    inline ::System::Boolean NewDataSet::GroupRow::Is_autoNull() {
        return this->IsNull(this->tableGroup->_autoColumn);
    }
    
    inline ::System::Void NewDataSet::GroupRow::Set_autoNull() {
        this[this->tableGroup->_autoColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::GroupRow::IsmultiInstanceNull() {
        return this->IsNull(this->tableGroup->multiInstanceColumn);
    }
    
    inline ::System::Void NewDataSet::GroupRow::SetmultiInstanceNull() {
        this[this->tableGroup->multiInstanceColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::GroupRow::Iswrite_onlyNull() {
        return this->IsNull(this->tableGroup->write_onlyColumn);
    }
    
    inline ::System::Void NewDataSet::GroupRow::Setwrite_onlyNull() {
        this[this->tableGroup->write_onlyColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::GroupRow::IsAssociations_IdNull() {
        return this->IsNull(this->tableGroup->Associations_IdColumn);
    }
    
    inline ::System::Void NewDataSet::GroupRow::SetAssociations_IdNull() {
        this[this->tableGroup->Associations_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::NodeRow^  >^  NewDataSet::GroupRow::GetNodeRows() {
        if (this->Table->ChildRelations[L"Group_Node"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::NodeRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::NodeRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Group_Node"])));
        }
    }
    
    
    inline NewDataSet::NodeRow::NodeRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableNode = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::NodeDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::NodeRow::id::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableNode->idColumn]));
    }
    inline System::Void NewDataSet::NodeRow::id::set(System::String^  value) {
        this[this->tableNode->idColumn] = value;
    }
    
    inline System::Int32 NewDataSet::NodeRow::Group_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableNode->Group_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Group_Id\' in table \'Node\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::NodeRow::Group_Id::set(System::Int32 value) {
        this[this->tableNode->Group_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::GroupRow^  NewDataSet::NodeRow::GroupRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::GroupRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Group_Node"])));
    }
    inline System::Void NewDataSet::NodeRow::GroupRow::set(OpenZWave_WinMD::NewDataSet::GroupRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Group_Node"]);
    }
    
    inline ::System::Boolean NewDataSet::NodeRow::IsGroup_IdNull() {
        return this->IsNull(this->tableNode->Group_IdColumn);
    }
    
    inline ::System::Void NewDataSet::NodeRow::SetGroup_IdNull() {
        this[this->tableNode->Group_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::ValueRow::ValueRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableValue = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ValueDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::ValueRow::type::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableValue->typeColumn]));
    }
    inline System::Void NewDataSet::ValueRow::type::set(System::String^  value) {
        this[this->tableValue->typeColumn] = value;
    }
    
    inline System::String^  NewDataSet::ValueRow::size::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableValue->sizeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'size\' in table \'Value\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::ValueRow::size::set(System::String^  value) {
        this[this->tableValue->sizeColumn] = value;
    }
    
    inline System::String^  NewDataSet::ValueRow::index::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableValue->indexColumn]));
    }
    inline System::Void NewDataSet::ValueRow::index::set(System::String^  value) {
        this[this->tableValue->indexColumn] = value;
    }
    
    inline System::String^  NewDataSet::ValueRow::genre::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableValue->genreColumn]));
    }
    inline System::Void NewDataSet::ValueRow::genre::set(System::String^  value) {
        this[this->tableValue->genreColumn] = value;
    }
    
    inline System::String^  NewDataSet::ValueRow::label::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableValue->labelColumn]));
    }
    inline System::Void NewDataSet::ValueRow::label::set(System::String^  value) {
        this[this->tableValue->labelColumn] = value;
    }
    
    inline System::String^  NewDataSet::ValueRow::units::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableValue->unitsColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'units\' in table \'Value\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::ValueRow::units::set(System::String^  value) {
        this[this->tableValue->unitsColumn] = value;
    }
    
    inline System::String^  NewDataSet::ValueRow::min::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableValue->minColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'min\' in table \'Value\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::ValueRow::min::set(System::String^  value) {
        this[this->tableValue->minColumn] = value;
    }
    
    inline System::String^  NewDataSet::ValueRow::max::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableValue->maxColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'max\' in table \'Value\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::ValueRow::max::set(System::String^  value) {
        this[this->tableValue->maxColumn] = value;
    }
    
    inline System::String^  NewDataSet::ValueRow::_value::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableValue->_valueColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'value\' in table \'Value\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::ValueRow::_value::set(System::String^  value) {
        this[this->tableValue->_valueColumn] = value;
    }
    
    inline System::String^  NewDataSet::ValueRow::length::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableValue->lengthColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'length\' in table \'Value\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ValueRow::length::set(System::String^  value) {
        this[this->tableValue->lengthColumn] = value;
    }
    
    inline System::String^  NewDataSet::ValueRow::read_only::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableValue->read_onlyColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'read_only\' in table \'Value\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ValueRow::read_only::set(System::String^  value) {
        this[this->tableValue->read_onlyColumn] = value;
    }
    
    inline System::String^  NewDataSet::ValueRow::write_only::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableValue->write_onlyColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'write_only\' in table \'Value\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ValueRow::write_only::set(System::String^  value) {
        this[this->tableValue->write_onlyColumn] = value;
    }
    
    inline System::String^  NewDataSet::ValueRow::verify_changes::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableValue->verify_changesColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'verify_changes\' in table \'Value\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ValueRow::verify_changes::set(System::String^  value) {
        this[this->tableValue->verify_changesColumn] = value;
    }
    
    inline System::String^  NewDataSet::ValueRow::affects::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableValue->affectsColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'affects\' in table \'Value\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ValueRow::affects::set(System::String^  value) {
        this[this->tableValue->affectsColumn] = value;
    }
    
    inline System::String^  NewDataSet::ValueRow::instance::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableValue->instanceColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'instance\' in table \'Value\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ValueRow::instance::set(System::String^  value) {
        this[this->tableValue->instanceColumn] = value;
    }
    
    inline System::Int32 NewDataSet::ValueRow::Value_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableValue->Value_IdColumn]));
    }
    inline System::Void NewDataSet::ValueRow::Value_Id::set(System::Int32 value) {
        this[this->tableValue->Value_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::ValueRow::CommandClass_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableValue->CommandClass_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CommandClass_Id\' in table \'Value\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ValueRow::CommandClass_Id::set(System::Int32 value) {
        this[this->tableValue->CommandClass_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::CommandClassRow^  NewDataSet::ValueRow::CommandClassRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::CommandClassRow^  >(this->GetParentRow(this->Table->ParentRelations[L"CommandClass_Value"])));
    }
    inline System::Void NewDataSet::ValueRow::CommandClassRow::set(OpenZWave_WinMD::NewDataSet::CommandClassRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"CommandClass_Value"]);
    }
    
    inline ::System::Boolean NewDataSet::ValueRow::IssizeNull() {
        return this->IsNull(this->tableValue->sizeColumn);
    }
    
    inline ::System::Void NewDataSet::ValueRow::SetsizeNull() {
        this[this->tableValue->sizeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ValueRow::IsunitsNull() {
        return this->IsNull(this->tableValue->unitsColumn);
    }
    
    inline ::System::Void NewDataSet::ValueRow::SetunitsNull() {
        this[this->tableValue->unitsColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ValueRow::IsminNull() {
        return this->IsNull(this->tableValue->minColumn);
    }
    
    inline ::System::Void NewDataSet::ValueRow::SetminNull() {
        this[this->tableValue->minColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ValueRow::IsmaxNull() {
        return this->IsNull(this->tableValue->maxColumn);
    }
    
    inline ::System::Void NewDataSet::ValueRow::SetmaxNull() {
        this[this->tableValue->maxColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ValueRow::Is_valueNull() {
        return this->IsNull(this->tableValue->_valueColumn);
    }
    
    inline ::System::Void NewDataSet::ValueRow::Set_valueNull() {
        this[this->tableValue->_valueColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ValueRow::IslengthNull() {
        return this->IsNull(this->tableValue->lengthColumn);
    }
    
    inline ::System::Void NewDataSet::ValueRow::SetlengthNull() {
        this[this->tableValue->lengthColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ValueRow::Isread_onlyNull() {
        return this->IsNull(this->tableValue->read_onlyColumn);
    }
    
    inline ::System::Void NewDataSet::ValueRow::Setread_onlyNull() {
        this[this->tableValue->read_onlyColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ValueRow::Iswrite_onlyNull() {
        return this->IsNull(this->tableValue->write_onlyColumn);
    }
    
    inline ::System::Void NewDataSet::ValueRow::Setwrite_onlyNull() {
        this[this->tableValue->write_onlyColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ValueRow::Isverify_changesNull() {
        return this->IsNull(this->tableValue->verify_changesColumn);
    }
    
    inline ::System::Void NewDataSet::ValueRow::Setverify_changesNull() {
        this[this->tableValue->verify_changesColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ValueRow::IsaffectsNull() {
        return this->IsNull(this->tableValue->affectsColumn);
    }
    
    inline ::System::Void NewDataSet::ValueRow::SetaffectsNull() {
        this[this->tableValue->affectsColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ValueRow::IsinstanceNull() {
        return this->IsNull(this->tableValue->instanceColumn);
    }
    
    inline ::System::Void NewDataSet::ValueRow::SetinstanceNull() {
        this[this->tableValue->instanceColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ValueRow::IsCommandClass_IdNull() {
        return this->IsNull(this->tableValue->CommandClass_IdColumn);
    }
    
    inline ::System::Void NewDataSet::ValueRow::SetCommandClass_IdNull() {
        this[this->tableValue->CommandClass_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::HelpRow^  >^  NewDataSet::ValueRow::GetHelpRows() {
        if (this->Table->ChildRelations[L"Value_Help"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::HelpRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::HelpRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Value_Help"])));
        }
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::_ItemRow^  >^  NewDataSet::ValueRow::GetItemRows() {
        if (this->Table->ChildRelations[L"Value_Item"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::_ItemRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::_ItemRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Value_Item"])));
        }
    }
    
    
    inline NewDataSet::HelpRow::HelpRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableHelp = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::HelpDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::HelpRow::Value_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableHelp->Value_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Value_Id\' in table \'Help\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::HelpRow::Value_Id::set(System::Int32 value) {
        this[this->tableHelp->Value_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ValueRow^  NewDataSet::HelpRow::ValueRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ValueRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Value_Help"])));
    }
    inline System::Void NewDataSet::HelpRow::ValueRow::set(OpenZWave_WinMD::NewDataSet::ValueRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Value_Help"]);
    }
    
    inline ::System::Boolean NewDataSet::HelpRow::IsValue_IdNull() {
        return this->IsNull(this->tableHelp->Value_IdColumn);
    }
    
    inline ::System::Void NewDataSet::HelpRow::SetValue_IdNull() {
        this[this->tableHelp->Value_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::_ItemRow::_ItemRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->table_Item = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::_ItemDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::_ItemRow::label::get() {
        return (cli::safe_cast<::System::String^  >(this[this->table_Item->labelColumn]));
    }
    inline System::Void NewDataSet::_ItemRow::label::set(System::String^  value) {
        this[this->table_Item->labelColumn] = value;
    }
    
    inline System::String^  NewDataSet::_ItemRow::_value::get() {
        return (cli::safe_cast<::System::String^  >(this[this->table_Item->_valueColumn]));
    }
    inline System::Void NewDataSet::_ItemRow::_value::set(System::String^  value) {
        this[this->table_Item->_valueColumn] = value;
    }
    
    inline System::Int32 NewDataSet::_ItemRow::Value_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->table_Item->Value_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Value_Id\' in table \'Item\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::_ItemRow::Value_Id::set(System::Int32 value) {
        this[this->table_Item->Value_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ValueRow^  NewDataSet::_ItemRow::ValueRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ValueRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Value_Item"])));
    }
    inline System::Void NewDataSet::_ItemRow::ValueRow::set(OpenZWave_WinMD::NewDataSet::ValueRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Value_Item"]);
    }
    
    inline ::System::Boolean NewDataSet::_ItemRow::IsValue_IdNull() {
        return this->IsNull(this->table_Item->Value_IdColumn);
    }
    
    inline ::System::Void NewDataSet::_ItemRow::SetValue_IdNull() {
        this[this->table_Item->Value_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::TriggerRefreshValueRow::TriggerRefreshValueRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableTriggerRefreshValue = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::TriggerRefreshValueDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::TriggerRefreshValueRow::Genre::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableTriggerRefreshValue->GenreColumn]));
    }
    inline System::Void NewDataSet::TriggerRefreshValueRow::Genre::set(System::String^  value) {
        this[this->tableTriggerRefreshValue->GenreColumn] = value;
    }
    
    inline System::String^  NewDataSet::TriggerRefreshValueRow::Instance::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableTriggerRefreshValue->InstanceColumn]));
    }
    inline System::Void NewDataSet::TriggerRefreshValueRow::Instance::set(System::String^  value) {
        this[this->tableTriggerRefreshValue->InstanceColumn] = value;
    }
    
    inline System::String^  NewDataSet::TriggerRefreshValueRow::Index::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableTriggerRefreshValue->IndexColumn]));
    }
    inline System::Void NewDataSet::TriggerRefreshValueRow::Index::set(System::String^  value) {
        this[this->tableTriggerRefreshValue->IndexColumn] = value;
    }
    
    inline System::Int32 NewDataSet::TriggerRefreshValueRow::TriggerRefreshValue_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableTriggerRefreshValue->TriggerRefreshValue_IdColumn]));
    }
    inline System::Void NewDataSet::TriggerRefreshValueRow::TriggerRefreshValue_Id::set(System::Int32 value) {
        this[this->tableTriggerRefreshValue->TriggerRefreshValue_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::TriggerRefreshValueRow::CommandClass_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableTriggerRefreshValue->CommandClass_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CommandClass_Id\' in table \'TriggerRefreshValue\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::TriggerRefreshValueRow::CommandClass_Id::set(System::Int32 value) {
        this[this->tableTriggerRefreshValue->CommandClass_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::CommandClassRow^  NewDataSet::TriggerRefreshValueRow::CommandClassRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::CommandClassRow^  >(this->GetParentRow(this->Table->ParentRelations[L"CommandClass_TriggerRefreshValue"])));
    }
    inline System::Void NewDataSet::TriggerRefreshValueRow::CommandClassRow::set(OpenZWave_WinMD::NewDataSet::CommandClassRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"CommandClass_TriggerRefreshValue"]);
    }
    
    inline ::System::Boolean NewDataSet::TriggerRefreshValueRow::IsCommandClass_IdNull() {
        return this->IsNull(this->tableTriggerRefreshValue->CommandClass_IdColumn);
    }
    
    inline ::System::Void NewDataSet::TriggerRefreshValueRow::SetCommandClass_IdNull() {
        this[this->tableTriggerRefreshValue->CommandClass_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  >^  NewDataSet::TriggerRefreshValueRow::GetRefreshClassValueRows() {
        if (this->Table->ChildRelations[L"TriggerRefreshValue_RefreshClassValue"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TriggerRefreshValue_RefreshClassValue"])));
        }
    }
    
    
    inline NewDataSet::RefreshClassValueRow::RefreshClassValueRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableRefreshClassValue = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::RefreshClassValueDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::RefreshClassValueRow::CommandClass::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableRefreshClassValue->CommandClassColumn]));
    }
    inline System::Void NewDataSet::RefreshClassValueRow::CommandClass::set(System::String^  value) {
        this[this->tableRefreshClassValue->CommandClassColumn] = value;
    }
    
    inline System::String^  NewDataSet::RefreshClassValueRow::RequestFlags::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableRefreshClassValue->RequestFlagsColumn]));
    }
    inline System::Void NewDataSet::RefreshClassValueRow::RequestFlags::set(System::String^  value) {
        this[this->tableRefreshClassValue->RequestFlagsColumn] = value;
    }
    
    inline System::String^  NewDataSet::RefreshClassValueRow::Instance::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableRefreshClassValue->InstanceColumn]));
    }
    inline System::Void NewDataSet::RefreshClassValueRow::Instance::set(System::String^  value) {
        this[this->tableRefreshClassValue->InstanceColumn] = value;
    }
    
    inline System::String^  NewDataSet::RefreshClassValueRow::Index::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableRefreshClassValue->IndexColumn]));
    }
    inline System::Void NewDataSet::RefreshClassValueRow::Index::set(System::String^  value) {
        this[this->tableRefreshClassValue->IndexColumn] = value;
    }
    
    inline System::Int32 NewDataSet::RefreshClassValueRow::TriggerRefreshValue_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableRefreshClassValue->TriggerRefreshValue_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TriggerRefreshValue_Id\' in table \'RefreshClassValue\' is DBN" 
L"ull.", 
                e));
        }
    }
    inline System::Void NewDataSet::RefreshClassValueRow::TriggerRefreshValue_Id::set(System::Int32 value) {
        this[this->tableRefreshClassValue->TriggerRefreshValue_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  NewDataSet::RefreshClassValueRow::TriggerRefreshValueRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TriggerRefreshValue_RefreshClassValue"])));
    }
    inline System::Void NewDataSet::RefreshClassValueRow::TriggerRefreshValueRow::set(OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"TriggerRefreshValue_RefreshClassValue"]);
    }
    
    inline ::System::Boolean NewDataSet::RefreshClassValueRow::IsTriggerRefreshValue_IdNull() {
        return this->IsNull(this->tableRefreshClassValue->TriggerRefreshValue_IdColumn);
    }
    
    inline ::System::Void NewDataSet::RefreshClassValueRow::SetTriggerRefreshValue_IdNull() {
        this[this->tableRefreshClassValue->TriggerRefreshValue_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::SupportedModesRow::SupportedModesRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableSupportedModes = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SupportedModesDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::SupportedModesRow::SupportedModes_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableSupportedModes->SupportedModes_IdColumn]));
    }
    inline System::Void NewDataSet::SupportedModesRow::SupportedModes_Id::set(System::Int32 value) {
        this[this->tableSupportedModes->SupportedModes_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::SupportedModesRow::CommandClass_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableSupportedModes->CommandClass_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CommandClass_Id\' in table \'SupportedModes\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::SupportedModesRow::CommandClass_Id::set(System::Int32 value) {
        this[this->tableSupportedModes->CommandClass_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::CommandClassRow^  NewDataSet::SupportedModesRow::CommandClassRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::CommandClassRow^  >(this->GetParentRow(this->Table->ParentRelations[L"CommandClass_SupportedModes"])));
    }
    inline System::Void NewDataSet::SupportedModesRow::CommandClassRow::set(OpenZWave_WinMD::NewDataSet::CommandClassRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"CommandClass_SupportedModes"]);
    }
    
    inline ::System::Boolean NewDataSet::SupportedModesRow::IsCommandClass_IdNull() {
        return this->IsNull(this->tableSupportedModes->CommandClass_IdColumn);
    }
    
    inline ::System::Void NewDataSet::SupportedModesRow::SetCommandClass_IdNull() {
        this[this->tableSupportedModes->CommandClass_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::ModeRow^  >^  NewDataSet::SupportedModesRow::GetModeRows() {
        if (this->Table->ChildRelations[L"SupportedModes_Mode"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::ModeRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::ModeRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"SupportedModes_Mode"])));
        }
    }
    
    
    inline NewDataSet::ModeRow::ModeRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableMode = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ModeDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::ModeRow::index::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableMode->indexColumn]));
    }
    inline System::Void NewDataSet::ModeRow::index::set(System::String^  value) {
        this[this->tableMode->indexColumn] = value;
    }
    
    inline System::String^  NewDataSet::ModeRow::label::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableMode->labelColumn]));
    }
    inline System::Void NewDataSet::ModeRow::label::set(System::String^  value) {
        this[this->tableMode->labelColumn] = value;
    }
    
    inline System::Int32 NewDataSet::ModeRow::SupportedModes_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableMode->SupportedModes_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'SupportedModes_Id\' in table \'Mode\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ModeRow::SupportedModes_Id::set(System::Int32 value) {
        this[this->tableMode->SupportedModes_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::SupportedModesRow^  NewDataSet::ModeRow::SupportedModesRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SupportedModesRow^  >(this->GetParentRow(this->Table->ParentRelations[L"SupportedModes_Mode"])));
    }
    inline System::Void NewDataSet::ModeRow::SupportedModesRow::set(OpenZWave_WinMD::NewDataSet::SupportedModesRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"SupportedModes_Mode"]);
    }
    
    inline ::System::Boolean NewDataSet::ModeRow::IsSupportedModes_IdNull() {
        return this->IsNull(this->tableMode->SupportedModes_IdColumn);
    }
    
    inline ::System::Void NewDataSet::ModeRow::SetSupportedModes_IdNull() {
        this[this->tableMode->SupportedModes_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::SensorMapRow::SensorMapRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableSensorMap = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::SensorMapDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::SensorMapRow::index::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableSensorMap->indexColumn]));
    }
    inline System::Void NewDataSet::SensorMapRow::index::set(System::String^  value) {
        this[this->tableSensorMap->indexColumn] = value;
    }
    
    inline System::String^  NewDataSet::SensorMapRow::type::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableSensorMap->typeColumn]));
    }
    inline System::Void NewDataSet::SensorMapRow::type::set(System::String^  value) {
        this[this->tableSensorMap->typeColumn] = value;
    }
    
    inline System::Int32 NewDataSet::SensorMapRow::CommandClass_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableSensorMap->CommandClass_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CommandClass_Id\' in table \'SensorMap\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::SensorMapRow::CommandClass_Id::set(System::Int32 value) {
        this[this->tableSensorMap->CommandClass_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::CommandClassRow^  NewDataSet::SensorMapRow::CommandClassRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::CommandClassRow^  >(this->GetParentRow(this->Table->ParentRelations[L"CommandClass_SensorMap"])));
    }
    inline System::Void NewDataSet::SensorMapRow::CommandClassRow::set(OpenZWave_WinMD::NewDataSet::CommandClassRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"CommandClass_SensorMap"]);
    }
    
    inline ::System::Boolean NewDataSet::SensorMapRow::IsCommandClass_IdNull() {
        return this->IsNull(this->tableSensorMap->CommandClass_IdColumn);
    }
    
    inline ::System::Void NewDataSet::SensorMapRow::SetCommandClass_IdNull() {
        this[this->tableSensorMap->CommandClass_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::ProductRowChangeEvent::ProductRowChangeEvent(OpenZWave_WinMD::NewDataSet::ProductRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProductRow^  NewDataSet::ProductRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::ProductRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::ProtocolRowChangeEvent::ProtocolRowChangeEvent(OpenZWave_WinMD::NewDataSet::ProtocolRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProtocolRow^  NewDataSet::ProtocolRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::ProtocolRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::APIcallRowChangeEvent::APIcallRowChangeEvent(OpenZWave_WinMD::NewDataSet::APIcallRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::APIcallRow^  NewDataSet::APIcallRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::APIcallRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::CommandClassRowChangeEvent::CommandClassRowChangeEvent(OpenZWave_WinMD::NewDataSet::CommandClassRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::CommandClassRow^  NewDataSet::CommandClassRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::CommandClassRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::InstanceRowChangeEvent::InstanceRowChangeEvent(OpenZWave_WinMD::NewDataSet::InstanceRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::InstanceRow^  NewDataSet::InstanceRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::InstanceRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::AssociationsRowChangeEvent::AssociationsRowChangeEvent(OpenZWave_WinMD::NewDataSet::AssociationsRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::AssociationsRow^  NewDataSet::AssociationsRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::AssociationsRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::GroupRowChangeEvent::GroupRowChangeEvent(OpenZWave_WinMD::NewDataSet::GroupRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::GroupRow^  NewDataSet::GroupRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::GroupRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::NodeRowChangeEvent::NodeRowChangeEvent(OpenZWave_WinMD::NewDataSet::NodeRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::NodeRow^  NewDataSet::NodeRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::NodeRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::ValueRowChangeEvent::ValueRowChangeEvent(OpenZWave_WinMD::NewDataSet::ValueRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ValueRow^  NewDataSet::ValueRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::ValueRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::HelpRowChangeEvent::HelpRowChangeEvent(OpenZWave_WinMD::NewDataSet::HelpRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::HelpRow^  NewDataSet::HelpRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::HelpRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::_ItemRowChangeEvent::_ItemRowChangeEvent(OpenZWave_WinMD::NewDataSet::_ItemRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::_ItemRow^  NewDataSet::_ItemRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::_ItemRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::TriggerRefreshValueRowChangeEvent::TriggerRefreshValueRowChangeEvent(OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::TriggerRefreshValueRow^  NewDataSet::TriggerRefreshValueRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::TriggerRefreshValueRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::RefreshClassValueRowChangeEvent::RefreshClassValueRowChangeEvent(OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::RefreshClassValueRow^  NewDataSet::RefreshClassValueRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::RefreshClassValueRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::SupportedModesRowChangeEvent::SupportedModesRowChangeEvent(OpenZWave_WinMD::NewDataSet::SupportedModesRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::SupportedModesRow^  NewDataSet::SupportedModesRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::SupportedModesRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::ModeRowChangeEvent::ModeRowChangeEvent(OpenZWave_WinMD::NewDataSet::ModeRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ModeRow^  NewDataSet::ModeRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::ModeRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::SensorMapRowChangeEvent::SensorMapRowChangeEvent(OpenZWave_WinMD::NewDataSet::SensorMapRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::SensorMapRow^  NewDataSet::SensorMapRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::SensorMapRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
