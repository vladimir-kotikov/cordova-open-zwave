#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.6.81.0.
// 
namespace OpenZWave_WinMD {
    using namespace System;
    ref class NewDataSet;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class NewDataSet : public ::System::Data::DataSet {
        public : ref class ManufacturerSpecificDataDataTable;
        public : ref class ManufacturerDataTable;
        public : ref class ProductDataTable;
        public : ref class ManufacturerSpecificDataRow;
        public : ref class ManufacturerRow;
        public : ref class ProductRow;
        public : ref class ManufacturerSpecificDataRowChangeEvent;
        public : ref class ManufacturerRowChangeEvent;
        public : ref class ProductRowChangeEvent;
        
        private: OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataDataTable^  tableManufacturerSpecificData;
        
        private: OpenZWave_WinMD::NewDataSet::ManufacturerDataTable^  tableManufacturer;
        
        private: OpenZWave_WinMD::NewDataSet::ProductDataTable^  tableProduct;
        
        private: ::System::Data::DataRelation^  relationManufacturerSpecificData_Manufacturer;
        
        private: ::System::Data::DataRelation^  relationManufacturer_Product;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void ManufacturerSpecificDataRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void ManufacturerRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::ManufacturerRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void ProductRowChangeEventHandler(::System::Object^  sender, OpenZWave_WinMD::NewDataSet::ProductRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataDataTable^  ManufacturerSpecificData {
            OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::ManufacturerDataTable^  Manufacturer {
            OpenZWave_WinMD::NewDataSet::ManufacturerDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property OpenZWave_WinMD::NewDataSet::ProductDataTable^  Product {
            OpenZWave_WinMD::NewDataSet::ProductDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeManufacturerSpecificData();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeManufacturer();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializeProduct();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ManufacturerSpecificDataDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnManufacturerSpecificData_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRowChangeEventHandler^  ManufacturerSpecificDataRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRowChangeEventHandler^  ManufacturerSpecificDataRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRowChangeEventHandler^  ManufacturerSpecificDataRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRowChangeEventHandler^  ManufacturerSpecificDataRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ManufacturerSpecificDataDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ManufacturerSpecificDataDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ManufacturerSpecificDataDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ManufacturerSpecificData_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddManufacturerSpecificDataRow(OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  AddManufacturerSpecificDataRow();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  NewManufacturerSpecificDataRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveManufacturerSpecificDataRow(OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ManufacturerDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnid;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnManufacturer_Id;
            
            private: ::System::Data::DataColumn^  columnManufacturerSpecificData_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ManufacturerRowChangeEventHandler^  ManufacturerRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ManufacturerRowChangeEventHandler^  ManufacturerRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ManufacturerRowChangeEventHandler^  ManufacturerRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ManufacturerRowChangeEventHandler^  ManufacturerRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ManufacturerDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ManufacturerDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ManufacturerDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  idColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Manufacturer_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ManufacturerSpecificData_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ManufacturerRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::ManufacturerRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddManufacturerRow(OpenZWave_WinMD::NewDataSet::ManufacturerRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::ManufacturerRow^  AddManufacturerRow(System::String^  id, System::String^  name, 
                        OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  parentManufacturerSpecificDataRowByManufacturerSpecificData_Manufacturer);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::ManufacturerRow^  NewManufacturerRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveManufacturerRow(OpenZWave_WinMD::NewDataSet::ManufacturerRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class ProductDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columntype;
            
            private: ::System::Data::DataColumn^  columnid;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnconfig;
            
            private: ::System::Data::DataColumn^  columnManufacturer_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ProductRowChangeEventHandler^  ProductRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ProductRowChangeEventHandler^  ProductRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ProductRowChangeEventHandler^  ProductRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event OpenZWave_WinMD::NewDataSet::ProductRowChangeEventHandler^  ProductRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProductDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProductDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProductDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  typeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  idColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  configColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  Manufacturer_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ProductRow^  default [::System::Int32 ] {
                OpenZWave_WinMD::NewDataSet::ProductRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddProductRow(OpenZWave_WinMD::NewDataSet::ProductRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::ProductRow^  AddProductRow(System::String^  type, System::String^  id, System::String^  name, 
                        System::Uri^  config, OpenZWave_WinMD::NewDataSet::ManufacturerRow^  parentManufacturerRowByManufacturer_Product);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            OpenZWave_WinMD::NewDataSet::ProductRow^  NewProductRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemoveProductRow(OpenZWave_WinMD::NewDataSet::ProductRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class ManufacturerSpecificDataRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataDataTable^  tableManufacturerSpecificData;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ManufacturerSpecificDataRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 ManufacturerSpecificData_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::ManufacturerRow^  >^  GetManufacturerRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class ManufacturerRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::ManufacturerDataTable^  tableManufacturer;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ManufacturerRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  id {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Manufacturer_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 ManufacturerSpecificData_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  ManufacturerSpecificDataRow {
                OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsManufacturerSpecificData_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetManufacturerSpecificData_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< OpenZWave_WinMD::NewDataSet::ProductRow^  >^  GetProductRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class ProductRow : public ::System::Data::DataRow {
            
            private: OpenZWave_WinMD::NewDataSet::ProductDataTable^  tableProduct;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProductRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  type {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  id {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Uri^  config {
                System::Uri^  get();
                System::Void set(System::Uri^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 Manufacturer_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ManufacturerRow^  ManufacturerRow {
                OpenZWave_WinMD::NewDataSet::ManufacturerRow^  get();
                System::Void set(OpenZWave_WinMD::NewDataSet::ManufacturerRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsconfigNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetconfigNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsManufacturer_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetManufacturer_IdNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class ManufacturerSpecificDataRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ManufacturerSpecificDataRowChangeEvent(OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  Row {
                OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class ManufacturerRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::ManufacturerRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ManufacturerRowChangeEvent(OpenZWave_WinMD::NewDataSet::ManufacturerRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ManufacturerRow^  Row {
                OpenZWave_WinMD::NewDataSet::ManufacturerRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class ProductRowChangeEvent : public ::System::EventArgs {
            
            private: OpenZWave_WinMD::NewDataSet::ProductRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ProductRowChangeEvent(OpenZWave_WinMD::NewDataSet::ProductRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property OpenZWave_WinMD::NewDataSet::ProductRow^  Row {
                OpenZWave_WinMD::NewDataSet::ProductRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace OpenZWave_WinMD {
    
    
    inline NewDataSet::NewDataSet() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &OpenZWave_WinMD::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &OpenZWave_WinMD::NewDataSet::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"ManufacturerSpecificData"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataDataTable(ds->Tables[L"ManufacturerSpecificData"])));
            }
            if (ds->Tables[L"Manufacturer"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::ManufacturerDataTable(ds->Tables[L"Manufacturer"])));
            }
            if (ds->Tables[L"Product"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::ProductDataTable(ds->Tables[L"Product"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &OpenZWave_WinMD::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataDataTable^  NewDataSet::ManufacturerSpecificData::get() {
        return this->tableManufacturerSpecificData;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ManufacturerDataTable^  NewDataSet::Manufacturer::get() {
        return this->tableManufacturer;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProductDataTable^  NewDataSet::Product::get() {
        return this->tableProduct;
    }
    
    inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  NewDataSet::Clone() {
        OpenZWave_WinMD::NewDataSet^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"ManufacturerSpecificData"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataDataTable(ds->Tables[L"ManufacturerSpecificData"])));
            }
            if (ds->Tables[L"Manufacturer"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::ManufacturerDataTable(ds->Tables[L"Manufacturer"])));
            }
            if (ds->Tables[L"Product"] != nullptr) {
                __super::Tables->Add((gcnew OpenZWave_WinMD::NewDataSet::ProductDataTable(ds->Tables[L"Product"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void NewDataSet::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
        this->tableManufacturerSpecificData = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataDataTable^  >(__super::Tables[L"ManufacturerSpecificData"]));
        if (initTable == true) {
            if (this->tableManufacturerSpecificData != nullptr) {
                this->tableManufacturerSpecificData->InitVars();
            }
        }
        this->tableManufacturer = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerDataTable^  >(__super::Tables[L"Manufacturer"]));
        if (initTable == true) {
            if (this->tableManufacturer != nullptr) {
                this->tableManufacturer->InitVars();
            }
        }
        this->tableProduct = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductDataTable^  >(__super::Tables[L"Product"]));
        if (initTable == true) {
            if (this->tableProduct != nullptr) {
                this->tableProduct->InitVars();
            }
        }
        this->relationManufacturerSpecificData_Manufacturer = this->Relations[L"ManufacturerSpecificData_Manufacturer"];
        this->relationManufacturer_Product = this->Relations[L"Manufacturer_Product"];
    }
    
    inline ::System::Void NewDataSet::InitClass() {
        this->DataSetName = L"NewDataSet";
        this->Prefix = L"";
        this->Namespace = L"http://code.google.com/p/open-zwave/";
        this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tableManufacturerSpecificData = (gcnew OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataDataTable());
        __super::Tables->Add(this->tableManufacturerSpecificData);
        this->tableManufacturer = (gcnew OpenZWave_WinMD::NewDataSet::ManufacturerDataTable());
        __super::Tables->Add(this->tableManufacturer);
        this->tableProduct = (gcnew OpenZWave_WinMD::NewDataSet::ProductDataTable());
        __super::Tables->Add(this->tableProduct);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"ManufacturerSpecificData_Manufacturer", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableManufacturerSpecificData->ManufacturerSpecificData_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableManufacturer->ManufacturerSpecificData_IdColumn}));
        this->tableManufacturer->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Manufacturer_Product", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableManufacturer->Manufacturer_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableProduct->Manufacturer_IdColumn}));
        this->tableProduct->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationManufacturerSpecificData_Manufacturer = (gcnew ::System::Data::DataRelation(L"ManufacturerSpecificData_Manufacturer", 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableManufacturerSpecificData->ManufacturerSpecificData_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableManufacturer->ManufacturerSpecificData_IdColumn}, false));
        this->relationManufacturerSpecificData_Manufacturer->Nested = true;
        this->Relations->Add(this->relationManufacturerSpecificData_Manufacturer);
        this->relationManufacturer_Product = (gcnew ::System::Data::DataRelation(L"Manufacturer_Product", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableManufacturer->Manufacturer_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableProduct->Manufacturer_IdColumn}, false));
        this->relationManufacturer_Product->Nested = true;
        this->Relations->Add(this->relationManufacturer_Product);
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeManufacturerSpecificData() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeManufacturer() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeProduct() {
        return false;
    }
    
    inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ManufacturerSpecificDataDataTable::ManufacturerSpecificDataDataTable() {
        this->TableName = L"ManufacturerSpecificData";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::ManufacturerSpecificDataDataTable::ManufacturerSpecificDataDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::ManufacturerSpecificDataDataTable::ManufacturerSpecificDataDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ManufacturerSpecificDataDataTable::ManufacturerSpecificData_IdColumn::get() {
        return this->columnManufacturerSpecificData_Id;
    }
    
    inline ::System::Int32 NewDataSet::ManufacturerSpecificDataDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  NewDataSet::ManufacturerSpecificDataDataTable::default::get(
                ::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::ManufacturerSpecificDataDataTable::AddManufacturerSpecificDataRow(OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  NewDataSet::ManufacturerSpecificDataDataTable::AddManufacturerSpecificDataRow() {
        OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  rowManufacturerSpecificDataRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {nullptr};
        rowManufacturerSpecificDataRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowManufacturerSpecificDataRow);
        return rowManufacturerSpecificDataRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::ManufacturerSpecificDataDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ManufacturerSpecificDataDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ManufacturerSpecificDataDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataDataTable());
    }
    
    inline ::System::Void NewDataSet::ManufacturerSpecificDataDataTable::InitVars() {
        this->columnManufacturerSpecificData_Id = __super::Columns[L"ManufacturerSpecificData_Id"];
    }
    
    inline ::System::Void NewDataSet::ManufacturerSpecificDataDataTable::InitClass() {
        this->columnManufacturerSpecificData_Id = (gcnew ::System::Data::DataColumn(L"ManufacturerSpecificData_Id", ::System::Int32::typeid, 
            nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnManufacturerSpecificData_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnManufacturerSpecificData_Id}, 
                true)));
        this->columnManufacturerSpecificData_Id->AutoIncrement = true;
        this->columnManufacturerSpecificData_Id->AllowDBNull = false;
        this->columnManufacturerSpecificData_Id->Unique = true;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  NewDataSet::ManufacturerSpecificDataDataTable::NewManufacturerSpecificDataRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::ManufacturerSpecificDataDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::ManufacturerSpecificDataDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow::typeid;
    }
    
    inline ::System::Void NewDataSet::ManufacturerSpecificDataDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ManufacturerSpecificDataRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ManufacturerSpecificDataDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ManufacturerSpecificDataRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ManufacturerSpecificDataDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ManufacturerSpecificDataRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ManufacturerSpecificDataDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ManufacturerSpecificDataRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ManufacturerSpecificDataDataTable::RemoveManufacturerSpecificDataRow(OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ManufacturerSpecificDataDataTable::GetTypedTableSchema(
                ::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ManufacturerSpecificDataDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ManufacturerDataTable::ManufacturerDataTable() {
        this->TableName = L"Manufacturer";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::ManufacturerDataTable::ManufacturerDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::ManufacturerDataTable::ManufacturerDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ManufacturerDataTable::idColumn::get() {
        return this->columnid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ManufacturerDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ManufacturerDataTable::Manufacturer_IdColumn::get() {
        return this->columnManufacturer_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ManufacturerDataTable::ManufacturerSpecificData_IdColumn::get() {
        return this->columnManufacturerSpecificData_Id;
    }
    
    inline ::System::Int32 NewDataSet::ManufacturerDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ManufacturerRow^  NewDataSet::ManufacturerDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::ManufacturerDataTable::AddManufacturerRow(OpenZWave_WinMD::NewDataSet::ManufacturerRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::ManufacturerRow^  NewDataSet::ManufacturerDataTable::AddManufacturerRow(System::String^  id, 
                System::String^  name, OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  parentManufacturerSpecificDataRowByManufacturerSpecificData_Manufacturer) {
        OpenZWave_WinMD::NewDataSet::ManufacturerRow^  rowManufacturerRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {id, name, nullptr, 
            nullptr};
        if (parentManufacturerSpecificDataRowByManufacturerSpecificData_Manufacturer != nullptr) {
            columnValuesArray[3] = parentManufacturerSpecificDataRowByManufacturerSpecificData_Manufacturer[0];
        }
        rowManufacturerRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowManufacturerRow);
        return rowManufacturerRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::ManufacturerDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ManufacturerDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::ManufacturerDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ManufacturerDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::ManufacturerDataTable());
    }
    
    inline ::System::Void NewDataSet::ManufacturerDataTable::InitVars() {
        this->columnid = __super::Columns[L"id"];
        this->columnname = __super::Columns[L"name"];
        this->columnManufacturer_Id = __super::Columns[L"Manufacturer_Id"];
        this->columnManufacturerSpecificData_Id = __super::Columns[L"ManufacturerSpecificData_Id"];
    }
    
    inline ::System::Void NewDataSet::ManufacturerDataTable::InitClass() {
        this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnid);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnManufacturer_Id = (gcnew ::System::Data::DataColumn(L"Manufacturer_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnManufacturer_Id);
        this->columnManufacturerSpecificData_Id = (gcnew ::System::Data::DataColumn(L"ManufacturerSpecificData_Id", ::System::Int32::typeid, 
            nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnManufacturerSpecificData_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnManufacturer_Id}, 
                true)));
        this->columnid->AllowDBNull = false;
        this->columnid->Namespace = L"";
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
        this->columnManufacturer_Id->AutoIncrement = true;
        this->columnManufacturer_Id->AllowDBNull = false;
        this->columnManufacturer_Id->Unique = true;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ManufacturerRow^  NewDataSet::ManufacturerDataTable::NewManufacturerRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::ManufacturerDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::ManufacturerRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::ManufacturerDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::ManufacturerRow::typeid;
    }
    
    inline ::System::Void NewDataSet::ManufacturerDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ManufacturerRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::ManufacturerRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ManufacturerDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ManufacturerRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::ManufacturerRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ManufacturerDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ManufacturerRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::ManufacturerRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ManufacturerDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ManufacturerRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::ManufacturerRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ManufacturerDataTable::RemoveManufacturerRow(OpenZWave_WinMD::NewDataSet::ManufacturerRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ManufacturerDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ManufacturerDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ProductDataTable::ProductDataTable() {
        this->TableName = L"Product";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::ProductDataTable::ProductDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::ProductDataTable::ProductDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ProductDataTable::typeColumn::get() {
        return this->columntype;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ProductDataTable::idColumn::get() {
        return this->columnid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ProductDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ProductDataTable::configColumn::get() {
        return this->columnconfig;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::ProductDataTable::Manufacturer_IdColumn::get() {
        return this->columnManufacturer_Id;
    }
    
    inline ::System::Int32 NewDataSet::ProductDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProductRow^  NewDataSet::ProductDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::ProductDataTable::AddProductRow(OpenZWave_WinMD::NewDataSet::ProductRow^  row) {
        this->Rows->Add(row);
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProductRow^  NewDataSet::ProductDataTable::AddProductRow(System::String^  type, System::String^  id, 
                System::String^  name, System::Uri^  config, OpenZWave_WinMD::NewDataSet::ManufacturerRow^  parentManufacturerRowByManufacturer_Product) {
        OpenZWave_WinMD::NewDataSet::ProductRow^  rowProductRow = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {type, id, name, config, 
            nullptr};
        if (parentManufacturerRowByManufacturer_Product != nullptr) {
            columnValuesArray[4] = parentManufacturerRowByManufacturer_Product[2];
        }
        rowProductRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowProductRow);
        return rowProductRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::ProductDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ProductDataTable::Clone() {
        OpenZWave_WinMD::NewDataSet::ProductDataTable^  cln = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::ProductDataTable::CreateInstance() {
        return (gcnew OpenZWave_WinMD::NewDataSet::ProductDataTable());
    }
    
    inline ::System::Void NewDataSet::ProductDataTable::InitVars() {
        this->columntype = __super::Columns[L"type"];
        this->columnid = __super::Columns[L"id"];
        this->columnname = __super::Columns[L"name"];
        this->columnconfig = __super::Columns[L"config"];
        this->columnManufacturer_Id = __super::Columns[L"Manufacturer_Id"];
    }
    
    inline ::System::Void NewDataSet::ProductDataTable::InitClass() {
        this->columntype = (gcnew ::System::Data::DataColumn(L"type", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntype);
        this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnid);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnconfig = (gcnew ::System::Data::DataColumn(L"config", ::System::Uri::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnconfig);
        this->columnManufacturer_Id = (gcnew ::System::Data::DataColumn(L"Manufacturer_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnManufacturer_Id);
        this->columntype->AllowDBNull = false;
        this->columntype->Namespace = L"";
        this->columnid->AllowDBNull = false;
        this->columnid->Namespace = L"";
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
        this->columnconfig->Namespace = L"";
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProductRow^  NewDataSet::ProductDataTable::NewProductRow() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::ProductDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew OpenZWave_WinMD::NewDataSet::ProductRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::ProductDataTable::GetRowType() {
        return OpenZWave_WinMD::NewDataSet::ProductRow::typeid;
    }
    
    inline ::System::Void NewDataSet::ProductDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->ProductRowChanged(this, (gcnew OpenZWave_WinMD::NewDataSet::ProductRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ProductDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->ProductRowChanging(this, (gcnew OpenZWave_WinMD::NewDataSet::ProductRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ProductDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->ProductRowDeleted(this, (gcnew OpenZWave_WinMD::NewDataSet::ProductRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ProductDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->ProductRowDeleting(this, (gcnew OpenZWave_WinMD::NewDataSet::ProductRowChangeEvent((cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::ProductDataTable::RemoveProductRow(OpenZWave_WinMD::NewDataSet::ProductRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ProductDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        OpenZWave_WinMD::NewDataSet^  ds = (gcnew OpenZWave_WinMD::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"ProductDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::ManufacturerSpecificDataRow::ManufacturerSpecificDataRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableManufacturerSpecificData = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::ManufacturerSpecificDataRow::ManufacturerSpecificData_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableManufacturerSpecificData->ManufacturerSpecificData_IdColumn]));
    }
    inline System::Void NewDataSet::ManufacturerSpecificDataRow::ManufacturerSpecificData_Id::set(System::Int32 value) {
        this[this->tableManufacturerSpecificData->ManufacturerSpecificData_IdColumn] = value;
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::ManufacturerRow^  >^  NewDataSet::ManufacturerSpecificDataRow::GetManufacturerRows() {
        if (this->Table->ChildRelations[L"ManufacturerSpecificData_Manufacturer"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::ManufacturerRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::ManufacturerRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"ManufacturerSpecificData_Manufacturer"])));
        }
    }
    
    
    inline NewDataSet::ManufacturerRow::ManufacturerRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableManufacturer = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::ManufacturerRow::id::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableManufacturer->idColumn]));
    }
    inline System::Void NewDataSet::ManufacturerRow::id::set(System::String^  value) {
        this[this->tableManufacturer->idColumn] = value;
    }
    
    inline System::String^  NewDataSet::ManufacturerRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableManufacturer->nameColumn]));
    }
    inline System::Void NewDataSet::ManufacturerRow::name::set(System::String^  value) {
        this[this->tableManufacturer->nameColumn] = value;
    }
    
    inline System::Int32 NewDataSet::ManufacturerRow::Manufacturer_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tableManufacturer->Manufacturer_IdColumn]));
    }
    inline System::Void NewDataSet::ManufacturerRow::Manufacturer_Id::set(System::Int32 value) {
        this[this->tableManufacturer->Manufacturer_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::ManufacturerRow::ManufacturerSpecificData_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableManufacturer->ManufacturerSpecificData_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ManufacturerSpecificData_Id\' in table \'Manufacturer\' is DBN" 
L"ull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ManufacturerRow::ManufacturerSpecificData_Id::set(System::Int32 value) {
        this[this->tableManufacturer->ManufacturerSpecificData_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  NewDataSet::ManufacturerRow::ManufacturerSpecificDataRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  >(this->GetParentRow(this->Table->ParentRelations[L"ManufacturerSpecificData_Manufacturer"])));
    }
    inline System::Void NewDataSet::ManufacturerRow::ManufacturerSpecificDataRow::set(OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"ManufacturerSpecificData_Manufacturer"]);
    }
    
    inline ::System::Boolean NewDataSet::ManufacturerRow::IsManufacturerSpecificData_IdNull() {
        return this->IsNull(this->tableManufacturer->ManufacturerSpecificData_IdColumn);
    }
    
    inline ::System::Void NewDataSet::ManufacturerRow::SetManufacturerSpecificData_IdNull() {
        this[this->tableManufacturer->ManufacturerSpecificData_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< OpenZWave_WinMD::NewDataSet::ProductRow^  >^  NewDataSet::ManufacturerRow::GetProductRows() {
        if (this->Table->ChildRelations[L"Manufacturer_Product"] == nullptr) {
            return gcnew cli::array< OpenZWave_WinMD::NewDataSet::ProductRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< OpenZWave_WinMD::NewDataSet::ProductRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Manufacturer_Product"])));
        }
    }
    
    
    inline NewDataSet::ProductRow::ProductRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableProduct = (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ProductDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::ProductRow::type::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableProduct->typeColumn]));
    }
    inline System::Void NewDataSet::ProductRow::type::set(System::String^  value) {
        this[this->tableProduct->typeColumn] = value;
    }
    
    inline System::String^  NewDataSet::ProductRow::id::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableProduct->idColumn]));
    }
    inline System::Void NewDataSet::ProductRow::id::set(System::String^  value) {
        this[this->tableProduct->idColumn] = value;
    }
    
    inline System::String^  NewDataSet::ProductRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableProduct->nameColumn]));
    }
    inline System::Void NewDataSet::ProductRow::name::set(System::String^  value) {
        this[this->tableProduct->nameColumn] = value;
    }
    
    inline System::Uri^  NewDataSet::ProductRow::config::get() {
        try {
            return (cli::safe_cast<::System::Uri^  >(this[this->tableProduct->configColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'config\' in table \'Product\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ProductRow::config::set(System::Uri^  value) {
        this[this->tableProduct->configColumn] = value;
    }
    
    inline System::Int32 NewDataSet::ProductRow::Manufacturer_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableProduct->Manufacturer_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Manufacturer_Id\' in table \'Product\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::ProductRow::Manufacturer_Id::set(System::Int32 value) {
        this[this->tableProduct->Manufacturer_IdColumn] = value;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ManufacturerRow^  NewDataSet::ProductRow::ManufacturerRow::get() {
        return (cli::safe_cast<OpenZWave_WinMD::NewDataSet::ManufacturerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Manufacturer_Product"])));
    }
    inline System::Void NewDataSet::ProductRow::ManufacturerRow::set(OpenZWave_WinMD::NewDataSet::ManufacturerRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"Manufacturer_Product"]);
    }
    
    inline ::System::Boolean NewDataSet::ProductRow::IsconfigNull() {
        return this->IsNull(this->tableProduct->configColumn);
    }
    
    inline ::System::Void NewDataSet::ProductRow::SetconfigNull() {
        this[this->tableProduct->configColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::ProductRow::IsManufacturer_IdNull() {
        return this->IsNull(this->tableProduct->Manufacturer_IdColumn);
    }
    
    inline ::System::Void NewDataSet::ProductRow::SetManufacturer_IdNull() {
        this[this->tableProduct->Manufacturer_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::ManufacturerSpecificDataRowChangeEvent::ManufacturerSpecificDataRowChangeEvent(OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ManufacturerSpecificDataRow^  NewDataSet::ManufacturerSpecificDataRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::ManufacturerSpecificDataRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::ManufacturerRowChangeEvent::ManufacturerRowChangeEvent(OpenZWave_WinMD::NewDataSet::ManufacturerRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ManufacturerRow^  NewDataSet::ManufacturerRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::ManufacturerRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::ProductRowChangeEvent::ProductRowChangeEvent(OpenZWave_WinMD::NewDataSet::ProductRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline OpenZWave_WinMD::NewDataSet::ProductRow^  NewDataSet::ProductRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::ProductRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
